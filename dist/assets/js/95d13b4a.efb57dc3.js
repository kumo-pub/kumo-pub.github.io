"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[29898],{11055:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=i(74848),t=i(28453);const r={title:"Mingw-w64",description:"Use x64, x86, arm64 and arm community triplets for Mingw-w64.",date:"01/10/2024","ms.topic":"concept-article"},o="Mingw-w64",a={id:"kmpkg/users/platforms/mingw",title:"Mingw-w64",description:"Use x64, x86, arm64 and arm community triplets for Mingw-w64.",source:"@site/docs/kmpkg/users/platforms/mingw.md",sourceDirName:"kmpkg/users/platforms",slug:"/kmpkg/users/platforms/mingw",permalink:"/docs/next/kmpkg/users/platforms/mingw",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Mingw-w64",description:"Use x64, x86, arm64 and arm community triplets for Mingw-w64.",date:"01/10/2024","ms.topic":"concept-article"}},l={},c=[{value:"Mingw-w64 community triplets",id:"mingw-w64-community-triplets",level:2},{value:"Using Mingw-w64 natively on Windows",id:"mingw-native",level:2},{value:"How to avoid mixing different installations",id:"how-to-avoid-mixing-different-installations",level:3},{value:"Using Mingw-w64 to build Windows programs on other systems",id:"mingw-cross",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"mingw-w64",children:"Mingw-w64"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"[!NOTE]\nMinGW is not tested as part of kmpkg repository's CI process, so regressions can occur as part of library updates. PRs improving support are welcome!"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"mingw-w64-community-triplets",children:"Mingw-w64 community triplets"}),"\n",(0,s.jsxs)(e.p,{children:["kmpkg includes ",(0,s.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg/tree/master/triplets/community",children:"x64, x86, arm64 and arm community triplets"})," for ",(0,s.jsx)(e.a,{href:"http://mingw-w64.org/",children:"Mingw-w64"}),". They don't depend on Visual Studio and can be used natively on Windows as well as for cross-compiling on other operating systems. There are two variants of each triplet, selecting between static and dynamic linking. The actual tools (g++ etc.) are expected to be named with particular prefixes."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Architecture"}),(0,s.jsx)(e.th,{children:"kmpkg community triplets"}),(0,s.jsx)(e.th,{children:"Tool name prefix"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"x64"}),(0,s.jsx)(e.td,{children:"x64-mingw-dynamic, x64-mingw-static"}),(0,s.jsx)(e.td,{children:"x86_64-w64-mingw32-"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"x86"}),(0,s.jsx)(e.td,{children:"x86-mingw-dynamic, x86-mingw-static"}),(0,s.jsx)(e.td,{children:"i686-w64-mingw32-"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"arm64"}),(0,s.jsx)(e.td,{children:"arm64-mingw-dynamic, arm64-mingw-static"}),(0,s.jsx)(e.td,{children:"aarch64-w64-mingw32-"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"arm"}),(0,s.jsx)(e.td,{children:"arm-mingw-dynamic, arm-mingw-static"}),(0,s.jsx)(e.td,{children:"armv7-w64-mingw32-"})]})]})]}),"\n",(0,s.jsx)(e.p,{children:"These triplets are not tested by continuous integration, so many ports\ndo not build, and even existing ports may break on port updates.\nBecause of this, community involvement is paramount!"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg/discussions?discussions_q=mingw",children:"Discussions"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg/issues?q=is%3Aissue+is%3Aopen+mingw",children:"Open issues"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg/pulls?q=is%3Apr+is%3Aopen+mingw",children:"Open pull requests"})}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"mingw-native",children:"Using Mingw-w64 natively on Windows"}),"\n",(0,s.jsxs)(e.p,{children:["With ",(0,s.jsx)(e.a,{href:"https://www.msys2.org/",children:"MSYS2"}),", it is possible to easily create a full environment for building ports with Mingw-w64 on a Windows PC."]}),"\n",(0,s.jsx)(e.p,{children:"When building software for native windows environments, you must use a mingw subsystem of MSYS2, and install some packages (with a specific prefix) for this subsystem."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"architecture"}),(0,s.jsx)(e.th,{children:"kmpkg triplets"}),(0,s.jsx)(e.th,{children:"subsystem"}),(0,s.jsx)(e.th,{children:"package prefix"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"x64"}),(0,s.jsx)(e.td,{children:"x64-mingw-dynamic, x64-mingw-static"}),(0,s.jsx)(e.td,{children:"mingw64"}),(0,s.jsx)(e.td,{children:"mingw-w64-x86_64-"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"x86"}),(0,s.jsx)(e.td,{children:"x86-mingw-dynamic, x86-mingw-static"}),(0,s.jsx)(e.td,{children:"mingw32"}),(0,s.jsx)(e.td,{children:"mingw-w64-i686-"})]})]})]}),"\n",(0,s.jsx)(e.p,{children:"After the basic installation of MSYS2, you will need to install a few additional packages for software development, for example, for x64:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"pacman -S --needed git base-devel mingw-w64-x86_64-toolchain\n"})}),"\n",(0,s.jsx)(e.p,{children:"The active subsystem is selected by running the MSYS2 MinGW app, or changed in a running terminal by"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'source shell mingw64   # for x64, or "mingw32" for x86\n'})}),"\n",(0,s.jsx)(e.p,{children:"The bootstrapping of kmpkg shall be done by running bootstrap-kmpkg.bat. This command will download the official kmpkg.exe."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"git clone https://gitee.com/kumo-pub/kmpkg.git\ncd kmpkg\n./bootstrap-kmpkg.bat\n"})}),"\n",(0,s.jsx)(e.p,{children:"For building packages, you need to tell kmpkg that you want to use the mingw triplet. This can be done in different ways. When Visual Studio is not installed, you must also set the host triplet to mingw. This is needed to resolve host dependencies. For convenience, you can use environment variables to set both triplets:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"export KMPKG_DEFAULT_TRIPLET=x64-mingw-dynamic\nexport KMPKG_DEFAULT_HOST_TRIPLET=x64-mingw-dynamic\n"})}),"\n",(0,s.jsx)(e.p,{children:"Now you can test your setup:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"./kmpkg install zlib\n"})}),"\n",(0,s.jsx)(e.h3,{id:"how-to-avoid-mixing-different-installations",children:"How to avoid mixing different installations"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://www.msys2.org/wiki/MSYS2-introduction/#path",children:"The MSYS2 project explicitly warns"}),' that "mixing in programs from other MSYS2 installations, Cygwin installations, compiler toolchains or even various other programs is not supported and will probably break things in unexpected ways." For example, the proper passing of command line arguments with quoting and escaping may fail.']}),"\n",(0,s.jsxs)(e.p,{children:["But kmpkg ports implicitly create MSYS2 installations, e.g. for ",(0,s.jsx)(e.code,{children:"pkg-config"})," and for various other build tools needed to deal with packages based on autoconf. In particular, when ports prepend the directory of tools to the ",(0,s.jsx)(e.code,{children:"PATH"})," environment variable, this may change which tool with a particular name is actually invoked, and how arguments are passed between tools."]}),"\n",(0,s.jsxs)(e.p,{children:["To mitigate such issues when working with a full MSYS2 installation, try to keep the directories of the msys subsystem (",(0,s.jsx)(e.code,{children:"/usr/bin"}),", ",(0,s.jsx)(e.code,{children:"bin"}),") out of the ",(0,s.jsx)(e.code,{children:"PATH"})," environment variable as found by kmpkg. In bash, you may modify the ",(0,s.jsx)(e.code,{children:"PATH"})," just for a single call of kmpkg:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'PATH="${PATH/:\\/usr\\/bin:\\/bin:/:}" ./kmpkg install libpq\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Alternatively, you may run kmpkg from a regular Command Prompt, after adding ",(0,s.jsx)(e.em,{children:"only"})," the desired mingw directory (e.g. ",(0,s.jsx)(e.code,{children:"C:\\msys64\\mingw64\\bin"}),") to the ",(0,s.jsx)(e.code,{children:"PATH"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["When using kmpkg for CI with standard images on Azure Pipelines, Github Actions or similar, the default ",(0,s.jsx)(e.code,{children:"PATH"})," might contain more directories that create a mix of MSYS2 programs from different installations. You may want to set the desired ",(0,s.jsx)(e.code,{children:"PATH"})," manually, or remove directories that contain ",(0,s.jsx)(e.code,{children:"sh.exe"}),", ",(0,s.jsx)(e.code,{children:"bash.exe"}),", ",(0,s.jsx)(e.code,{children:"msys-2.0.dll"})," or ",(0,s.jsx)(e.code,{children:"cygwin1.dll"}),"."]}),"\n",(0,s.jsx)(e.h2,{id:"mingw-cross",children:"Using Mingw-w64 to build Windows programs on other systems"}),"\n",(0,s.jsxs)(e.p,{children:["You can use the kmpkg mingw community triplets with toolchains on non-Windows computers to cross-compile software to be run on Windows. Many Linux distributions offer such toolchains in optional packages with a mingw-w64 ",(0,s.jsx)(e.a,{href:"https://repology.org/projects/?search=-mingw-w64",children:"suffix"})," or ",(0,s.jsx)(e.a,{href:"https://repology.org/projects/?search=mingw-w64-",children:"prefix"}),". As an example, for Debian-based distributions, you would start with this installation command for the x64 toolchain:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"sudo apt-get install gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64\n"})}),"\n",(0,s.jsxs)(e.p,{children:["The packaged versions of Mingw-w64 toolchains on Linux distributions might be older releases which lack some useful features or bug fixes. An alternative independent toolchain is offered by ",(0,s.jsx)(e.a,{href:"https://mxe.cc/",children:"MXE"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["For kmpkg bootstrapping, clone the github repository and run the ",(0,s.jsx)(e.code,{children:"bootstrap-kmpkg.sh"})," script:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"git clone https://gitee.com/kumo-pub/kmpkg.git\ncd kmpkg\n./bootstrap-kmpkg.sh\n./kmpkg install zlib:x64-mingw-dynamic\n"})})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>a});var s=i(96540);const t={},r=s.createContext(t);function o(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);
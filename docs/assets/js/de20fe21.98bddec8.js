"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[51332],{67966:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>c,contentTitle:()=>r,default:()=>b,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var n=s(74848),i=s(28453);const t={title:"Selecting Boost Versions as a Set",description:"Learn how to set versions across a library framework like Boost or Qt in kmpkg.",date:"01/10/2024",ROBOTS:"NOINDEX",is_archived:!0},r="Pin old Boost versions",a={id:"kmpkg/users/examples/modify-baseline-to-pin-old-boost",title:"Selecting Boost Versions as a Set",description:"Learn how to set versions across a library framework like Boost or Qt in kmpkg.",source:"@site/docs/kmpkg/users/examples/modify-baseline-to-pin-old-boost.md",sourceDirName:"kmpkg/users/examples",slug:"/kmpkg/users/examples/modify-baseline-to-pin-old-boost",permalink:"/docs/next/kmpkg/users/examples/modify-baseline-to-pin-old-boost",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748081772e3,frontMatter:{title:"Selecting Boost Versions as a Set",description:"Learn how to set versions across a library framework like Boost or Qt in kmpkg.",date:"01/10/2024",ROBOTS:"NOINDEX",is_archived:!0}},c={},l=[{value:"What is a meta-package?",id:"what-is-a-meta-package",level:2},{value:"Method 1: Pin specific packages",id:"method-1-pin-specific-packages",level:2},{value:"Method 2: Modify baseline",id:"method-2-modify-baseline",level:2},{value:"Step 1: Create a new branch",id:"step-1-create-a-new-branch",level:3},{value:"Step 2: Modify the baseline",id:"step-2-modify-the-baseline",level:3},{value:"Step 3: Commit your changes",id:"step-3-commit-your-changes",level:3},{value:"Step 4: Get your baseline commit SHA",id:"step-4-get-your-baseline-commit-sha",level:3},{value:"Step 5: (Optional) Go back to the main repository branch",id:"step-5-optional-go-back-to-the-main-repository-branch",level:3},{value:"Step 6: Create your manifest file with your custom baseline",id:"step-6-create-your-manifest-file-with-your-custom-baseline",level:3}];function d(e){const o={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"pin-old-boost-versions",children:"Pin old Boost versions"})}),"\n",(0,n.jsxs)(o.p,{children:["This document will teach you how to set versions of meta-packages like ",(0,n.jsx)(o.code,{children:"boost"})," or ",(0,n.jsx)(o.code,{children:"qt5"}),"."]}),"\n",(0,n.jsx)(o.h2,{id:"what-is-a-meta-package",children:"What is a meta-package?"}),"\n",(0,n.jsx)(o.p,{children:"In kmpkg we call meta-packages to ports that by themselves don't install anything but that instead forward installation to another port or ports. The reasons for these meta-packages to exist are plenty: to install different versions of a library depending on platform or to conveniently install/uninstall a collection of related packages (Boost and Qt)."}),"\n",(0,n.jsx)(o.p,{children:"In the case of Boost, it is unlikely that a user requires all of the 140+ Boost libraries in their project. For the sake of convenience, kmpkg splits Boost into multiple sub-packages broken down to individual libraries. By doing so, users can limit the subset of Boost libraries that they depend on."}),"\n",(0,n.jsxs)(o.p,{children:["If a user wants to install all of the Boost libraries available in kmpkg, they can do so by installing the ",(0,n.jsx)(o.code,{children:"boost"})," meta-package."]}),"\n",(0,n.jsx)(o.p,{children:"Due to the nature of meta-packages, some unexpected issues arise when trying to use them with versioning. If a user writes the following manifest file:"}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.code,{children:"kmpkg.json"})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-json",children:'{\r\n    "name": "demo",\r\n    "version": "1.0.0",\r\n    "builtin-baseline": "787fe1418ea968913cc6daf11855ffd8b0b5e9d4",\r\n    "dependencies": [ "boost-tuple" ],\r\n    "overrides": [\r\n        { "name": "boost", "version": "1.72.0" }\r\n    ]\r\n}\n'})}),"\n",(0,n.jsx)(o.p,{children:"The resulting installation plan is:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"The following packages will be built and installed:\r\n    boost-assert[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-assert\\3393715b4ebe30fe1c3b68acf7f84363e611f156\r\n    boost-compatibility[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-compatibility\\cda5675366367789659c59aca65fc57d03c51deb\r\n    boost-config[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-config\\ca82ca1b9c1739c91f3cf42c68cee56c896ae6bd\r\n    boost-container-hash[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-container-hash\\bf472c23d29c3d80b562c43471eb92cea998f372\r\n    boost-core[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-core\\20a19f6ece37686a02eed33e1f58add8b7a2582a\r\n    boost-detail[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-detail\\96744251f025f9b3c856a275dfc338031876777b\r\n    boost-integer[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-integer\\de70ce0d1500df1eda3496c4f98f42f5db256b4a\r\n    boost-io[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-io\\7bf3407372f8fc2a99321d24a0e952d44fe25bf3\r\n    boost-preprocessor[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-preprocessor\\8d78b8ba2e9f54cb00137115ddd2ffec1c63c149\r\n    boost-static-assert[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-static-assert\\2a41c4703c7122de25b1c60510c43edc9371f63d\r\n    boost-throw-exception[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-throw-exception\\b13bdf32a20786a0165cc20205ef63765cac0627\r\n    boost-tuple[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-tuple\\22e3d000a178a88992c430d8ae8a0244c7dea674\r\n    boost-type-traits[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-type-traits\\8829793f6c6c913257314caa317599f8d253a5ca\r\n    boost-uninstall[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-uninstall\\08933bad27b6d41caef0940c31e2069ecb6a079c\r\n    boost-utility[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-utility\\47572946bf6a63c731b9c4142eecb8bef3d3b270\r\n    boost-kmpkg-helpers[core]:x64-windows -> 7#2 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-kmpkg-helpers\\2a21e5ab45d1ce41c185faf85dff0670ea6def1d\n"})}),"\n",(0,n.jsxs)(o.p,{children:["It is reasonable to expect that overriding ",(0,n.jsx)(o.code,{children:"boost"})," to version 1.72.0 results in all Boost packages being pinned to version 1.72.0. ",(0,n.jsxs)(o.strong,{children:["However, kmpkg does not treat the ",(0,n.jsx)(o.code,{children:"boost"})," meta-package any differently that any other port."]})," In other words, kmpkg has no notion that ",(0,n.jsx)(o.code,{children:"boost"})," is related to all the other ",(0,n.jsx)(o.code,{children:"boost-*"})," libraries, other than it depends on all of them. For this reason, all the other boost packages are installed at version 1.75.0, which is the baseline version."]}),"\n",(0,n.jsx)(o.p,{children:"Below, we describe two methods to pin down Boost versions effectively."}),"\n",(0,n.jsx)(o.h2,{id:"method-1-pin-specific-packages",children:"Method 1: Pin specific packages"}),"\n",(0,n.jsxs)(o.p,{children:["Use ",(0,n.jsx)(o.code,{children:'"overrides"'})," to force specific versions in a package-by-package basis."]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.code,{children:"kmpkg.json"})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-json",children:'{\r\n    "name": "demo",\r\n    "version": "1.0.0",\r\n    "builtin-baseline": "787fe1418ea968913cc6daf11855ffd8b0b5e9d4",\r\n    "dependencies": [ "boost-tuple" ],\r\n    "overrides": [\r\n        { "name": "boost-core", "version": "1.72" },\r\n        { "name": "boost-integer", "version": "1.72" },\r\n        { "name": "boost-io", "version": "1.72" },\r\n        { "name": "boost-tuple", "version": "1.72" }\r\n    ]\r\n}\n'})}),"\n",(0,n.jsx)(o.p,{children:"This method allows you to quickly set the specific versions you want, but you will need to write an override for each package. Boost libraries are also heavily interdependent, which means that you may end up writing a lot of override lines."}),"\n",(0,n.jsx)(o.p,{children:"The second method makes it easy to pin the entire Boost collection and end up with a very simple manifest file."}),"\n",(0,n.jsx)(o.h2,{id:"method-2-modify-baseline",children:"Method 2: Modify baseline"}),"\n",(0,n.jsxs)(o.p,{children:["An easy way to set the version for the entirety of boost is to use the ",(0,n.jsx)(o.code,{children:'"builtin-baseline"'})," property."]}),"\n",(0,n.jsxs)(o.p,{children:["As of right now, it is only possible to go back to Boost version ",(0,n.jsx)(o.code,{children:"1.75.0"})," using a baseline, since that was the contemporary Boost version when the versioning feature was merged. ",(0,n.jsx)(o.strong,{children:"But, it is possible to modify the baseline to whatever you like and use that instead."})]}),"\n",(0,n.jsx)(o.h3,{id:"step-1-create-a-new-branch",children:"Step 1: Create a new branch"}),"\n",(0,n.jsxs)(o.p,{children:["As described in the versioning documentation. The value that goes in ",(0,n.jsx)(o.code,{children:'"builtin-baseline"'})," is a git commit in the microsoft/kmpkg repository's history. If you want to customize the baseline and have control over the kmpkg instance, you can create a new commit with said custom baseline."]}),"\n",(0,n.jsx)(o.p,{children:"Let's start by creating a new branch to hold our modified baseline."}),"\n",(0,n.jsx)(o.p,{children:"In the directory containing your clone of the kmpkg Git repository run:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-console",children:"git checkout -b custom-boost-baseline\n"})}),"\n",(0,n.jsxs)(o.p,{children:["This will create a new branch named ",(0,n.jsx)(o.code,{children:"custom-boost-baseline"})," and check it out immediately."]}),"\n",(0,n.jsx)(o.h3,{id:"step-2-modify-the-baseline",children:"Step 2: Modify the baseline"}),"\n",(0,n.jsx)(o.p,{children:"The next step is to modify the baseline file, open the file in your editor of choice and modify the entries for the Boost libraries."}),"\n",(0,n.jsxs)(o.p,{children:["Change the ",(0,n.jsx)(o.code,{children:'"baseline"'})," version to your desired version."]}),"\n",(0,n.jsxs)(o.blockquote,{children:["\n",(0,n.jsx)(o.p,{children:"[!NOTE]\r\nRemember to also set the port versions to 0 (or your desired version)."}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.code,{children:"${kmpkg-root}/versions/baseline.json"})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-diff",children:'...\r\n     "boost": {\r\n-      "baseline": "1.75.0",\r\n+      "baseline": "1.72.0",\r\n       "port-version": 0\r\n     },\r\n     "boost-accumulators": {\r\n-      "baseline": "1.75.0",\r\n-      "port-version": 1\r\n+      "baseline": "1.72.0",\r\n+      "port-version": 0\r\n     },\r\n     "boost-algorithm": {\r\n-      "baseline": "1.75.0",\r\n+      "baseline": "1.72.0",\r\n       "port-version": 0\r\n     },\r\n     "boost-align": {\r\n-      "baseline": "1.75.0",\r\n+      "baseline": "1.72.0",\r\n       "port-version": 0\r\n     },\r\n...\r\n    "boost-uninstall: {\r\n        "baseline": "1.75.0",\r\n        "port-version": 0\r\n    },\r\n...\n'})}),"\n",(0,n.jsxs)(o.p,{children:["Some ",(0,n.jsx)(o.code,{children:"boost-"})," packages are helpers used by kmpkg and are not part of Boost. For example, ",(0,n.jsx)(o.code,{children:'"boost-uninstall"'})," is a kmpkg helper to conveniently uninstall all Boost libraries, but it didn't exist for Boost version ",(0,n.jsx)(o.code,{children:"1.72.0"}),", in this case it is fine to leave it at ",(0,n.jsx)(o.code,{children:"1.75.0"})," to avoid baseline errors (since all versions in ",(0,n.jsx)(o.code,{children:"baseline.json"})," must have existed)."]}),"\n",(0,n.jsx)(o.h3,{id:"step-3-commit-your-changes",children:"Step 3: Commit your changes"}),"\n",(0,n.jsx)(o.p,{children:"After saving your modified file, run these commands to commit your changes:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-console",children:'git add versions/baseline.json\r\ngit commit -m "Baseline Boost 1.72.0"\n'})}),"\n",(0,n.jsx)(o.p,{children:"You can set the commit message to whatever you want, just make it useful for you."}),"\n",(0,n.jsx)(o.h3,{id:"step-4-get-your-baseline-commit-sha",children:"Step 4: Get your baseline commit SHA"}),"\n",(0,n.jsx)(o.p,{children:"Once all your changes are ready, you can get the commit SHA by running:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-console",children:"git rev-parse HEAD\n"})}),"\n",(0,n.jsxs)(o.p,{children:["The output of that command will be the commit SHA you need to put as the ",(0,n.jsx)(o.code,{children:'"builtin-baseline"'})," in your project's manifest file. Copy the 40-hex digits and save them to use later in your manifest file."]}),"\n",(0,n.jsx)(o.h3,{id:"step-5-optional-go-back-to-the-main-repository-branch",children:"Step 5: (Optional) Go back to the main repository branch"}),"\n",(0,n.jsx)(o.p,{children:"Once your changes have been committed locally, you can refer to the commit SHA regardless of the repository branch you're working on. So, let's go back to the main kmpkg repository branch."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-console",children:"git checkout HEAD\n"})}),"\n",(0,n.jsx)(o.h3,{id:"step-6-create-your-manifest-file-with-your-custom-baseline",children:"Step 6: Create your manifest file with your custom baseline"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-json",children:'{\r\n    "name": "demo",\r\n    "version": "1.0.0",\r\n    "builtin-baseline": "9b5cf7c3d9376ddf43429671282972ec4f99aa85",\r\n    "dependencies": [ "boost-tuple" ]\r\n}\n'})}),"\n",(0,n.jsxs)(o.p,{children:["In this example, commit SHA ",(0,n.jsx)(o.code,{children:"9b5cf7c3d9376ddf43429671282972ec4f99aa85"})," is the commit ID with the modified baseline. Even when a different branch (",(0,n.jsx)(o.code,{children:"master"})," in this case) is checked out, Git is able to find the commit as long as the branch with the modified baseline exists (the ",(0,n.jsx)(o.code,{children:"custom-boost-baseline"})," branch we created in step 1)."]}),"\n",(0,n.jsxs)(o.p,{children:["We run ",(0,n.jsx)(o.code,{children:"kmpkg install"})," in the directory containing our manifest file and the output looks like this:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-console",children:"The following packages will be built and installed:\r\n    boost-assert[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-assert\\6754398591f48435b28014ca0d60e5375a4c04d1\r\n    boost-compatibility[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-compatibility\\9893ff3c554575bc712df4108a949e07b269f401\r\n    boost-config[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-config\\de2784767046b06ec31eb718f10df512e51f2aad\r\n    boost-container-hash[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-container-hash\\cc19fb0154bbef188f309f49b2664ec7623b96b6\r\n    boost-core[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-core\\0eb5e20df9e267e9eca325be946f52ceb8a60229\r\n    boost-detail[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-detail\\759d7c6a3f9dbaed0b0c69fa0bb764f7606bb02d\r\n    boost-integer[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-integer\\173956c61a26e83b0f8b58b0baf60f06aeee637c\r\n    boost-preprocessor[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-preprocessor\\86eb3938b7875f124feb845331dbe84cbab5d1c6\r\n    boost-static-assert[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-static-assert\\e82d8f7f3ee07e927dc374f5a08ed6d6f4ef81f4\r\n    boost-throw-exception[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-throw-exception\\64df295f7df41de4fcb219834889b126b5020def\r\n    boost-tuple[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-tuple\\b3e1b01ffce6e367e4fed0a5538a8546abacb6b2\r\n    boost-type-traits[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-type-traits\\5e44ec657660eccf4d3b2710b092dd238e1e7a2d\r\n    boost-uninstall[core]:x64-windows -> 1.75.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-uninstall\\08933bad27b6d41caef0940c31e2069ecb6a079c\r\n    boost-utility[core]:x64-windows -> 1.72.0 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-utility\\7d721b2458d5d595ac341eb54883274f38a4b8c2\r\n    boost-kmpkg-helpers[core]:x64-windows -> 7#2 -- D:\\kmpkg\\buildtrees\\versioning\\versions\\boost-kmpkg-helpers\\2a21e5ab45d1ce41c185faf85dff0670ea6def1d\n"})}),"\n",(0,n.jsxs)(o.p,{children:["Notice how simple our manifest file has become. Instead of having a multitude of ",(0,n.jsx)(o.code,{children:'"overrides"'})," you can pin down all Boost packages by setting the ",(0,n.jsx)(o.code,{children:'"builtin-baseline"'})," as your modified baseline commit SHA."]})]})}function b(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,o,s)=>{s.d(o,{R:()=>r,x:()=>a});var n=s(96540);const i={},t=n.createContext(i);function r(e){const o=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(t.Provider,{value:o},e.children)}}}]);
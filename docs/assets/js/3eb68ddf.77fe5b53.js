"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[86093],{79733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var s=n(74848),l=n(28453);const i={},c="Actions Reference",r={id:"cpp/base/testing/kt/reference/actions",title:"Actions Reference",description:"Actions specify what a",source:"@site/versioned_docs/version-1.1.1/cpp/base/testing/kt/reference/actions.mdx",sourceDirName:"cpp/base/testing/kt/reference",slug:"/cpp/base/testing/kt/reference/actions",permalink:"/docs/cpp/base/testing/kt/reference/actions",draft:!1,unlisted:!1,tags:[],version:"1.1.1",frontMatter:{}},d={},o=[{value:"Returning a Value",id:"returning-a-value",level:2},{value:"Side Effects",id:"side-effects",level:2},{value:"Using a Function, Functor, or Lambda as an Action",id:"using-a-function-functor-or-lambda-as-an-action",level:2},{value:"Default Action",id:"default-action",level:2},{value:"Composite Actions",id:"composite-actions",level:2},{value:"Defining Actions",id:"defining-actions",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"actions-reference",children:"Actions Reference"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/cpp/base/testing/kt/kmock_for_dummies#actions-what-should-it-do",children:(0,s.jsx)(t.strong,{children:"Actions"})})," specify what a\nmock function should do when invoked. This page lists the built-in actions\nprovided by KumoTest. All actions are defined in the ",(0,s.jsx)(t.code,{children:"::testing"})," namespace."]}),"\n",(0,s.jsx)(t.h2,{id:"returning-a-value",children:"Returning a Value"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Action"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Return()"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Return from a ",(0,s.jsx)(t.code,{children:"void"})," mock function."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Return(value)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Return ",(0,s.jsx)(t.code,{children:"value"}),". If the type of ",(0,s.jsx)(t.code,{children:"value"})," is     different to the mock function's return type, ",(0,s.jsx)(t.code,{children:"value"})," is converted to the latter type ",(0,s.jsx)("i",{children:"at the time the expectation is set"}),", not when the action is executed."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ReturnArg<N>()"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Return the ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ReturnNew<T>(a1, ..., ak)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Return ",(0,s.jsx)(t.code,{children:"new T(a1, ..., ak)"}),"; a different      object is created each time."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ReturnNull()"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Return a null pointer."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ReturnPointee(ptr)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Return the value pointed to by ",(0,s.jsx)(t.code,{children:"ptr"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ReturnRef(variable)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Return a reference to ",(0,s.jsx)(t.code,{children:"variable"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ReturnRefOfCopy(value)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Return a reference to a copy of ",(0,s.jsx)(t.code,{children:"value"}),"; the  copy lives as long as the action."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ReturnRoundRobin({a1, ..., ak})"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Each call will return the next ",(0,s.jsx)(t.code,{children:"ai"})," in the list, starting at the beginning when the end of the list is reached."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"side-effects",children:"Side Effects"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Action"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Assign(&variable, value)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Assign ",(0,s.jsx)(t.code,{children:"value"})," to variable."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"DeleteArg<N>()"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Delete the ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument, which must be a pointer."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"SaveArg<N>(pointer)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Save the ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument to ",(0,s.jsx)(t.code,{children:"*pointer"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"SaveArgPointee<N>(pointer)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Save the value pointed to by the ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument to ",(0,s.jsx)(t.code,{children:"*pointer"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"SetArgReferee<N>(value)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Assign ",(0,s.jsx)(t.code,{children:"value"})," to the variable referenced by the ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"SetArgPointee<N>(value)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Assign ",(0,s.jsx)(t.code,{children:"value"})," to the variable pointed by the ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"SetArgumentPointee<N>(value)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Same as ",(0,s.jsx)(t.code,{children:"SetArgPointee<N>(value)"}),". Deprecated. Will be removed in v1.7.0."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"SetArrayArgument<N>(first, last)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Copies the elements in source range [",(0,s.jsx)(t.code,{children:"first"}),", ",(0,s.jsx)(t.code,{children:"last"}),") to the array pointed to by the ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument, which can be either a pointer or an iterator. The action does not take ownership of the elements in the source range."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"SetErrnoAndReturn(error, value)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Set ",(0,s.jsx)(t.code,{children:"errno"})," to ",(0,s.jsx)(t.code,{children:"error"})," and return ",(0,s.jsx)(t.code,{children:"value"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Throw(exception)"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Throws the given exception, which can be any copyable value. Available since v1.1.0."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"using-a-function-functor-or-lambda-as-an-action",children:"Using a Function, Functor, or Lambda as an Action"}),"\n",(0,s.jsxs)(t.p,{children:['In the following, by "callable" we mean a free function, ',(0,s.jsx)(t.code,{children:"std::function"}),",\nfunctor, or lambda."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Action"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"f"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Invoke ",(0,s.jsx)(t.code,{children:"f"})," with the arguments passed to the mock function, where ",(0,s.jsx)(t.code,{children:"f"})," is a callable."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Invoke(f)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Invoke ",(0,s.jsx)(t.code,{children:"f"})," with the arguments passed to the mock function, where ",(0,s.jsx)(t.code,{children:"f"})," can be a global/static function or a functor."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Invoke(object_pointer, &class::method)"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Invoke the method on the object with the arguments passed to the mock function."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"InvokeWithoutArgs(f)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Invoke ",(0,s.jsx)(t.code,{children:"f"}),", which can be a global/static function or a functor. ",(0,s.jsx)(t.code,{children:"f"})," must take no arguments."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"InvokeWithoutArgs(object_pointer, &class::method)"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Invoke the method on the object, which takes no arguments."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"InvokeArgument<N>(arg1, arg2, ..., argk)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Invoke the mock function's ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument, which must be a function or a functor, with the ",(0,s.jsx)(t.code,{children:"k"})," arguments."]})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"The return value of the invoked function is used as the return value of the\naction."}),"\n",(0,s.jsxs)(t.p,{children:["When defining a callable to be used with ",(0,s.jsx)(t.code,{children:"Invoke*()"}),", you can declare any unused\nparameters as ",(0,s.jsx)(t.code,{children:"Unused"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'using ::testing::Invoke;\ndouble Distance(Unused, double x, double y) { return sqrt(x*x + y*y); }\n...\nEXPECT_CALL(mock, Foo("Hi", _, _)).WillOnce(Invoke(Distance));\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Invoke(callback)"})," and ",(0,s.jsx)(t.code,{children:"InvokeWithoutArgs(callback)"})," take ownership of\n",(0,s.jsx)(t.code,{children:"callback"}),", which must be permanent. The type of ",(0,s.jsx)(t.code,{children:"callback"})," must be a base\ncallback type instead of a derived one, e.g."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"  BlockingClosure* done = new BlockingClosure;\n  ... Invoke(done) ...;  // This won't compile!\n\n  Closure* done2 = new BlockingClosure;\n  ... Invoke(done2) ...;  // This works.\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.code,{children:"InvokeArgument<N>(...)"}),", if an argument needs to be passed by reference,\nwrap it inside ",(0,s.jsx)(t.code,{children:"std::ref()"}),". For example,"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'using ::testing::InvokeArgument;\n...\nInvokeArgument<2>(5, string("Hi"), std::ref(foo))\n'})}),"\n",(0,s.jsxs)(t.p,{children:["calls the mock function's #2 argument, passing to it ",(0,s.jsx)(t.code,{children:"5"})," and ",(0,s.jsx)(t.code,{children:'string("Hi")'})," by\nvalue, and ",(0,s.jsx)(t.code,{children:"foo"})," by reference."]}),"\n",(0,s.jsx)(t.h2,{id:"default-action",children:"Default Action"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Action"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"DoDefault()"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Do the default action (specified by ",(0,s.jsx)(t.code,{children:"ON_CALL()"})," or the built-in one)."]})]})})]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"{: .callout .note}"}),"\n",(0,s.jsx)(t.strong,{children:"Note:"})," due to technical reasons, ",(0,s.jsx)(t.code,{children:"DoDefault()"})," cannot be used inside a\ncomposite action - trying to do so will result in a run-time error."]}),"\n",(0,s.jsx)(t.h2,{id:"composite-actions",children:"Composite Actions"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Action"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"DoAll(a1, a2, ..., an)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Do all actions ",(0,s.jsx)(t.code,{children:"a1"})," to ",(0,s.jsx)(t.code,{children:"an"})," and return the result of ",(0,s.jsx)(t.code,{children:"an"})," in each invocation. The first ",(0,s.jsx)(t.code,{children:"n - 1"})," sub-actions must return void and will receive a  readonly view of the arguments."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"IgnoreResult(a)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Perform action ",(0,s.jsx)(t.code,{children:"a"})," and ignore its result. ",(0,s.jsx)(t.code,{children:"a"})," must not return void."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"WithArg<N>(a)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Pass the ",(0,s.jsx)(t.code,{children:"N"}),"-th (0-based) argument of the mock function to action ",(0,s.jsx)(t.code,{children:"a"})," and perform it."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"WithArgs<N1, N2, ..., Nk>(a)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Pass the selected (0-based) arguments of the mock function to action ",(0,s.jsx)(t.code,{children:"a"})," and perform it."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"WithoutArgs(a)"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Perform action ",(0,s.jsx)(t.code,{children:"a"})," without any arguments."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"defining-actions",children:"Defining Actions"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Macro"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ACTION(Sum) { return arg0 + arg1; }"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Defines an action ",(0,s.jsx)(t.code,{children:"Sum()"})," to return the sum of the mock function's argument #0 and #1."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ACTION_P(Plus, n) { return arg0 + n; }"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Defines an action ",(0,s.jsx)(t.code,{children:"Plus(n)"})," to return the sum of the mock function's argument #0 and ",(0,s.jsx)(t.code,{children:"n"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ACTION_Pk(Foo, p1, ..., pk) { statements; }"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Defines a parameterized action ",(0,s.jsx)(t.code,{children:"Foo(p1, ..., pk)"})," to execute the given ",(0,s.jsx)(t.code,{children:"statements"}),"."]})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"ACTION*"})," macros cannot be used inside a function or class."]})]})}function a(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>r});var s=n(96540);const l={},i=s.createContext(l);function c(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[51048],{32913:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=i(74848),t=i(28453);const a={title:"Getting Started with Classic mode",description:"Learn to get started with SQLite with kmpkg in Classic mode.",date:"01/10/2024",ROBOTS:"NOINDEX",is_archived:!0},l="Installing and Using Packages Example: SQLite",r={id:"kmpkg/examples/installing-and-using-packages",title:"Getting Started with Classic mode",description:"Learn to get started with SQLite with kmpkg in Classic mode.",source:"@site/docs/kmpkg/examples/installing-and-using-packages.mdx",sourceDirName:"kmpkg/examples",slug:"/kmpkg/examples/installing-and-using-packages",permalink:"/docs/next/kmpkg/examples/installing-and-using-packages",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Getting Started with Classic mode",description:"Learn to get started with SQLite with kmpkg in Classic mode.",date:"01/10/2024",ROBOTS:"NOINDEX",is_archived:!0}},o={},c=[{value:"Step 1: Install",id:"install",level:2},{value:"Step 2: Use",id:"use",level:2},{value:"VS/MSBuild Project (User-wide integration)",id:"msbuild",level:3},{value:"CMake (Toolchain File)",id:"cmake",level:3},{value:"Handling libraries without native cmake support",id:"handling-libraries-without-native-cmake-support",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"installing-and-using-packages-example-sqlite",children:"Installing and Using Packages Example: SQLite"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["[!NOTE]\nThis old example uses Classic mode, but most developers will be happier with Manifest mode. See ",(0,s.jsx)(n.a,{href:"/docs/next/kmpkg/consume/manifest-mode",children:"Manifest mode: CMake Example"})," for an example of converting to Manifest mode."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#install",children:"Step 1: Install"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#use",children:"Step 2: Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#msbuild",children:"VS/MSBuild Project (User-wide integration)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#cmake",children:"CMake (Toolchain file)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/next/kmpkg/users/buildsystems/manual-integration",children:"Other integration options"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"install",children:"Step 1: Install"}),"\n",(0,s.jsxs)(n.p,{children:["First, we need to know what name ",(0,s.jsx)(n.a,{href:"https://sqlite.org",children:"SQLite"})," goes by in the ports tree. To do that, we'll run the ",(0,s.jsx)(n.code,{children:"search"})," command and inspect the output:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"PS D:\\src\\kmpkg> .\\kmpkg search sqlite\nlibodb-sqlite        2.4.0            Sqlite support for the ODB ORM library\nsqlite3              3.32.1           SQLite is a software library that implements a se...\n\nIf your library is not listed, please open an issue at:\n    https://gitee.com/kumo-pub/kmpkg/issues\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Looking at the list, we can see that the port is named "sqlite3". You can also run the ',(0,s.jsx)(n.code,{children:"search"})," command without arguments to see the full list of packages."]}),"\n",(0,s.jsxs)(n.p,{children:["Installing is then as simple as using the ",(0,s.jsx)(n.code,{children:"install"})," command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"PS D:\\src\\kmpkg> .\\kmpkg install sqlite3\nComputing installation plan...\nThe following packages will be built and installed:\n    sqlite3[core]:x86-windows\nStarting package 1/1: sqlite3:x86-windows\nBuilding package sqlite3[core]:x86-windows...\n-- Downloading https://sqlite.org/2020/sqlite-amalgamation-3320100.zip...\n-- Extracting source C:/src/kmpkg/downloads/sqlite-amalgamation-3320100.zip\n-- Applying patch fix-arm-uwp.patch\n-- Using source at C:/src/kmpkg/buildtrees/sqlite3/src/3320100-15aeda126a.clean\n-- Configuring x86-windows\n-- Building x86-windows-dbg\n-- Building x86-windows-rel\n-- Performing post-build validation\n-- Performing post-build validation done\nBuilding package sqlite3[core]:x86-windows... done\nInstalling package sqlite3[core]:x86-windows...\nInstalling package sqlite3[core]:x86-windows... done\nElapsed time for package sqlite3:x86-windows: 12 s\n\nTotal elapsed time: 12.04 s\n\nThe package sqlite3:x86-windows provides CMake targets:\n\n    find_package(unofficial-sqlite3 CONFIG REQUIRED)\n    target_link_libraries(main PRIVATE unofficial::sqlite3::sqlite3))\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can check that sqlite3 was successfully installed for x86 Windows desktop by running the ",(0,s.jsx)(n.code,{children:"list"})," command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"PS D:\\src\\kmpkg> .\\kmpkg list\nsqlite3:x86-windows         3.32.1           SQLite is a software library that implements a se...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To install for other architectures and platforms such as Universal Windows Platform or x64 Desktop, you can suffix the package name with ",(0,s.jsx)(n.code,{children:":<target>"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"PS D:\\src\\kmpkg> .\\kmpkg install sqlite3:x86-uwp zlib:x64-windows\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.code,{children:".\\kmpkg help triplet"})," for all supported targets."]}),"\n",(0,s.jsx)(n.h2,{id:"use",children:"Step 2: Use"}),"\n",(0,s.jsx)(n.h3,{id:"msbuild",children:"VS/MSBuild Project (User-wide integration)"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:['[!div class="nextstepaction"]\n',(0,s.jsx)(n.a,{href:"/docs/next/kmpkg/users/buildsystems/msbuild-integration",children:"Learn more about using kmpkg from MSBuild"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The recommended and most productive way to use kmpkg is via user-wide integration, making the system available for all projects you build. The user-wide integration will prompt for administrator access the first time it is used on a given machine, but afterwards is no longer required and the integration is configured on a per-user basis."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"PS D:\\src\\kmpkg> .\\kmpkg integrate install\nApplied user-wide integration for this kmpkg root.\n\nAll C++ projects can now #include any installed libraries.\nLinking will be handled automatically.\nInstalling new libraries will make them instantly available.\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"[!NOTE]\nYou will need to restart Visual Studio or perform a Build to update intellisense with the changes."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can now simply use File -> New Project in Visual Studio and the library will be automatically available. For SQLite, you can try out their ",(0,s.jsx)(n.a,{href:"https://sqlite.org/quickstart.html",children:"C/C++ sample"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To remove the integration for your user, you can use ",(0,s.jsx)(n.code,{children:".\\kmpkg integrate remove"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"cmake",children:"CMake (Toolchain File)"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:['[!div class="nextstepaction"]\n',(0,s.jsx)(n.a,{href:"/docs/next/kmpkg/users/buildsystems/cmake-integration",children:"Learn more about using kmpkg from CMake"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The best way to use installed libraries with cmake is via the toolchain file ",(0,s.jsx)(n.code,{children:"scripts\\buildsystems\\kmpkg.cmake"}),". To use this file, you simply need to add it onto your CMake command line as:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"-DCMAKE_TOOLCHAIN_FILE=D:\\src\\kmpkg\\scripts\\buildsystems\\kmpkg.cmake"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you are using CMake through Open Folder with Visual Studio you can define ",(0,s.jsx)(n.code,{children:"CMAKE_TOOLCHAIN_FILE"}),' by adding a "variables" section to each of your ',(0,s.jsx)(n.code,{children:"CMakeSettings.json"})," configurations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "configurations": [{\n    "name": "x86-Debug",\n    "generator": "Visual Studio 15 2017",\n    "configurationType" : "Debug",\n    "buildRoot":  "${env.LOCALAPPDATA}\\\\CMakeBuild\\\\${workspaceHash}\\\\build\\\\${name}",\n    "cmakeCommandArgs": "",\n    "buildCommandArgs": "-m -v:minimal",\n    "variables": [{\n      "name": "CMAKE_TOOLCHAIN_FILE",\n      "value": "D:\\\\src\\\\kmpkg\\\\scripts\\\\buildsystems\\\\kmpkg.cmake"\n    }]\n  }]\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["[!NOTE]\nIt might be necessary to delete the CMake cache folder of each modified configuration, to force a full regeneration. In the ",(0,s.jsx)(n.code,{children:"CMake"})," menu, under ",(0,s.jsx)(n.code,{children:"Cache (<configuration name>)"})," you'll find ",(0,s.jsx)(n.code,{children:"Delete Cache Folders"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now let's make a simple CMake project with a main file."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:"# CMakeLists.txt\ncmake_minimum_required(VERSION 3.0)\nproject(test)\n\nfind_package(unofficial-sqlite3 CONFIG REQUIRED)\n\nadd_executable(main main.cpp)\n\ntarget_link_libraries(main PRIVATE unofficial::sqlite3::sqlite3)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'// main.cpp\n#include <sqlite3.h>\n#include <stdio.h>\n\nint main()\n{\n    printf("%s\\n", sqlite3_libversion());\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then, we build our project in the normal CMake way:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'PS D:\\src\\cmake-test> mkdir build \nPS D:\\src\\cmake-test> cd build\nPS D:\\src\\cmake-test\\build> cmake .. "-DCMAKE_TOOLCHAIN_FILE=D:\\src\\kmpkg\\scripts\\buildsystems\\kmpkg.cmake"\n    // omitted CMake output here //\n-- Build files have been written to: D:/src/cmake-test/build\nPS D:\\src\\cmake-test\\build> cmake --build .\n    // omitted MSBuild output here //\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:02.38\nPS D:\\src\\cmake-test\\build> .\\Debug\\main.exe\n3.15.0\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"[!NOTE]\nThe correct sqlite3.dll is automatically copied to the output folder when building for x86-windows. You will need to distribute this along with your application."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"handling-libraries-without-native-cmake-support",children:"Handling libraries without native cmake support"}),"\n",(0,s.jsxs)(n.p,{children:["Unlike other platforms, we do not automatically add the ",(0,s.jsx)(n.code,{children:"include\\"})," directory to your compilation line by default. If you're using a library that does not provide CMake integration, you will need to explicitly search for the files and add them yourself using ",(0,s.jsx)(n.a,{href:"https://cmake.org/cmake/help/latest/command/find_path.html",children:(0,s.jsx)(n.code,{children:"find_path()"})})," and ",(0,s.jsx)(n.a,{href:"https://cmake.org/cmake/help/latest/command/find_library.html",children:(0,s.jsx)(n.code,{children:"find_library()"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:"# To find and use catch\nfind_path(CATCH_INCLUDE_DIR catch.hpp)\ntarget_include_directories(main PRIVATE ${CATCH_INCLUDE_DIR})\n\n# To find and use azure-storage-cpp\nfind_path(WASTORAGE_INCLUDE_DIR was/blob.h)\nfind_library(WASTORAGE_LIBRARY wastorage)\ntarget_include_directories(main PRIVATE ${WASTORAGE_INCLUDE_DIR})\ntarget_link_libraries(main PRIVATE ${WASTORAGE_LIBRARY})\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(96540);const t={},a=s.createContext(t);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);
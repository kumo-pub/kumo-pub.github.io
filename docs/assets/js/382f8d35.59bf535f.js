"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[30254],{70663:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=i(74848),o=i(28453);const r={},l="Geospatial Operators",s={id:"pollux/functions/presto/geospatial",title:"Geospatial Operators",description:"Bing Tile Functions",source:"@site/versioned_docs/version-1.1.1/pollux/functions/presto/geospatial.mdx",sourceDirName:"pollux/functions/presto",slug:"/pollux/functions/presto/geospatial",permalink:"/docs/pollux/functions/presto/geospatial",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748143706e3,frontMatter:{},sidebar:"docs",previous:{title:"HyperLogLog Functions",permalink:"/docs/pollux/functions/presto/hyperloglog"},next:{title:"Miscellaneous Functions",permalink:"/docs/pollux/functions/presto/misc"}},a={},c=[{value:"Bing Tile Functions",id:"bing-tile-functions",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"geospatial-operators",children:"Geospatial Operators"})}),"\n",(0,t.jsx)(n.h2,{id:"bing-tile-functions",children:"Bing Tile Functions"}),"\n",(0,t.jsxs)(n.p,{children:["Bing tiles are a convenient quad-tree representation of the WGS84 projection of\nEarth's surface.  They can be used to partition geospatial data, perform quick\nproximity or intersection checks, and more.  Each tile is defined by a ",(0,t.jsx)(n.code,{children:"zoom"}),"\nlevel (how far down the quad-tree the tile lives), and an ",(0,t.jsx)(n.code,{children:"x"})," and ",(0,t.jsx)(n.code,{children:"y"})," coordinate\nspecifying where it is in that ",(0,t.jsx)(n.code,{children:"zoom"})," level.  Pollux supports ",(0,t.jsx)(n.code,{children:"zoom"})," levels from\n0 to 23.  For a given zoom level, ",(0,t.jsx)(n.code,{children:"x"})," and ",(0,t.jsx)(n.code,{children:"y"})," must be between 0 and ",(0,t.jsx)(n.code,{children:"2**zoom - 1"})," inclusive.  Lower ",(0,t.jsx)(n.code,{children:"x"})," values are west of higher ",(0,t.jsx)(n.code,{children:"x"})," values, and lower ",(0,t.jsx)(n.code,{children:"y"}),"\nvalues are north of higher ",(0,t.jsx)(n.code,{children:"y"})," values."]}),"\n",(0,t.jsx)(n.p,{children:"Bing tiles can be cast to and from an efficient BIGINT representation. While every\nBing tile can be cast to a valid BIGINT, not every BIGINT is a valid Bing tile, so\ncasting BIGINT to BINGTILE may fail."}),"\n",(0,t.jsx)(n.p,{children:"::\nCAST(CAST(tile AS BIGINT) AS BINGTILE)"}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system",children:"https://learn.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system"}),"\nfor more details."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile(x: integer, y: integer, zoom_level: tinyint) -> tile: BingTile\n\n    Creates a Bing tile object from `x`, `y` coordinates and a `zoom_level`.\n    Zoom levels from 0 to 23 are supported, with valid `x` and `y` coordinates\n    described above.  Invalid parameters will return a User Error.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile(quadKey: varchar) -> tile: BingTile\n\n    Creates a Bing tile object from a quadkey. An invalid quadkey will return a User Error.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile_coordinates(tile: BingTile) -> coords: row(integer,integer)\n\n    Returns the `x`, `y` coordinates of a given Bing tile as `row(x, y)`.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile_zoom_level(tile: BingTile) -> zoom_level: tinyint\n\n    Returns the zoom level of a given Bing tile.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile_parent(tile) -> parent: BingTile\n\n    Returns the parent of the Bing tile at one lower zoom level. Throws an\n    exception if tile is at zoom level 0.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile_parent(tile, parentZoom) -> parent: BingTile\n\n    Returns the parent of the Bing tile at the specified lower zoom level.\n    Throws an exception if parentZoom is less than 0, or parentZoom is greater\n    than the tile\u2019s zoom.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile_children(tile) -> children: array(BingTile)\n\n    Returns the children of the Bing tile at one higher zoom level. Throws an\n    exception if tile is at max zoom level.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile_children(tile, childZoom) -> children: array(BingTile)\n\n    Returns the children of the Bing tile at the specified higher zoom level.\n    Throws an exception if childZoom is greater than the max zoom level, or\n    childZoom is less than the tile\u2019s zoom.  The order is deterministic but not\n    specified.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"    bing_tile_quadkey() -> quadKey: varchar\n\n    Returns the quadkey representing the provided bing tile.\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var t=i(96540);const o={},r=t.createContext(o);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
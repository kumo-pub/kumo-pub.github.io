"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[38870],{94297:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>s,toc:()=>c});var i=a(74848),r=a(28453);const t={},l="\u6570\u636e\u7c7b\u578b",s={id:"cpp/alkaid/datatypes",title:"\u6570\u636e\u7c7b\u578b",description:"\u6570\u636e\u7c7b\u578b API \u53c2\u8003 .",source:"@site/versioned_docs/version-1.1.1/cpp/alkaid/datatypes.mdx",sourceDirName:"cpp/alkaid",slug:"/cpp/alkaid/datatypes",permalink:"/docs/cpp/alkaid/datatypes",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748081772e3,frontMatter:{},sidebar:"docs",previous:{title:"\u6570\u7ec4",permalink:"/docs/cpp/alkaid/arrays"},next:{title:"\u8868\u683c\u6570\u636e",permalink:"/docs/cpp/alkaid/tables"}},d={},c=[{value:"\u521b\u5efa\u6570\u636e\u7c7b\u578b",id:"\u521b\u5efa\u6570\u636e\u7c7b\u578b",level:2},{value:"\u7c7b\u578b\u7279\u5f81",id:"\u7c7b\u578b\u7279\u5f81",level:2},{value:"\u8bbf\u5ba2\u6a21\u5f0f",id:"\u8bbf\u5ba2\u6a21\u5f0f",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\u6570\u636e\u7c7b\u578b",children:"\u6570\u636e\u7c7b\u578b"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"\u6570\u636e\u7c7b\u578b API \u53c2\u8003 <alkaid/core/datatype.h>"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\u6570\u636e\u7c7b\u578b\u63a7\u5236\u7740\u7269\u7406\u6570\u636e\u7684\u89e3\u91ca\u65b9\u5f0f\u3002\u5b83\u4eec\u7684",(0,i.jsx)(n.a,{href:"/docs/cpp/alkaid/format",children:"\u89c4\u8303"}),"\u5141\u8bb8\u4e0d\u540c\u7684\nAlkaid \u5b9e\u73b0\u4e4b\u95f4\u7684\u4e8c\u8fdb\u5236\u4e92\u64cd\u4f5c\u6027\uff0c\u5305\u62ec\u6765\u81ea\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\n\u548c\u8fd0\u884c\u65f6\uff08\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528 ",":py",(0,i.jsx)(n.code,{children:"pyarrow.jvm"}),"\nbridge \u6a21\u5757\u4ece Python \u548c Java \u8bbf\u95ee\u76f8\u540c\u7684\u6570\u636e\uff0c\u800c\u65e0\u9700\u590d\u5236\uff09\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u6709\u5173 C++ \u4e2d\u6570\u636e\u7c7b\u578b\u7684\u4fe1\u606f\u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u65b9\u5f0f\u8868\u793a\uff1a"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(n.code,{children:"alkaid::DataType"})," \u5b9e\u4f8b\uff08\u4f8b\u5982\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\uff09"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(n.code,{children:"alkaid::DataType"})," \u5177\u4f53\u5b50\u7c7b\uff08\u4f8b\u5982\u4f5c\u4e3a\u6a21\u677f\n\u53c2\u6570\uff09"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(n.code,{children:"alkaid::Type::type"})," \u679a\u4e3e\u503c\uff08\u4f8b\u5982\u4f5c\u4e3a switch \u8bed\u53e5\u7684\u6761\u4ef6\uff09"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u7b2c\u4e00\u79cd\u5f62\u5f0f\uff08\u4f7f\u7528 ",(0,i.jsx)(n.code,{children:"alkaid::DataType"})," \u5b9e\u4f8b\uff09\u662f\u6700\u60ef\u7528\u548c\u7075\u6d3b\u7684\u3002\u8fd0\u884c\u65f6\u53c2\u6570\u7c7b\u578b\u53ea\u80fd\u7528 DataType \u5b9e\u4f8b\u5b8c\u5168\u8868\u793a\u3002\u4f8b\u5982\uff0c\u9700\u8981\u5728\u8fd0\u884c\u65f6\u4f7f\u7528"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"alkaid::TimestampType"})," \u6784\u9020\u4e00\u4e2a"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"alkaid::TimeUnit::type"})," \u53c2\u6570\uff1b",(0,i.jsx)(n.code,{children:"alkaid::Decimal128Type"})," \u5e26\u6709"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"scale"})," \u548c ",(0,i.jsx)(n.em,{children:"precision"})," \u53c2\u6570\uff1b",(0,i.jsx)(n.code,{children:"alkaid::ListType"})," \u5e26\u6709\u4e00\u4e2a\u5b8c\u6574\u7684"]}),"\n",(0,i.jsxs)(n.p,{children:["\u5b50\u7c7b\u578b\uff08\u672c\u8eab\u5c31\u662f\u4e00\u4e2a ",(0,i.jsx)(n.code,{children:"alkaid::DataType"})," \u5b9e\u4f8b\uff09\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u6027\u80fd\u81f3\u5173\u91cd\u8981\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u4e24\u79cd\u5f62\u5f0f\uff0c\u4ee5\u907f\u514d\u4ed8\u51fa\u52a8\u6001\u7c7b\u578b\u548c\u591a\u6001\u6027\u7684\u4ee3\u4ef7\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u53c2\u6570\u7c7b\u578b\uff0c\u4ecd\u7136\n\u9700\u8981\u4e00\u5b9a\u7a0b\u5ea6\u7684\u8fd0\u884c\u65f6\u5207\u6362\u3002\u7531\u4e8e Alkaid \u6570\u636e\u7c7b\u578b\u5141\u8bb8\u4efb\u610f\u5d4c\u5957\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u5728\u7f16\u8bd1\u65f6\u5177\u4f53\u5316\u6240\u6709\u53ef\u80fd\u7684\u7c7b\u578b\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"\u521b\u5efa\u6570\u636e\u7c7b\u578b",children:"\u521b\u5efa\u6570\u636e\u7c7b\u578b"}),"\n",(0,i.jsxs)(n.p,{children:["\u8981\u5b9e\u4f8b\u5316\u6570\u636e\u7c7b\u578b\uff0c\u5efa\u8bae\u8c03\u7528\u63d0\u4f9b\u7684\n",(0,i.jsx)(n.code,{children:"factory functions <api-type-factories>"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    std::shared_ptr<alkaid::DataType> type;\n\n    // A 16-bit integer type\n    type = alkaid::int16();\n    // A 64-bit timestamp type (with microsecond granularity)\n    type = alkaid::timestamp(alkaid::TimeUnit::MICRO);\n    // A list type of single-precision floating-point values\n    type = alkaid::list(alkaid::float32());\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u7c7b\u578b\u7279\u5f81",children:"\u7c7b\u578b\u7279\u5f81"}),"\n",(0,i.jsxs)(n.p,{children:["\u5982\u679c\u6ca1\u6709\u7c7b\u578b\u7279\u5f81\uff0c\u7f16\u5199\u80fd\u591f\u5904\u7406\u5177\u4f53 ",(0,i.jsx)(n.code,{children:"alkaid::DataType"})," \u5b50\u7c7b\u7684\u4ee3\u7801\u5c06\u4f1a\u975e\u5e38\u5197\u957f\u3002Alkaid \u7684\u7c7b\u578b\u7279\u5f81\u5c06 Alkaid \u6570\n\u636e\u7c7b\u578b\u6620\u5c04\u5230\u4e13\u95e8\u7684\u6570\u7ec4\u3001\u6807\u91cf\u3001\u6784\u5efa\u5668\u548c\u5176\u4ed6\u76f8\u5173\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5e03\u5c14\u7c7b\u578b\u5177\u6709\u4ee5\u4e0b\u7279\u5f81\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sourceCode",children:"template <>\nstruct TypeTraits<BooleanType> {\n  using ArrayType = BooleanArray;\n  using BuilderType = BooleanBuilder;\n  using ScalarType = BooleanScalar;\n  using CType = bool;\n\n  static constexpr int64_t bytes_required(int64_t elements) {\n    return bit_util::BytesForBits(elements);\n  }\n  constexpr static bool is_parameter_free = true;\n  static inline std::shared_ptr<DataType> type_singleton() { return boolean(); }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u8bf7\u53c2\u9605",(0,i.jsx)(n.code,{children:"\u7c7b\u578b\u7279\u5f81"}),"\u4ee5\u4e86\u89e3\u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u4f7f\u7528\u7c7b\u578b\u7279\u5f81\uff0c\u53ef\u4ee5\u7f16\u5199\u80fd\u591f\u5904\u7406\u5404\u79cd Alkaid \u7c7b\u578b\u7684\u6a21\u677f\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u8981\u7f16\u5199\u4e00\u4e2a\u4e3a\u4efb\u4f55 Alkaid \u6570\u5b57\u7c7b\u578b\u521b\u5efa\u6590\u6ce2\u90a3\u5951\u503c\u6570\u7ec4\u7684\u51fd\u6570\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sourceCode",children:"template <typename DataType,\n          typename BuilderType = typename alkaid::TypeTraits<DataType>::BuilderType,\n          typename ArrayType = typename alkaid::TypeTraits<DataType>::ArrayType,\n          typename CType = typename alkaid::TypeTraits<DataType>::CType>\nalkaid::Result<std::shared_ptr<ArrayType>> MakeFibonacci(int32_t n) {\n  BuilderType builder;\n  CType val = 0;\n  CType next_val = 1;\n  for (int32_t i = 0; i < n; ++i) {\n    builder.Append(val);\n    CType temp = val + next_val;\n    val = next_val;\n    next_val = temp;\n  }\n  std::shared_ptr<ArrayType> out;\n  ARROW_RETURN_NOT_OK(builder.Finish(&out));\n  return out;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u5bf9\u4e8e\u4e00\u4e9b\u5e38\u89c1\u60c5\u51b5\uff0c\u7c7b\u672c\u8eab\u5b58\u5728\u7c7b\u578b\u5173\u8054\u3002\u4f7f\u7528\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Scalar::TypeClass"})," \u83b7\u53d6\u6807\u91cf\u7684\u6570\u636e\u7c7b\u578b\u7c7b"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Array::TypeClass"})," \u83b7\u53d6\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b\u7c7b"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DataType::c_type"})," \u83b7\u53d6 Alkaid \u6570\u636e\u7c7b\u578b\u7684\u5173\u8054 C \u7c7b\u578b"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u4e0e\n",(0,i.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/header/type_traits",children:"std::type_traits"})," \u4e2d\u63d0\u4f9b\u7684\u7c7b\u578b\u7279\u5f81\u7c7b\u4f3c\uff0c\nAlkaid \u63d0\u4f9b\u7c7b\u578b\u8c13\u8bcd\uff08\u4f8b\u5982 ",(0,i.jsx)(n.code,{children:"is_number_type"}),"\uff09\u4ee5\u53ca\u5305\u88c5 ",(0,i.jsx)(n.code,{children:"std::enable_if_t"})," \u7684\u76f8\u5e94\u6a21\u677f\uff08\u4f8b\u5982 ",(0,i.jsx)(n.code,{children:"enable_if_number"}),"\uff09\u3002\n\u8fd9\u4e9b\u53ef\u4ee5\u9650\u5236\u6a21\u677f\u51fd\u6570\u4ec5\u9488\u5bf9\u76f8\u5173\u7c7b\u578b\u8fdb\u884c\u7f16\u8bd1\uff0c\u5982\u679c\u9700\u8981\u5b9e\u73b0\u5176\u4ed6\u91cd\u8f7d\uff0c\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff0c\u8981\u4e3a\u4efb\u4f55\u6570\u5b57\uff08\u6574\u6570\u6216\u6d6e\u70b9\uff09\u6570\u7ec4\u7f16\u5199\u6c42\u548c\u51fd\u6570\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sourceCode",children:"template <typename ArrayType, typename DataType = typename ArrayType::TypeClass,\n          typename CType = typename DataType::c_type>\nalkaid::enable_if_number<DataType, CType> SumArray(const ArrayType& array) {\n  CType sum = 0;\n  for (std::optional<CType> value : array) {\n    if (value.has_value()) {\n      sum += value.value();\n    }\n  }\n  return sum;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.code,{children:"type-predicates-api"})," for a list of these."]}),"\n",(0,i.jsx)(n.h2,{id:"\u8bbf\u5ba2\u6a21\u5f0f",children:"\u8bbf\u5ba2\u6a21\u5f0f"}),"\n",(0,i.jsxs)(n.p,{children:["\u4e3a\u4e86\u5904\u7406 ",(0,i.jsx)(n.code,{children:"alkaid::DataType"}),"\u3001",(0,i.jsx)(n.code,{children:"alkaid::Scalar"})," \u6216\n",(0,i.jsx)(n.code,{children:"alkaid::Array"}),"\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u7f16\u5199\u57fa\u4e8e\u7279\u5b9a Alkaid \u7c7b\u578b\u7684\u4e13\u95e8\u903b\u8f91\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8bf7\u4f7f\u7528 ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Visitor_pattern",children:"visitor\npattern"}),"\u3002Alkaid \u63d0\u4f9b\n\u6a21\u677f\u51fd\u6570\uff1a"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"alkaid::VisitTypeInline"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"alkaid::VisitScalarInline"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"alkaid::VisitArrayInline"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u8981\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u8bf7\u4e3a\u6bcf\u79cd\u4e13\u95e8\u7c7b\u578b\u5b9e\u73b0 ",(0,i.jsx)(n.code,{children:"Status Visit()"})," \u65b9\u6cd5\uff0c\u7136\u540e\u5c06\u7c7b\u5b9e\u4f8b\u4f20\u9012\u7ed9\u5185\u8054\u8bbf\u95ee\u51fd\u6570\u3002\u4e3a\u907f\u514d\u91cd\u590d\u4ee3\n\u7801\uff0c\u8bf7\u4f7f\u7528\u4e0a\u4e00\u8282\u4e2d\u8bb0\u5f55\u7684\u7c7b\u578b\u7279\u5f81\u3002\u4f5c\u4e3a\u4e00\u4e2a\u7b80\u77ed\u7684\u793a\u4f8b\uff0c\u4ee5\u4e0b\u662f\u5982\u4f55\u5bf9\u4efb\u610f\u6570\u5b57\u7c7b\u578b\u7684\u5217\u8fdb\u884c\u6c42\u548c\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sourceCode",children:'class TableSummation {\n  double partial = 0.0;\n public:\n\n  alkaid::Result<double> Compute(std::shared_ptr<alkaid::RecordBatch> batch) {\n    for (std::shared_ptr<alkaid::Array> array : batch->columns()) {\n      ARROW_RETURN_NOT_OK(alkaid::VisitArrayInline(*array, this));\n    }\n    return partial;\n  }\n\n  // Default implementation\n  alkaid::Status Visit(const alkaid::Array& array) {\n    return alkaid::Status::NotImplemented("Cannot compute sum for array of type ",\n                                         array.type()->ToString());\n  }\n\n  template <typename ArrayType, typename T = typename ArrayType::TypeClass>\n  alkaid::enable_if_number<T, alkaid::Status> Visit(const ArrayType& array) {\n    for (std::optional<typename T::c_type> value : array) {\n      if (value.has_value()) {\n        partial += static_cast<double>(value.value());\n      }\n    }\n    return alkaid::Status::OK();\n  }\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Alkaid \u8fd8\u63d0\u4f9b\u4e86\u62bd\u8c61\u8bbf\u95ee\u8005\u7c7b\uff08",(0,i.jsx)(n.code,{children:"alkaid::TypeVisitor"}),"\u3001",(0,i.jsx)(n.code,{children:"alkaid::ScalarVisitor"}),"\u3001",(0,i.jsx)(n.code,{children:"alkaid::ArrayVisitor"}),"\uff09\u4ee5\u53ca\u6bcf\u4e2a\u76f8\u5e94\n\u57fa\u7c7b\u578b\uff08\u4f8b\u5982",(0,i.jsx)(n.code,{children:"alkaid::Array::accept"}),"\uff09\u4e0a\u7684",(0,i.jsx)(n.code,{children:"accept()"}),"\u65b9\u6cd5\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u65e0\u6cd5\u4f7f\u7528\u6a21\u677f\u51fd\u6570\u5b9e\u73b0\uff0c\u56e0\u6b64\u60a8\u901a\u5e38\u66f4\u559c\u6b22\u4f7f\u7528\u5185\u8054\n\u7c7b\u578b\u8bbf\u95ee\u8005\u3002"]})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>s});var i=a(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);
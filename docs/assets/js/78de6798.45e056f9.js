"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[65505],{11089:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>c,toc:()=>a});var i=s(74848),r=s(28453);const d={},t="Date and Time Functions and Operators",c={id:"pollux/functions/presto/datetime",title:"Date and Time Functions and Operators",description:"Date and Time Operators",source:"@site/versioned_docs/version-1.1.1/pollux/functions/presto/datetime.mdx",sourceDirName:"pollux/functions/presto",slug:"/pollux/functions/presto/datetime",permalink:"/docs/pollux/functions/presto/datetime",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748143706e3,frontMatter:{},sidebar:"docs",previous:{title:"Decimal Operators",permalink:"/docs/pollux/functions/presto/decimal"},next:{title:"\u5f00\u53d1\u6587\u6863",permalink:"/docs/category/\u5f00\u53d1\u6587\u6863"}},o={},a=[{value:"Date and Time Operators",id:"date-and-time-operators",level:2},{value:"Date and Time Functions",id:"date-and-time-functions",level:2},{value:"Truncation Function",id:"truncation-function",level:2},{value:"Interval Functions",id:"interval-functions",level:2},{value:"Duration Function",id:"duration-function",level:2},{value:"MySQL Date Functions",id:"mysql-date-functions",level:2},{value:"Java Date Functions",id:"java-date-functions",level:2},{value:"Convenience Extraction Functions",id:"convenience-extraction-functions",level:2},{value:"Time Zones",id:"time-zones",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"date-and-time-functions-and-operators",children:"Date and Time Functions and Operators"})}),"\n",(0,i.jsx)(n.h2,{id:"date-and-time-operators",children:"Date and Time Operators"}),"\n",(0,i.jsx)(n.p,{children:".. list-table::\n:widths: 15 60 25\n:header-rows: 1"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Operator"}),"\n",(0,i.jsx)(n.li,{children:"Example"}),"\n",(0,i.jsx)(n.li,{children:"Result"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"+"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"interval '1' second + interval '1' hour"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 01:00:01.000"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"+"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"timestamp '1970-01-01 00:00:00.000' + interval '1' second"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1970-01-01 00:00:01.000"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"-"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"interval '1' hour - interval '1' second"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 00:59:59.000"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"-"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"timestamp '1970-01-01 00:00:00.000' - interval '1' second"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1969-12-31 23:59:59.000"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"*"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"interval '1' second * 2"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 00:00:02.000"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"*"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"2 * interval '1' second"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 00:00:02.000"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"*"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"interval '1' second * 0.001"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 00:00:00.001"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"*"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0.001 * interval '1' second"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 00:00:00.001"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"/"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"interval '15' second / 1.5"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 00:00:10.000"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    plus(x, y) -> [same as x]\n\n    Returns the sum of ``x`` and ``y``. Both ``x`` and ``y`` are intervals day\n    to second or one of them can be timestamp. For addition of two intervals day to\n    second, returns ``-106751991167 07:12:55.808`` when the addition overflows\n    in positive and returns ``106751991167 07:12:55.807`` when the addition\n    overflows in negative. When addition of a timestamp with an interval day to\n    second, overflowed results are wrapped around.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    minus(x, y) -> [same as x]\n\n    Returns the result of subtracting ``y`` from ``x``. Both ``x`` and ``y``\n    are intervals day to second or ``x`` can be timestamp. For subtraction of\n    two intervals day to second, returns ``-106751991167 07:12:55.808`` when\n    the subtraction overflows in positive and returns ``106751991167 07:12:55.807``\n    when the subtraction overflows in negative. For subtraction of an interval\n    day to second from a timestamp, overflowed results are wrapped around.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    multiply(interval day to second, x) -> interval day to second\n\n    Returns the result of multiplying ``interval day to second`` by ``x``.\n    ``x`` can be a bigint or double. Returns ``0`` when ``x`` is NaN. Returns\n    ``106751991167 07:12:55.807`` when ``x`` is infinity or when the\n    multiplication overflow in positive. Returns ``-106751991167 07:12:55.808``\n    when ``x`` is -infinity or when the multiplication overflow in negiative.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    multiply(x, interval day to second) -> interval day to second\n\n    Returns the result of multiplying ``x`` by ``interval day to second``.\n    Same as ``multiply(interval day to second, x)``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    divide(interval day to second, x) -> interval day to second\n\n    Returns the result of ``interval day to second`` divided by ``x``. ``x`` is\n    a double. Returns ``0`` when ``x`` is NaN or is infinity. Returns\n    ``106751991167 07:12:55.807`` when ``x`` is ``0.0`` and\n    ``interval day to second`` is not ``0``, or when the division overflows in\n    positive. Returns ``-106751991167 07:12:55.808`` when ``x`` is ``-0.0`` and\n    ``interval day to second`` is not ``0``, or when the division overflows in\n    negiative.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"date-and-time-functions",children:"Date and Time Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    current_date() -> date\n\n    Returns the current date.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    date(x) -> date\n\n    This is an alias for ``CAST(x AS date)``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    from_iso8601_date(string) -> date\n\n    Parses the ISO 8601 formatted ``string`` into a ``date``.\n\n    Accepts formats described by the following syntax::\n\n       date = yyyy ['-' MM ['-' dd]]\n\n    Examples of valid input strings:\n\n    * '2012'\n    * '2012-4'\n    * '2012-04'\n    * '2012-4-7'\n    * '2012-04-07'\n    * '2012-04-07   '\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    from_iso8601_timestamp(string) -> timestamp with time zone\n\n    Parses the ISO 8601 formatted string into a timestamp with time zone.\n\n    Accepts formats described by the following syntax::\n\n        datetime          = time | date-opt-time\n        time              = 'T' time-element [offset]\n        date-opt-time     = date-element ['T' [time-element] [offset]]\n        date-element      = yyyy ['-' MM ['-' dd]]\n        time-element      = HH [minute-element] | [fraction]\n        minute-element    = ':' mm [second-element] | [fraction]\n        second-element    = ':' ss [fraction]\n        fraction          = ('.' | ',') digit+\n        offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])\n\n    Examples of valid input strings:\n\n    * '2012'\n    * '2012-4'\n    * '2012-04'\n    * '2012-4-7'\n    * '2012-04-07'\n    * '2012-04-07   '\n    * '2012-04T01:02'\n    * 'T01:02:34'\n    * 'T01:02:34,123'\n    * '2012-04-07T01:02:34'\n    * '2012-04-07T01:02:34.123'\n    * '2012-04-07T01:02:34,123'\n    * '2012-04-07T01:02:34.123Z'\n    * '2012-04-07T01:02:34.123-05:00'\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    from_unixtime(unixtime) -> timestamp\n\n    Returns the UNIX timestamp ``unixtime`` as a timestamp.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    from_unixtime(unixtime, string) -> timestamp with time zone\n    :noindex:\n\n    Returns the UNIX timestamp ``unixtime`` as a timestamp with time zone\n    using ``string`` for the time zone.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    from_unixtime(unixtime, hours, minutes) -> timestamp with time zone\n\n    Returns the UNIX timestamp ``unixtime`` as a timestamp with time zone\n    using ``hours`` and ``minutes`` for the time zone offset.\n    The offset must be in [-14:00, 14:00] range.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    to_iso8601(x) -> varchar\n\n    Formats ``x`` as an ISO 8601 string. Supported types for ``x`` are:\n    DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE.\n\n    Example results::\n\n        SELECT to_iso8601(current_date); -- 2024-06-06\n        SELECT to_iso8601(now()); -- 2024-06-06T20:25:46.726-07:00\n        SELECT to_iso8601(now() + interval '6' month); -- 2024-12-06T20:27:11.992-08:00\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    to_milliseconds(interval) -> bigint\n\n    Returns the day-to-second ``interval`` as milliseconds.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    to_unixtime(timestamp) -> double\n\n    Returns ``timestamp`` as a UNIX timestamp.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"truncation-function",children:"Truncation Function"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"date_trunc"})," function supports the following units:"]}),"\n",(0,i.jsxs)(n.p,{children:["=========== ===========================\nUnit        Example Truncated Value\n=========== ===========================\n",(0,i.jsx)(n.code,{children:"second"}),"  ",(0,i.jsx)(n.code,{children:"2001-08-22 03:04:05.000"}),"\n",(0,i.jsx)(n.code,{children:"minute"}),"  ",(0,i.jsx)(n.code,{children:"2001-08-22 03:04:00.000"}),"\n",(0,i.jsx)(n.code,{children:"hour"}),"    ",(0,i.jsx)(n.code,{children:"2001-08-22 03:00:00.000"}),"\n",(0,i.jsx)(n.code,{children:"day"}),"     ",(0,i.jsx)(n.code,{children:"2001-08-22 00:00:00.000"}),"\n",(0,i.jsx)(n.code,{children:"week"}),"    ",(0,i.jsx)(n.code,{children:"2001-08-20 00:00:00.000"}),"\n",(0,i.jsx)(n.code,{children:"month"}),"   ",(0,i.jsx)(n.code,{children:"2001-08-01 00:00:00.000"}),"\n",(0,i.jsx)(n.code,{children:"quarter"})," ",(0,i.jsx)(n.code,{children:"2001-07-01 00:00:00.000"}),"\n",(0,i.jsx)(n.code,{children:"year"}),"    ",(0,i.jsx)(n.code,{children:"2001-01-01 00:00:00.000"}),"\n=========== ==========================="]}),"\n",(0,i.jsxs)(n.p,{children:["The above examples use the timestamp ",(0,i.jsx)(n.code,{children:"2001-08-22 03:04:05.321"})," as the input."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    date_trunc(unit, x) -> x\n\n    Returns ``x`` truncated to ``unit``. The supported types for ``x`` are TIMESTAMP, DATE, and TIMESTAMP WITH TIME ZONE.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interval-functions",children:"Interval Functions"}),"\n",(0,i.jsx)(n.p,{children:"The functions in this section support the following interval units:"}),"\n",(0,i.jsxs)(n.p,{children:["=============== =======================\nUnit            Description\n=============== =======================\n",(0,i.jsx)(n.code,{children:"millisecond"})," ",(0,i.jsx)(n.code,{children:"Milliseconds"}),"\n",(0,i.jsx)(n.code,{children:"second"}),"      ",(0,i.jsx)(n.code,{children:"Seconds"}),"\n",(0,i.jsx)(n.code,{children:"minute"}),"      ",(0,i.jsx)(n.code,{children:"Minutes"}),"\n",(0,i.jsx)(n.code,{children:"hour"}),"        ",(0,i.jsx)(n.code,{children:"Hours"}),"\n",(0,i.jsx)(n.code,{children:"day"}),"         ",(0,i.jsx)(n.code,{children:"Days"}),"\n",(0,i.jsx)(n.code,{children:"week"}),"        ",(0,i.jsx)(n.code,{children:"Weeks"}),"\n",(0,i.jsx)(n.code,{children:"month"}),"       ",(0,i.jsx)(n.code,{children:"Months"}),"\n",(0,i.jsx)(n.code,{children:"quarter"}),"     ",(0,i.jsx)(n.code,{children:"Quarters of a year"}),"\n",(0,i.jsx)(n.code,{children:"year"}),"        ",(0,i.jsx)(n.code,{children:"Years"}),"\n=============== ======================="]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    date_add(unit, value, x) -> x\n\n    Adds an interval ``value`` of type ``unit`` to ``x``. The supported types for ``x`` are TIMESTAMP, DATE, and TIMESTAMP WITH TIME ZONE.\n    Subtraction can be performed by using a negative value.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    date_diff(unit, x1, x2) -> bigint\n\n    Returns ``x2 - x1`` in terms of ``unit``. The supported types for ``x`` are TIMESTAMP and DATE.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"duration-function",children:"Duration Function"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parse_duration"})," function supports the following units:"]}),"\n",(0,i.jsxs)(n.p,{children:["======= =============\nUnit    Description\n======= =============\n",(0,i.jsx)(n.code,{children:"ns"}),"  Nanoseconds\n",(0,i.jsx)(n.code,{children:"us"}),"  Microseconds\n",(0,i.jsx)(n.code,{children:"ms"}),"  Milliseconds\n",(0,i.jsx)(n.code,{children:"s"}),"   Seconds\n",(0,i.jsx)(n.code,{children:"m"}),"   Minutes\n",(0,i.jsx)(n.code,{children:"h"}),"   Hours\n",(0,i.jsx)(n.code,{children:"d"}),"   Days\n======= ============="]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    parse_duration(string) -> interval\n\n    Parses ``string`` of format ``value unit`` into an interval, where\n    ``value`` is fractional number of ``unit`` values::\n\n        SELECT parse_duration('42.8ms'); -- 0 00:00:00.043\n        SELECT parse_duration('3.81 d'); -- 3 19:26:24.000\n        SELECT parse_duration('5m');     -- 0 00:05:00.000\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mysql-date-functions",children:"MySQL Date Functions"}),"\n",(0,i.jsxs)(n.p,{children:["The functions in this section use a format string that is compatible with\nthe MySQL ",(0,i.jsx)(n.code,{children:"date_parse"})," and ",(0,i.jsx)(n.code,{children:"str_to_date"})," functions.\nThe following table, based on the MySQL manual, describes the format specifiers:"]}),"\n",(0,i.jsxs)(n.p,{children:["========= =============================================================================================================================\nSpecifier Description\n========= =============================================================================================================================\n",(0,i.jsx)(n.code,{children:"%a"}),"    Abbreviated weekday name (",(0,i.jsx)(n.code,{children:"Sun"})," ... ",(0,i.jsx)(n.code,{children:"Sat"}),")\n",(0,i.jsx)(n.code,{children:"%b"}),"    Abbreviated month name (",(0,i.jsx)(n.code,{children:"Jan"})," ... ",(0,i.jsx)(n.code,{children:"Dec"}),")\n",(0,i.jsx)(n.code,{children:"%c"}),"    Month, numeric (",(0,i.jsx)(n.code,{children:"1"})," ... ",(0,i.jsx)(n.code,{children:"12"}),") [4]_\n",(0,i.jsx)(n.code,{children:"%D"}),"    Day of the month with English suffix (",(0,i.jsx)(n.code,{children:"0th"}),", ",(0,i.jsx)(n.code,{children:"1st"}),", ",(0,i.jsx)(n.code,{children:"2nd"}),", ",(0,i.jsx)(n.code,{children:"3rd"}),", ...)\n",(0,i.jsx)(n.code,{children:"%d"}),"    Day of the month, numeric (",(0,i.jsx)(n.code,{children:"01"})," ... ",(0,i.jsx)(n.code,{children:"31"}),") [4]_\n",(0,i.jsx)(n.code,{children:"%e"}),"    Day of the month, numeric (",(0,i.jsx)(n.code,{children:"1"})," ... ",(0,i.jsx)(n.code,{children:"31"}),") [4]_\n",(0,i.jsx)(n.code,{children:"%f"}),"    Fraction of second (6 digits for printing: ",(0,i.jsx)(n.code,{children:"000000"})," ... ",(0,i.jsx)(n.code,{children:"999000"}),"; 1 - 9 digits for parsing: ",(0,i.jsx)(n.code,{children:"0"})," ... ",(0,i.jsx)(n.code,{children:"999999999"}),") [1]_\n",(0,i.jsx)(n.code,{children:"%H"}),"    Hour (",(0,i.jsx)(n.code,{children:"00"})," ... ",(0,i.jsx)(n.code,{children:"23"}),")\n",(0,i.jsx)(n.code,{children:"%h"}),"    Hour (",(0,i.jsx)(n.code,{children:"01"})," ... ",(0,i.jsx)(n.code,{children:"12"}),")\n",(0,i.jsx)(n.code,{children:"%I"}),"    Hour (",(0,i.jsx)(n.code,{children:"01"})," ... ",(0,i.jsx)(n.code,{children:"12"}),")\n",(0,i.jsx)(n.code,{children:"%i"}),"    Minutes, numeric (",(0,i.jsx)(n.code,{children:"00"})," ... ",(0,i.jsx)(n.code,{children:"59"}),")\n",(0,i.jsx)(n.code,{children:"%j"}),"    Day of year (",(0,i.jsx)(n.code,{children:"001"})," ... ",(0,i.jsx)(n.code,{children:"366"}),")\n",(0,i.jsx)(n.code,{children:"%k"}),"    Hour (",(0,i.jsx)(n.code,{children:"0"})," ... ",(0,i.jsx)(n.code,{children:"23"}),")\n",(0,i.jsx)(n.code,{children:"%l"}),"    Hour (",(0,i.jsx)(n.code,{children:"1"})," ... ",(0,i.jsx)(n.code,{children:"12"}),")\n",(0,i.jsx)(n.code,{children:"%M"}),"    Month name (",(0,i.jsx)(n.code,{children:"January"})," ... ",(0,i.jsx)(n.code,{children:"December"}),")\n",(0,i.jsx)(n.code,{children:"%m"}),"    Month, numeric (",(0,i.jsx)(n.code,{children:"01"})," ... ",(0,i.jsx)(n.code,{children:"12"}),") [4]_\n",(0,i.jsx)(n.code,{children:"%p"}),"    ",(0,i.jsx)(n.code,{children:"AM"})," or ",(0,i.jsx)(n.code,{children:"PM"}),"\n",(0,i.jsx)(n.code,{children:"%r"}),"    Time, 12-hour (",(0,i.jsx)(n.code,{children:"hh:mm:ss"})," followed by ",(0,i.jsx)(n.code,{children:"AM"})," or ",(0,i.jsx)(n.code,{children:"PM"}),")\n",(0,i.jsx)(n.code,{children:"%S"}),"    Seconds (",(0,i.jsx)(n.code,{children:"00"})," ... ",(0,i.jsx)(n.code,{children:"59"}),")\n",(0,i.jsx)(n.code,{children:"%s"}),"    Seconds (",(0,i.jsx)(n.code,{children:"00"})," ... ",(0,i.jsx)(n.code,{children:"59"}),")\n",(0,i.jsx)(n.code,{children:"%T"}),"    Time, 24-hour (",(0,i.jsx)(n.code,{children:"hh:mm:ss"}),")\n",(0,i.jsx)(n.code,{children:"%U"}),"    Week (",(0,i.jsx)(n.code,{children:"00"})," ... ",(0,i.jsx)(n.code,{children:"53"}),"), where Sunday is the first day of the week\n",(0,i.jsx)(n.code,{children:"%u"}),"    Week (",(0,i.jsx)(n.code,{children:"00"})," ... ",(0,i.jsx)(n.code,{children:"53"}),"), where Monday is the first day of the week\n",(0,i.jsx)(n.code,{children:"%V"}),"    Week (",(0,i.jsx)(n.code,{children:"01"})," ... ",(0,i.jsx)(n.code,{children:"53"}),"), where Sunday is the first day of the week; used with ",(0,i.jsx)(n.code,{children:"%X"}),"\n",(0,i.jsx)(n.code,{children:"%v"}),"    Week (",(0,i.jsx)(n.code,{children:"01"})," ... ",(0,i.jsx)(n.code,{children:"53"}),"), where Monday is the first day of the week; used with ",(0,i.jsx)(n.code,{children:"%x"}),"\n",(0,i.jsx)(n.code,{children:"%W"}),"    Weekday name (",(0,i.jsx)(n.code,{children:"Sunday"})," ... ",(0,i.jsx)(n.code,{children:"Saturday"}),")\n",(0,i.jsx)(n.code,{children:"%w"}),"    Day of the week (",(0,i.jsx)(n.code,{children:"0"})," ... ",(0,i.jsx)(n.code,{children:"6"}),"), where Sunday is the first day of the week [3]_\n",(0,i.jsx)(n.code,{children:"%X"}),"    Year for the week where Sunday is the first day of the week, numeric, four digits; used with ",(0,i.jsx)(n.code,{children:"%V"}),"\n",(0,i.jsx)(n.code,{children:"%x"}),"    Year for the week, where Monday is the first day of the week, numeric, four digits; used with ",(0,i.jsx)(n.code,{children:"%v"}),"\n",(0,i.jsx)(n.code,{children:"%Y"}),"    Year, numeric, four digits\n",(0,i.jsx)(n.code,{children:"%y"}),"    Year, numeric (two digits) [2]_\n",(0,i.jsx)(n.code,{children:"%%"}),"    A literal ",(0,i.jsx)(n.code,{children:"%"})," character\n",(0,i.jsx)(n.code,{children:"%x"}),"    ",(0,i.jsx)(n.code,{children:"x"}),", for any ",(0,i.jsx)(n.code,{children:"x"})," not listed above\n========= ============================================================================================================================="]}),"\n",(0,i.jsx)(n.p,{children:".. [1] Timestamp is truncated to milliseconds."}),"\n",(0,i.jsxs)(n.p,{children:[".. [2] When parsing, two-digit year format assumes range ",(0,i.jsx)(n.code,{children:"1970"})," ... ",(0,i.jsx)(n.code,{children:"2069"}),", so \u201c70\u201d will result in year ",(0,i.jsx)(n.code,{children:"1970"})," but \u201c69\u201d will produce ",(0,i.jsx)(n.code,{children:"2069"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[".. [3] This specifier is not supported yet. Consider using :func:",(0,i.jsx)(n.code,{children:"day_of_week"})," (it uses ",(0,i.jsx)(n.code,{children:"1-7"})," instead of ",(0,i.jsx)(n.code,{children:"0-6"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:[".. [4] This specifier does not support ",(0,i.jsx)(n.code,{children:"0"})," as a month or day."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Warning"}),": The following specifiers are not currently supported: ",(0,i.jsx)(n.code,{children:"%D"}),", ",(0,i.jsx)(n.code,{children:"%U"}),", ",(0,i.jsx)(n.code,{children:"%u"}),", ",(0,i.jsx)(n.code,{children:"%V"}),", ",(0,i.jsx)(n.code,{children:"%w"}),", ",(0,i.jsx)(n.code,{children:"%X"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    date_format(x, format) -> varchar\n\n    Formats ``x`` as a string using ``format``. ``x`` is a timestamp or a timestamp with time zone.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"java-date-functions",children:"Java Date Functions"}),"\n",(0,i.jsxs)(n.p,{children:["The functions in this section leverage a native cpp implementation that follows\na format string compatible with JodaTime\u2019s ",(0,i.jsx)(n.a,{href:"http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html",children:"DateTimeFormat"}),"\npattern format. The symbols currently supported are ",(0,i.jsx)(n.code,{children:"y"}),", ",(0,i.jsx)(n.code,{children:"Y"}),", ",(0,i.jsx)(n.code,{children:"M"})," , ",(0,i.jsx)(n.code,{children:"d"}),",\n",(0,i.jsx)(n.code,{children:"H"}),", ",(0,i.jsx)(n.code,{children:"m"}),", ",(0,i.jsx)(n.code,{children:"s"}),", ",(0,i.jsx)(n.code,{children:"S"}),", ",(0,i.jsx)(n.code,{children:"z"})," and ",(0,i.jsx)(n.code,{children:"Z"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"z"})," represents a timezone name (3-letter format), and ",(0,i.jsx)(n.code,{children:"Z"})," a timezone offset\nspecified using the format ",(0,i.jsx)(n.code,{children:"+00"}),", ",(0,i.jsx)(n.code,{children:"+00:00"})," or ",(0,i.jsx)(n.code,{children:"+0000"})," (or ",(0,i.jsx)(n.code,{children:"-"}),"). ",(0,i.jsx)(n.code,{children:"Z"}),"\nalso accepts ",(0,i.jsx)(n.code,{children:"UTC"}),",  ",(0,i.jsx)(n.code,{children:"UCT"}),", ",(0,i.jsx)(n.code,{children:"GMT"}),", and ",(0,i.jsx)(n.code,{children:"GMT0"})," as valid representations\nof GMT."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    format_datetime(timestamp, format) -> varchar\n\n    Formats ``timestamp`` as a string using ``format``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    parse_datetime(string, format) -> timestamp with time zone\n\n    Parses string into a timestamp with time zone using ``format``.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"convenience-extraction-functions",children:"Convenience Extraction Functions"}),"\n",(0,i.jsx)(n.p,{children:"These functions support TIMESTAMP, DATE, and TIMESTAMP WITH TIME ZONE input types."}),"\n",(0,i.jsx)(n.p,{children:"For these functions, the input timestamp has range limitations on seconds and nanoseconds.\nSeconds should be in the range [INT64_MIN/1000 - 1, INT64_MAX/1000], nanoseconds should\nbe in the range [0, 999999999]. This behavior is different from Presto Java that allows\narbitrary large timestamps."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    day(x) -> bigint\n\n    Returns the day of the month from ``x``.\n\n    The supported types for ``x`` are DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, INTERVAL DAY TO SECOND.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    day_of_month(x) -> bigint\n\n    This is an alias for :func:`day`.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    day_of_week(x) -> bigint\n\n    Returns the ISO day of the week from ``x``.\n    The value ranges from ``1`` (Monday) to ``7`` (Sunday).\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    day_of_year(x) -> bigint\n\n    Returns the day of the year from ``x``.\n    The value ranges from ``1`` to ``366``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    dow(x) -> bigint\n\n    This is an alias for :func:`day_of_week`.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    doy(x) -> bigint\n\n    This is an alias for :func:`day_of_year`.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    hour(x) -> bigint\n\n    Returns the hour of the day from ``x``. The value ranges from 0 to 23.\n    Supported types for ``x`` are: DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE,\n    INTERVAL DAY TO SECOND\xb6.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    last_day_of_month(x) -> date\n\n    Returns the last day of the month.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    millisecond(x) -> int64\n\n    Returns the millisecond of the second from ``x``. Supported types for ``x`` are:\n    DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, INTERVAL DAY TO SECOND\xb6.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    minute(x) -> bigint\n\n    Returns the minute of the hour from ``x``. Supported types for ``x`` are:\n    DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, INTERVAL DAY TO SECOND\xb6.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    month(x) -> bigint\n\n    Returns the month of the year from ``x``. Supported types for ``x`` are:\n    DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, INTERVAL YEAR TO MONTH.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    quarter(x) -> bigint\n\n    Returns the quarter of the year from ``x``. The value ranges from ``1`` to ``4``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    second(x) -> bigint\n\n    Returns the second of the minute from ``x``. Supported types for ``x`` are:\n    DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, INTERVAL DAY TO SECOND\xb6.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    timezone_hour(timestamp) -> bigint\n\n    Returns the hour of the time zone offset from ``timestamp``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    timezone_minute(timestamp) -> bigint\n\n    Returns the minute of the time zone offset from ``timestamp``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    week(x) -> bigint\n\n    Returns the `ISO-Week`_ of the year from x. The value ranges from ``1`` to ``53``.\n\n.. _ISO-Week: https://en.wikipedia.org/wiki/ISO_week_date\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    week_of_year(x) -> bigint\n\n    This is an alias for ``week()``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    year(x) -> bigint\n\n    Returns the year from ``x``. Supported types for ``x`` are:\n    DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, INTERVAL YEAR TO MONTH.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    year_of_week(x) -> bigint\n\n    Returns the year of the ISO week from ``x``.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    yow(x) -> bigint\n\n    This is an alias for :func:`year_of_week`.\n"})}),"\n",(0,i.jsx)(n.p,{children:".. _presto-time-zones:"}),"\n",(0,i.jsx)(n.h2,{id:"time-zones",children:"Time Zones"}),"\n",(0,i.jsx)(n.p,{children:"Pollux has full support for time zone rules, which are needed to perform date/time\ncalculations correctly. Typically, the session time zone is used for temporal\ncalculations. This is the time zone of the client computer that submits the query, if\navailable. Otherwise, it is the time zone of the server running the Presto coordinator."}),"\n",(0,i.jsxs)(n.p,{children:["Queries that operate with time zones that follow daylight saving can produce unexpected\nresults. For example, if we run the following query in the ",(0,i.jsx)(n.code,{children:"America/Los Angeles"})," time\nzone: ::"]}),"\n",(0,i.jsx)(n.p,{children:"SELECT date_add('hour', 24, cast('2014-03-08 09:00:00' as timestamp));\n-- 2014-03-09 10:00:00.000"}),"\n",(0,i.jsxs)(n.p,{children:["The timestamp appears to only advance 23 hours. This is because on March 9th clocks in\n",(0,i.jsx)(n.code,{children:"America/Los Angeles"})," are turned forward 1 hour, so March 9th only has 23 hours. To\nadvance the day part of the timestamp, use the ",(0,i.jsx)(n.code,{children:"day"})," unit instead: ::"]}),"\n",(0,i.jsx)(n.p,{children:"SELECT date_add('day', 1, cast('2014-03-08 09:00:00' as timestamp));\n-- 2014-03-09 09:00:00.000"}),"\n",(0,i.jsxs)(n.p,{children:["This works because the :func:",(0,i.jsx)(n.code,{children:"date_add"})," function treats the timestamp as list of fields, adds\nthe value to the specified field and then rolls any overflow into the next higher field."]}),"\n",(0,i.jsx)(n.p,{children:"Time zones are also necessary for parsing and printing timestamps. Queries that use this\nfunctionality can also produce unexpected results. For example, on the same machine: ::"}),"\n",(0,i.jsx)(n.p,{children:"SELECT cast('2014-03-09 02:30:00' as timestamp);"}),"\n",(0,i.jsxs)(n.p,{children:["The above query causes an error because there was no 2:30 AM on March 9th in\n",(0,i.jsx)(n.code,{children:"America/Los_Angeles"})," due to a daylight saving time transition."]}),"\n",(0,i.jsx)(n.p,{children:"Similarly, the following query has two possible outcomes due to a daylight saving time\ntransition: ::"}),"\n",(0,i.jsx)(n.p,{children:"SELECT cast('2014-11-02 01:30:00' as timestamp);\n-- 2014-11-02 08:30:00.000"}),"\n",(0,i.jsxs)(n.p,{children:["It can be interpreted as ",(0,i.jsx)(n.code,{children:"2014-11-02 01:30:00 PDT"}),", or ",(0,i.jsx)(n.code,{children:"2014-11-02 01:30:00 PST"}),", which are\n",(0,i.jsx)(n.code,{children:"2014-11-02 08:30:00 UTC"})," or ",(0,i.jsx)(n.code,{children:"2014-11-02 09:30:00 UTC"})," respectively. The former one is\npicked to be consistent with Presto."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Timezone Name Parsing"}),": When parsing strings that contain timezone names, the\nlist of supported timezones follow the definition ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",children:"here"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Timezone Conversion"}),": The ",(0,i.jsx)(n.code,{children:"AT TIME ZONE"})," operator sets the time zone of a timestamp: ::"]}),"\n",(0,i.jsx)(n.p,{children:"SELECT timestamp '2012-10-31 01:00 UTC';\n-- 2012-10-31 01:00:00.000 UTC"}),"\n",(0,i.jsx)(n.p,{children:"SELECT timestamp '2012-10-31 01:00 UTC' AT TIME ZONE 'America/Los_Angeles';\n-- 2012-10-30 18:00:00.000 America/Los_Angeles"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(96540);const r={},d=i.createContext(r);function t(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[17054],{81497:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=n(74848),s=n(28453);const r={},o="Bitwise Functions",a={id:"pollux/functions/presto/bitwise",title:"Bitwise Functions",description:"",source:"@site/versioned_docs/version-1.1.1/pollux/functions/presto/bitwise.mdx",sourceDirName:"pollux/functions/presto",slug:"/pollux/functions/presto/bitwise",permalink:"/docs/pollux/functions/presto/bitwise",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748143706e3,frontMatter:{},sidebar:"docs",previous:{title:"binary",permalink:"/docs/pollux/functions/presto/binary"},next:{title:"Comparison Functions",permalink:"/docs/pollux/functions/presto/comparison"}},c={},l=[];function p(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"bitwise-functions",children:"Bitwise Functions"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bit_count(x, bits) -> bigint\n\n    Count the number of bits set in ``x`` (treated as ``bits``-bit signed\n    integer) in 2's complement representation::\n\n        SELECT bit_count(9, 64); -- 2\n        SELECT bit_count(9, 8); -- 2\n        SELECT bit_count(-7, 64); -- 62\n        SELECT bit_count(-7, 8); -- 6\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_and(x, y) -> bigint\n\n    Returns the bitwise AND of ``x`` and ``y`` in 2's complement representation.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_arithmetic_shift_right(x, shift) -> bigint\n\n    Returns the arithmetic right shift operation on ``x`` shifted by ``shift`` in 2\u2019s complement representation.\n    ``shift`` must not be negative.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_left_shift(x, shift) -> [same as x]\n\n    Returns the left shifted value of ``x``.\n    Supported types of x are: ``TINYINT`` , ``SMALLINT``, ``INTEGER`` and ``BIGINT``.\n    ``shift`` is an ``INTEGER``.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_logical_shift_right(x, shift, bits) -> bigint\n\n    Returns the logical right shift operation on ``x`` (treated as ``bits``-bit integer) shifted by ``shift``.\n    ``shift`` must not be negative.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_not(x) -> bigint\n\n    Returns the bitwise NOT of ``x`` in 2's complement representation.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_or(x, y) -> bigint\n\n    Returns the bitwise OR of ``x`` and ``y`` in 2's complement representation.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_right_shift(x, shift) -> [same as x]\n\n    Returns the logical right shifted value of ``x``.\n    Supported types of x are: ``TINYINT``, ``SMALLINT``, ``INTEGER`` and ``BIGINT``.\n    ``shift`` is an ``INTEGER``.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_right_shift_arithmetic(x, shift) -> [same as x]\n\n    Returns the arithmetic right shift value of ``x``.\n    Supported types of x are: ``TINYINT``, ``SMALLINT``, ``INTEGER`` and ``BIGINT``.\n    ``shift`` is an ``INTEGER``.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_shift_left(x, shift, bits) -> bigint\n\n    Returns the left shift operation on ``x`` (treated as ``bits``-bit integer) shifted by ``shift``.\n    ``shift`` must not be negative.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"    bitwise_xor(x, y) -> bigint\n\n    Returns the bitwise XOR of ``x`` and ``y`` in 2's complement representation.\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);
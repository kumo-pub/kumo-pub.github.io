"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[22642],{65778:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var n=s(74848),i=s(28453);const r={},c="\u5b57\u7b26\u4e32\u5206\u5272",l={id:"cpp/base/strings/split",title:"\u5b57\u7b26\u4e32\u5206\u5272",description:"turbo::str_split() \u5206\u5272\u5b57\u7b26\u4e32",source:"@site/versioned_docs/version-1.1.1/cpp/base/strings/split.mdx",sourceDirName:"cpp/base/strings",slug:"/cpp/base/strings/split",permalink:"/docs/cpp/base/strings/split",draft:!1,unlisted:!1,tags:[],version:"1.1.1",frontMatter:{},sidebar:"docs",previous:{title:"\u683c\u5f0f\u5316\u8f93\u51fa",permalink:"/docs/cpp/base/strings/fmt"},next:{title:"\u5b57\u7b26\u4e32\u8fde\u63a5",permalink:"/docs/cpp/base/strings/strcat"}},d={},o=[{value:"<code>turbo::str_split()</code> \u5206\u5272\u5b57\u7b26\u4e32",id:"turbostr_split-\u5206\u5272\u5b57\u7b26\u4e32",level:2},{value:"\u9002\u5e94\u8fd4\u56de\u7c7b\u578b",id:"\u9002\u5e94\u8fd4\u56de\u7c7b\u578b",level:3},{value:"\u5206\u9694\u7b26",id:"delimiters",level:3},{value:"\u8fc7\u6ee4\u6761\u4ef6(\u8c13\u8bcd)",id:"\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd",level:3}];function a(t){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.header,{children:(0,n.jsx)(e.h1,{id:"\u5b57\u7b26\u4e32\u5206\u5272",children:"\u5b57\u7b26\u4e32\u5206\u5272"})}),"\n",(0,n.jsxs)(e.h2,{id:"turbostr_split-\u5206\u5272\u5b57\u7b26\u4e32",children:[(0,n.jsx)(e.code,{children:"turbo::str_split()"})," \u5206\u5272\u5b57\u7b26\u4e32"]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:"turbo::str_split()"})," \u51fd\u6570\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u5b50\u5b57\u7b26\u4e32\u7684\u7b80\u5355\u65b9\u6cd5\u3002\n",(0,n.jsx)(e.code,{children:"str_split()"})," \u63a5\u53d7\u4e00\u4e2a\u8981\u5206\u5272\u7684\u8f93\u5165\u5b57\u7b26\u4e32\u3001\u4e00\u4e2a\u7528\u4e8e\u5206\u5272\u5b57\u7b26\u4e32\u7684\u5206\u9694\u7b26\uff08\u4f8b\u5982\u9017\u53f7 ",(0,n.jsx)(e.code,{children:","}),"\uff09\uff0c\n\u4ee5\u53ca\uff08\u53ef\u9009\uff09\u4e00\u4e2a\u8c13\u8bcd\uff0c\u7528\u4e8e\u5145\u5f53\u8fc7\u6ee4\u5668\u6765\u5224\u65ad\u5206\u5272\u5143\u7d20\u662f\u5426\u5305\u542b\u5728\u7ed3\u679c\u96c6\u3002 ",(0,n.jsx)(e.code,{children:"str_split()"})," \u8fd8\u5c06\u8fd4\u56de\u7684\u96c6\u5408\u8c03\u6574\u4e3a\u8c03\u7528\u8005\u6307\u5b9a\u7684\u7c7b\u578b\u3002"]}),"\n",(0,n.jsx)(e.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-cpp",children:'// Splits the given string on commas. Returns the results in a\n// vector of strings. (Data is copied once.)\nstd::vector<std::string> v = turbo::str_split("a,b,c", \',\');  // Can also use ","\n// v[0] == "a", v[1] == "b", v[2] == "c"\n\n// Splits the string as in the previous example, except that the results\n// are returned as `std::string_view` objects, avoiding copies. Note that\n// because we are storing the results within `std::string_view` objects, we\n// have to ensure that the input string outlives any results.\nstd::vector<std::string_view> v = turbo::str_split("a,b,c", \',\');\n// v[0] == "a", v[1] == "b", v[2] == "c"\n'})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:"str_split()"})," \u4f7f\u7528\u4f20\u9012\u7684 ",(0,n.jsx)(e.em,{children:"Delimiter"})," \u5bf9\u8c61\u5206\u5272\u5b57\u7b26\u4e32\u3002\uff08\u8bf7\u53c2\u9605\u4e0b\u9762\u7684 ",(0,n.jsx)(e.a,{href:"#delimiters",children:"Delimiters"}),"\u3002\uff09\u4f46\u662f\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\n\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u4f20\u9012\u5b57\u7b26\u4e32\u6587\u5b57\u4f5c\u4e3a\u5206\u9694\u7b26\uff08\u5b83\u5c06\u9690\u5f0f\u8f6c\u6362\u4e3a ",(0,n.jsx)(e.code,{children:"turbo::ByString"})," \u5206\u9694\u7b26\uff09\u3002"]}),"\n",(0,n.jsx)(e.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-cpp",children:'// By default, empty strings are *included* in the output. See the\n// `turbo::SkipEmpty()` predicate below to omit them{#stringSplitting}.\nstd::vector<std::string> v = turbo::str_split("a,b,,c", \',\');\n// v[0] == "a", v[1] == "b", v[2] == "", v[3] = "c"\n\n// You can also split an empty string\nv = turbo::str_split("", \',\');\n// v[0] = ""\n\n// The delimiter need not be a single character\nstd::vector<std::string> v = turbo::str_split("aCOMMAbCOMMAc", "COMMA");\n// v[0] == "a", v[1] == "b", v[2] == "c"\n\n// You can also use the empty string as the delimiter, which will split\n// a string into its constituent characters.\nstd::vector<std::string> v = turbo::str_split("abcd", "");\n// v[0] == "a", v[1] == "b", v[2] == "c", v[3] = "d"\n'})}),"\n",(0,n.jsx)(e.h3,{id:"\u9002\u5e94\u8fd4\u56de\u7c7b\u578b",children:"\u9002\u5e94\u8fd4\u56de\u7c7b\u578b"}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:"str_split()"})," API \u66f4\u6709\u7528\u7684\u529f\u80fd\u4e4b\u4e00\u662f\u5b83\u80fd\u591f\u5c06\u5176\u7ed3\u679c\u96c6\u8c03\u6574\u4e3a\u6240\u9700\u7684\u8fd4\u56de\u7c7b\u578b\u3002 ",(0,n.jsx)(e.code,{children:"str_split()"}),"\n\u8fd4\u56de\u7684\u96c6\u5408\u53ef\u80fd\u5305\u542b ",(0,n.jsx)(e.code,{children:"std::string"}),"\u3001",(0,n.jsx)(e.code,{children:"std::string_view"})," \u6216\u4efb\u4f55\u53ef\u4ee5\u4ece ",(0,n.jsx)(e.code,{children:"std::string_view"}),"\n\u663e\u5f0f\u521b\u5efa\u7684\u5bf9\u8c61\u3002\u6b64\u6a21\u5f0f\u9002\u7528\u4e8e\u6240\u6709\u6807\u51c6 STL \u5bb9\u5668\uff0c\u5305\u62ec ",(0,n.jsx)(e.code,{children:"std::vector"}),"\u3001",(0,n.jsx)(e.code,{children:"std::list"}),"\u3001",(0,n.jsx)(e.code,{children:"std::deque"}),"\u3001",(0,n.jsx)(e.code,{children:"std::set"}),"\u3001",(0,n.jsx)(e.code,{children:"std::multiset"}),"\u3001\n",(0,n.jsx)(e.code,{children:"std::map"})," \uff0c\u548c",(0,n.jsx)(e.code,{children:"std::multimap"}),"\uff0c\u751a\u81f3",(0,n.jsx)(e.code,{children:"std::pair"}),"\uff0c\u5b83\u5b9e\u9645\u4e0a\u4e0d\u662f\u4e00\u4e2a\u5bb9\u5668\u3002"]}),"\n",(0,n.jsx)(e.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-cpp",children:'// Stores results in a std::set<std::string>, which also performs de-duplication\n// and orders the elements in ascending order.\nstd::set<std::string> s = turbo::str_split("b,a,c,a,b", \',\');\n// s[0] == "a", s[1] == "b", s[2] == "c"\n\n// Stores results in a map. The map implementation assumes that the input\n// is provided as a series of key/value pairs. For example, the 0th element\n// resulting from the split will be stored as a key to the 1st element. If\n// an odd number of elements are resolved, the last element is paired with\n// a default-constructed value (e.g., empty string).\nstd::map<std::string, std::string> m = turbo::str_split("a,b,c", \',\');\n// m["a"] == "b", m["c"] == "" // last component value equals ""\n\n// Stores first two split strings as the members in a std::pair. Any split\n// strings beyond the first two are omitted because std::pair can hold only two\n// elements.\nstd::pair<std::string, std::string> p = turbo::str_split("a,b,c", \',\');\n// p.first = "a", p.second = "b" ; "c" is omitted\n'})}),"\n",(0,n.jsx)(e.h3,{id:"delimiters",children:"\u5206\u9694\u7b26"}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:"str_split()"})," API \u63d0\u4f9b\u4e86\u8bb8\u591a\u201c\u5206\u9694\u7b26\u201d\u6765\u63d0\u4f9b\u7279\u6b8a\u7684\u5206\u9694\u7b26\u884c\u4e3a\u3002 Delimiter \u5b9e\u73b0\u5305\u542b\u4e00\u4e2a",(0,n.jsx)(e.code,{children:"Find()"}),"\u51fd\u6570\uff0c\n\u8be5\u51fd\u6570\u77e5\u9053\u5982\u4f55\u5728\u7ed9\u5b9a\u7684",(0,n.jsx)(e.code,{children:"std::string_view"}),"\u4e2d\u67e5\u627e\u5176\u81ea\u8eab\u7684\u7b2c\u4e00\u6b21\u51fa\u73b0\u3002\u5206\u9694\u7b26\u6982\u5ff5\u7684\u6a21\u578b\u8868\u793a\u7279\u5b9a\u7c7b\u578b\u7684\u5206\u9694\u7b26\uff0c\n\u4f8b\u5982\u5355\u4e2a\u5b57\u7b26\u3001\u5b50\u5b57\u7b26\u4e32\uff0c\u751a\u81f3\u6b63\u5219\u8868\u8fbe\u5f0f\u3002"]}),"\n",(0,n.jsx)(e.p,{children:"\u4ee5\u4e0b\u5206\u9694\u7b26\u62bd\u8c61\u4f5c\u4e3a\u201cstr_split()\u201d\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff1a"}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"turbo::ByString()"})," (default for ",(0,n.jsx)(e.code,{children:"std::string"})," arguments)"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"turbo::ByChar()"})," (default for a ",(0,n.jsx)(e.code,{children:"char"})," argument)"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"turbo::ByAnyChar()"})," (for mixing delimiters)"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"turbo::ByLength()"})," (for applying a delimiter a set number of times)"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"turbo::MaxSplits()"})," (for splitting a specific number of times)"]}),"\n"]}),"\n",(0,n.jsx)(e.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-cpp",children:'// Because a `string` literal is converted to an `turbo::ByString`, the following\n// two splits are equivalent.\nstd::vector<std::string> v = turbo::str_split("a,b,c", ",");\nstd::vector<std::string> v = turbo::str_split("a,b,c", turbo::ByString(","));\n// v[0] == "a", v[1] == "b", v[2] == "c"\n\n// Because a `char` literal is converted to an `turbo::ByChar`, the following two\n// splits are equivalent.\nstd::vector<std::string> v = turbo::str_split("a,b,c", \',\');\n// v[0] == "a", v[1] == "b", v[2] == "c"\n\nstd::vector<std::string> v = turbo::str_split("a,b,c", turbo::ByChar(\',\'));\n// v[0] == "a", v[1] == "b", v[2] == "c"\n\n// Splits on any of the given characters ("," or ";")\nvector<std::string> v = turbo::str_split("a,b;c", turbo::ByAnyChar(",;"));\n// v[0] == "a", v[1] == "b", v[2] == "c"\n\n// Uses the `turbo::MaxSplits` delimiter to limit the number of matches a\n// delimiter can have. In this case, the delimiter of a literal comma is limited\n// to matching at most one time. The last element in the returned collection\n// will contain all unsplit pieces, which may contain instances of the\n// delimiter.\nstd::vector<std::string> v = turbo::str_split("a,b,c", turbo::MaxSplits(\',\', 1));\n// v[0] == "a", v[1] == "b,c"\n\n// Splits into equal-length substrings.\nstd::vector<std::string> v = turbo::str_split("12345", turbo::ByLength(2));\n// v[0] == "12", v[1] == "34", v[2] == "5"\n'})}),"\n",(0,n.jsx)(e.h3,{id:"\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd",children:"\u8fc7\u6ee4\u6761\u4ef6(\u8c13\u8bcd)"}),"\n",(0,n.jsxs)(e.p,{children:["\u8c13\u8bcd\u53ef\u4ee5\u901a\u8fc7\u786e\u5b9a\u7ed3\u679c\u5143\u7d20\u662f\u5426\u5305\u542b\u5728\u7ed3\u679c\u96c6\u4e2d\u6765\u8fc7\u6ee4",(0,n.jsx)(e.code,{children:"str_split()"}),"\u64cd\u4f5c\u7684\u7ed3\u679c\u3002\u8fc7\u6ee4\u8c13\u8bcd\u53ef\u4ee5\u4f5c\u4e3a",(0,n.jsx)(e.em,{children:"\u53ef\u9009"}),"\u7b2c\u4e09\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9",(0,n.jsx)(e.code,{children:"str_split()"}),"\u51fd\u6570\u3002"]}),"\n",(0,n.jsxs)(e.p,{children:["\u8c13\u8bcd\u5fc5\u987b\u662f\u4e00\u5143\u51fd\u6570\uff08\u6216\u51fd\u6570\u5bf9\u8c61\uff0c\u4f8b\u5982 ",(0,n.jsx)(e.a,{href:"https://en.cppreference.com/w/cpp/language/lambda",children:"lambda"}),"\uff09\uff0c\u5b83\u91c7\u7528\u5355\u4e2a ",(0,n.jsx)(e.code,{children:"std::string_view"})," \u53c2\u6570\u5e76\u8fd4\u56de bool\u6307\u793a\u662f\u5426\u5e94\u5305\u542b\u53c2\u6570\uff08",(0,n.jsx)(e.code,{children:"true"}),"\uff09\u6216\u6392\u9664\u53c2\u6570\uff08",(0,n.jsx)(e.code,{children:"false"}),"\uff09\u3002"]}),"\n",(0,n.jsxs)(e.p,{children:["\u4f7f\u7528\u8c13\u8bcd\u5f88\u6709\u7528\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\uff1a\u8fc7\u6ee4\u6389\u7a7a\u5b50\u5b57\u7b26\u4e32\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c",(0,n.jsx)(e.code,{children:"str_split()"}),"\u53ef\u4ee5\u5c06\u7a7a\u5b50\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7ed3\u679c\u96c6\u4e2d\u7684\u5355\u72ec\u5143\u7d20\u8fd4\u56de\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d split \u51fd\u6570\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-cpp",children:'// Empty strings *are* included in the returned collection.\nstd::vector<std::string> v = turbo::str_split(",a,,b,", \',\');\n// v[0] == "", v[1] == "a", v[2] == "", v[3] = "b", v[4] = ""\n'})}),"\n",(0,n.jsxs)(e.p,{children:["\u53ea\u9700\u5c06\u63d0\u4f9b\u7684",(0,n.jsx)(e.code,{children:"SkipEmpty()"}),"\u8c13\u8bcd\u4f5c\u4e3a\u7b2c\u4e09\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9",(0,n.jsx)(e.code,{children:"str_split()"}),"\u51fd\u6570\uff0c\u5373\u53ef\u4ece\u7ed3\u679c\u96c6\u4e2d\u8fc7\u6ee4\u6389\u8fd9\u4e9b\u7a7a\u5b57\u7b26\u4e32\u3002 ",(0,n.jsx)(e.code,{children:"SkipEmpty()"})," \u4e0d\u4f1a\u5c06\u5305\u542b\u6240\u6709\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u89c6\u4e3a\u7a7a\u3002\u5bf9\u4e8e\u8be5\u884c\u4e3a\uff0c\u8bf7\u4f7f\u7528",(0,n.jsx)(e.code,{children:"SkipWhitespace()"}),"\u8c13\u8bcd\u3002"]}),"\n",(0,n.jsx)(e.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-cpp",children:'// Uses turbo::SkipEmpty() to omit empty strings. Strings containing whitespace\n// are not empty and are therefore not skipped.\nstd::vector<std::string> v = turbo::str_split(",a, ,b,", \',\', turbo::SkipEmpty());\n// v[0] == "a", v[1] == " ", v[2] == "b"\n\n// Uses turbo::SkipWhitespace() to skip all strings that are either empty or\n// contain only whitespace.\nstd::vector<std::string> v = turbo::str_split(",a, ,b,", \',\',\n                                            turbo::SkipWhitespace());\n// v[0] == "a", v[1] == "b"\n\n// Passes a lambda as the predicate to keep only the lines that don\'t start\n// with a `#`.\nstd::vector<std::string> non_comment_lines = turbo::str_split(\n    file_content, \'\\n\',\n    [](std::string_view line) { return !turbo::StartsWith(line, "#"); });\n'})})]})}function p(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(a,{...t})}):a(t)}},28453:(t,e,s)=>{s.d(e,{R:()=>c,x:()=>l});var n=s(96540);const i={},r=n.createContext(i);function c(t){const e=n.useContext(r);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:c(t.components),n.createElement(r.Provider,{value:e},t.children)}}}]);
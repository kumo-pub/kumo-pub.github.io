"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[51091],{56349:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>s,toc:()=>t});var r=i(74848),a=i(28453);const d={title:"Android support",description:"How to target Android devices using C++ with kmpkg",date:"07/11/2024","ms.topic":"concept-article"},o="Android",s={id:"kmpkg/users/platforms/android",title:"Android support",description:"How to target Android devices using C++ with kmpkg",source:"@site/versioned_docs/version-1.1.1/kmpkg/users/platforms/android.md",sourceDirName:"kmpkg/users/platforms",slug:"/kmpkg/users/platforms/android",permalink:"/docs/kmpkg/users/platforms/android",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748081772e3,frontMatter:{title:"Android support",description:"How to target Android devices using C++ with kmpkg",date:"07/11/2024","ms.topic":"concept-article"}},l={},t=[{value:"Android build requirements",id:"android-build-requirements",level:2},{value:"kmpkg triplets and their corresponding Android ABI",id:"kmpkg-triplets-and-their-corresponding-android-abi",level:2},{value:"Building Android libraries in a Docker container",id:"building-android-libraries-in-a-docker-container",level:2},{value:"Using Vulkan SDK",id:"using-vulkan-sdk",level:2},{value:"Example Android Project",id:"example-android-project",level:2},{value:"Details",id:"details",level:3},{value:"Test on an example: <code>kmpkg_android.cmake</code>",id:"test-on-an-example-kmpkg_androidcmake",level:2},{value:"Details",id:"details-1",level:3},{value:"Consume libraries using kmpkg, and Android prefab Archives (AAR files)",id:"consume-libraries-using-kmpkg-and-android-prefab-archives-aar-files",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Example exporting [jsoncpp]",id:"example-exporting-jsoncpp",level:3},{value:"The output directory after export",id:"the-output-directory-after-export",level:4},{value:"Example consuming [jsoncpp] via kmpkg and prefab",id:"example-consuming-jsoncpp-via-kmpkg-and-prefab",level:3}];function c(n){const e={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",details:"details",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",summary:"summary",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"android",children:"Android"})}),"\n",(0,r.jsx)(e.p,{children:"The triplets x64-android, arm-neon-android, and arm64-android are tested by kmpkg's curated registry continuous integration."}),"\n",(0,r.jsx)(e.h2,{id:"android-build-requirements",children:"Android build requirements"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Download the ",(0,r.jsx)(e.a,{href:"https://developer.android.com/ndk/downloads/",children:"Android NDK"})]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Set environment variable ",(0,r.jsx)(e.code,{children:"ANDROID_NDK_HOME"})," to your Android NDK installation to set up the Android toolchain. For example:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"export ANDROID_NDK_HOME=/home/your-account/Android/Sdk/ndk-bundle\n"})}),"\n",(0,r.jsx)(e.p,{children:"Or:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"export ANDROID_NDK_HOME=/home/your-account/Android/android-ndk-r26d\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Note: you will still need to install g++ or a C++ compiler that targets your host for any host dependencies."}),"\n",(0,r.jsx)(e.h2,{id:"kmpkg-triplets-and-their-corresponding-android-abi",children:"kmpkg triplets and their corresponding Android ABI"}),"\n",(0,r.jsx)(e.p,{children:"There are six different Android ABIs, each of which maps to a kmpkg triplet. The following table outlines the mapping from kmpkg architectures to android architectures:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"KMPKG_TARGET_TRIPLET"}),(0,r.jsx)(e.th,{children:"ANDROID_ABI"}),(0,r.jsx)(e.th,{children:"ANDROID_ARM_NEON"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"arm64-android"}),(0,r.jsx)(e.td,{children:"arm64-v8a"}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"arm-android"}),(0,r.jsx)(e.td,{children:"armeabi-v7a"}),(0,r.jsx)(e.td,{children:"OFF"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"arm-neon-android"}),(0,r.jsx)(e.td,{children:"armeabi-v7a"}),(0,r.jsx)(e.td,{children:"ON"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"x64-android"}),(0,r.jsx)(e.td,{children:"x86_64"}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"x86-android"}),(0,r.jsx)(e.td,{children:"x86"}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"armv6-android"}),(0,r.jsx)(e.td,{children:"armeabi"}),(0,r.jsx)(e.td,{})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"building-android-libraries-in-a-docker-container",children:"Building Android libraries in a Docker container"}),"\n",(0,r.jsxs)(e.p,{children:["You can build Android libraries, such as ",(0,r.jsx)(e.code,{children:"jsoncpp"})," in a Ubuntu Docker container."]}),"\n",(0,r.jsxs)(e.p,{children:["Create a ",(0,r.jsx)(e.code,{children:"Dockerfile"})," with the following contents:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-Dockerfile",children:'FROM ubuntu:22.04\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN \\\n  apt-get update && \\\n  apt-get -y upgrade\n\nRUN \\\n  apt-get -y --no-install-recommends install git g++ wget curl zip vim pkg-config tar cmake unzip ca-certificates\n\n# Download Android NDK\nRUN \\\n  wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip && \\\n  unzip android-ndk-r26d-linux.zip && \\\n  rm -rf android-ndk-r26d-linux.zip\n\nENV ANDROID_NDK_HOME /android-ndk-r26d\n\nRUN git clone https://gitee.com/kumo-pub/kmpkg\nWORKDIR kmpkg\nRUN ./bootstrap-kmpkg.sh\n\nENV PATH "/kmpkg:$PATH"\nENV KMPKG_ROOT "/kmpkg"\n\nWORKDIR /project\n'})}),"\n",(0,r.jsx)(e.p,{children:"Build the image and launch a new container:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:'docker build . -t "kmpkg-android"\ndocker run -it "kmpkg-android" bash\n'})}),"\n",(0,r.jsxs)(e.p,{children:["In the container, create ",(0,r.jsx)(e.code,{children:"/project/kmpkg.json"})," with the following contents:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "dependencies": [\n    "jsoncpp"\n  ],\n  "builtin-baseline": "1e68748a7c6914642ed686b2e19c3d688bca150a"\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Finally, run ",(0,r.jsx)(e.code,{children:"kmpkg install --triplet x64-android"})," to build ",(0,r.jsx)(e.code,{children:"jsoncpp"})," for android."]}),"\n",(0,r.jsx)(e.h2,{id:"using-vulkan-sdk",children:"Using Vulkan SDK"}),"\n",(0,r.jsxs)(e.p,{children:["kmpkg has a ",(0,r.jsxs)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg/blob/master/ports/vulkan/portfile.cmake",children:[(0,r.jsx)(e.code,{children:"vulkan"})," package"]})," which allows you to ",(0,r.jsx)(e.code,{children:"find_package(Vulkan)"}),". To use it you have to provide the ",(0,r.jsx)(e.code,{children:"VULKAN_SDK"})," environment variable."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"export VULKAN_SDK=/usr/local\n./kmpkg install vulkan\n"})}),"\n",(0,r.jsxs)(e.p,{children:["NDK already contains ",(0,r.jsx)(e.a,{href:"https://developer.android.com/ndk/guides/graphics/getting-started",children:"Vulkan"})," headers and ",(0,r.jsx)(e.code,{children:"libvulkan.so"})," binaries for each of its architectures."]}),"\n",(0,r.jsxs)(e.p,{children:["To expose them to kmpkg, you can consider ",(0,r.jsx)(e.code,{children:"export VULKAN_SDK=..."})," for each installation. But by placing ",(0,r.jsx)(e.code,{children:"set(ENV{VULKAN_SDK} ...)"})," in the triplet files, you can skip the tedious work."]}),"\n",(0,r.jsx)(e.p,{children:"If you are using NDK 21.3.6528147 or an earlier version, it will be like the following:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cmake",children:"# In android triplets... (e.g. arm64-android.cmake)\nset(KMPKG_CMAKE_SYSTEM_NAME Android)\n# ...\n# If your API level is 30, libvulkan.so is at $ENV{ANDROID_NDK_HOME}/platforms/android-30/arch-arm64/usr/lib\nset(ENV{VULKAN_SDK} $ENV{ANDROID_NDK_HOME}/sysroot/usr)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Notice that ",(0,r.jsx)(e.strong,{children:"the location of the sysroot has changed since NDK 22"}),". (For more information, see ",(0,r.jsx)(e.a,{href:"https://github.com/android/ndk/issues/1407",children:"[BUG] sysroot headers missing since r22?"}),")."]}),"\n",(0,r.jsxs)(e.p,{children:["If you prefer using ",(0,r.jsx)(e.a,{href:"https://developer.android.com/studio/projects/install-ndk#default-ndk-per-agp",children:"the latest version"}),", check the ",(0,r.jsx)(e.a,{href:"https://android.googlesource.com/platform/ndk/+/master/docs/BuildSystemMaintainers.md#sysroot",children:"BuildSystemMaintainers.md of the NDK document"})," and then put appropriate path for your system."]}),"\n",(0,r.jsx)(e.p,{children:"For example, MacOS users will use the path like this example:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cmake",children:"# In android triplets... (e.g. arm64-android.cmake)\nset(KMPKG_CMAKE_SYSTEM_NAME Android)\n# ...\n# If your API level is 30, libvulkan.so is at $ENV{ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/lib/aarch64-linux-android/30\nset(ENV{VULKAN_SDK} $ENV{ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["By doing this for all Android triplets, you can install ",(0,r.jsx)(e.code,{children:"vulkan"})," and the packages that require it. (e.g. ",(0,r.jsx)(e.code,{children:"vulkan-hpp"}),")"]}),"\n",(0,r.jsxs)(e.details,{children:["\n  ",(0,r.jsx)(e.summary,{children:"`kmpkg install vulkan-hpp:arm64-android`"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-console",children:'user@host$ ./kmpkg install vulkan-hpp:arm64-android\nComputing installation plan...\nThe following packages will be built and installed:\n  * vulkan[core]:arm64-android -> 1.1.82.1-1\n    vulkan-hpp[core]:arm64-android -> 2019-05-11-1\nAdditional packages (*) will be modified to complete this operation.\nDetecting compiler hash for triplet arm64-android...\n...\nStarting package 1/2: vulkan:arm64-android\nBuilding package vulkan[core]:arm64-android...\n-- Using community triplet arm64-android. This triplet configuration is not guaranteed to succeed.\n-- [COMMUNITY] Loading triplet configuration from: /.../kmpkg/triplets/community/arm64-android.cmake\n-- Querying VULKAN_SDK Environment variable\n-- Searching /.../Library/Android/sdk/ndk/22.1.7171670/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/include/vulkan/ for vulkan.h\n-- Found vulkan.h\n-- Performing post-build validation\n-- Performing post-build validation done\n...\nBuilding package vulkan[core]:arm64-android... done\nInstalling package vulkan[core]:arm64-android...\nInstalling package vulkan[core]:arm64-android... done\nElapsed time for package vulkan:arm64-android: 35.9 ms\nStarting package 2/2: vulkan-hpp:arm64-android\nBuilding package vulkan-hpp[core]:arm64-android...\n-- Using community triplet arm64-android. This triplet configuration is not guaranteed to succeed.\n-- [COMMUNITY] Loading triplet configuration from: /.../kmpkg/triplets/community/arm64-android.cmake\n-- Using cached /.../kmpkg/downloads/KhronosGroup-Vulkan-Hpp-5ce8ae7fd0d9c0543d02f33cfa8a66e6a43e2150.tar.gz\n-- Cleaning sources at /.../kmpkg/buildtrees/vulkan-hpp/src/e6a43e2150-4f344cd911.clean. Use --editable to skip cleaning for the packages you specify.\n-- Extracting source /.../kmpkg/downloads/KhronosGroup-Vulkan-Hpp-5ce8ae7fd0d9c0543d02f33cfa8a66e6a43e2150.tar.gz\n-- Using source at /.../kmpkg/buildtrees/vulkan-hpp/src/e6a43e2150-4f344cd911.clean\n-- Performing post-build validation\n-- Performing post-build validation done\n...\nBuilding package vulkan-hpp[core]:arm64-android... done\nInstalling package vulkan-hpp[core]:arm64-android...\nInstalling package vulkan-hpp[core]:arm64-android... done\nElapsed time for package vulkan-hpp:arm64-android: 144.5 ms\n\nTotal elapsed time: 1.013 s\n\nThe package vulkan-hpp:arm64-android is header only and can be used from CMake via:\n\n    find_path(VULKAN_HPP_INCLUDE_DIRS "vulkan/vulkan.hpp")\n    target_include_directories(main PRIVATE ${VULKAN_HPP_INCLUDE_DIRS})\n\n'})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"example-android-project",children:"Example Android Project"}),"\n",(0,r.jsxs)(e.p,{children:["The folder ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake",children:"docs/examples/kmpkg_android_example_cmake"})," provides a working example, with an Android library that consumes the jsoncpp library:"]}),"\n",(0,r.jsx)(e.h3,{id:"details",children:"Details"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake/CMakeLists.txt",children:"CMakeLists.txt"})," simply uses ",(0,r.jsx)(e.code,{children:"find_package"})," and ",(0,r.jsx)(e.code,{children:"target_link_library"})]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake/compile.sh",children:"compile.sh"}),' script enables you to select any matching pair of "android abi" /  "kmpkg triplet" and to test the compilation']}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["The dummy ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake/my_lib.cpp",children:"my_lib.cpp"})," file uses the jsoncpp library"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"[!NOTE]\nThis example only compiles an Android library, as the compilation of a full-fledged Android App is beyond the scope of this document."}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"test-on-an-example-kmpkg_androidcmake",children:["Test on an example: ",(0,r.jsx)(e.code,{children:"kmpkg_android.cmake"})]}),"\n",(0,r.jsxs)(e.p,{children:["Test using ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake_script/cmake/kmpkg_android.cmake",children:"kmpkg_android.cmake"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["The folder ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake_script",children:"kmpkg_android_example_cmake_script"})," provides the same example, and uses a cmake script in order to simplify the usage."]}),"\n",(0,r.jsx)(e.h3,{id:"details-1",children:"Details"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["The main ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake_script/CMakeLists.txt",children:"CMakeLists.txt"})," loads ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake_script/cmake/kmpkg_android.cmake",children:"kmpkg_android.cmake"})," if the flag ",(0,r.jsx)(e.code,{children:"KMPKG_TARGET_ANDROID"})," is set:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cmake",children:'if (KMPKG_TARGET_ANDROID)\n    include("cmake/kmpkg_android.cmake")\nendif()\n'})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["[!IMPORTANT]\nPlace these lines before calling ",(0,r.jsx)(e.code,{children:"project()"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.a,{href:"https://gitee.com/kumo-pub/kmpkg-docs/tree/main/kmpkg/examples/kmpkg_android_example_cmake_script/compile.sh",children:"compile.sh"})," script shows that it is then possible to compile for android using a simple cmake invocation, for example:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"cmake .. -DKMPKG_TARGET_ANDROID=ON -DANDROID_ABI=armeabi-v7a\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"consume-libraries-using-kmpkg-and-android-prefab-archives-aar-files",children:"Consume libraries using kmpkg, and Android prefab Archives (AAR files)"}),"\n",(0,r.jsx)(e.admonition,{type:"warning",children:(0,r.jsx)(e.p,{children:"\u672c\u8282\u4ecb\u7ecd kmpkg \u7684\u5b9e\u9a8c\u6027\u529f\u80fd\uff0c\u8be5\u529f\u80fd\u53ef\u80fd\u968f\u65f6\u66f4\u6539\u6216\u5220\u9664\u3002"})}),"\n",(0,r.jsxs)(e.p,{children:["kmpkg can export Android archives (",(0,r.jsx)(e.a,{href:"https://developer.android.com/studio/projects/android-library",children:"AAR files"}),"). Once an archive is created, it can be imported in Android Studio as a native dependent.  The archive is automatically consumed using ",(0,r.jsx)(e.a,{href:"https://github.com/google/prefab",children:"Android Studio's prefab tool"}),"."]}),"\n",(0,r.jsx)(e.p,{children:"For more information on Prefab, refer to:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["The ",(0,r.jsx)(e.a,{href:"https://google.github.io/prefab",children:"official prefab documentation"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["a blog post from Android developers blog: ",(0,r.jsx)(e.a,{href:"https://android-developers.googleblog.com/2020/02/native-dependencies-in-android-studio-40.html",children:"Native Dependencies in Android Studio 4.0"})]}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"[!NOTE]\nAndroid Studio users: prefab packages are supported on Android Studio 4+."}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"ndk <required>"})}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["Set environment variable ",(0,r.jsx)(e.code,{children:"ANDROID_NDK_HOME"})," to your android ndk installation. For example:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-console",children:"export ANDROID_NDK_HOME=/home/your-account/Android/Sdk/ndk-bundle\n"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"7zip <required on windows>"})," or ",(0,r.jsx)(e.code,{children:"zip <required on linux>"})]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.code,{children:"maven <optional>"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Android triplets"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:'[!NOTE]\nTo use "prefab" (see below), all four architectures are required. If any are missing the export will fail.'}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"example-exporting-jsoncpp",children:"Example exporting [jsoncpp]"}),"\n",(0,r.jsx)(e.p,{children:'First, run "kmpkg install" for all supported Android architectures (it is mandatory to export all of them):'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-console",children:"./kmpkg install jsoncpp:arm-android  jsoncpp:arm64-android  jsoncpp:x64-android  jsoncpp:x86-android\n"})}),"\n",(0,r.jsx)(e.p,{children:"Then, export the prefab:"}),"\n",(0,r.jsx)(e.p,{children:"Notes:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["The ",(0,r.jsx)(e.code,{children:"--prefab-maven"})," flag is optional. Call it if maven is installed."]}),"\n",(0,r.jsxs)(e.li,{children:["The ",(0,r.jsx)(e.code,{children:"--prefab-debug"})," flag will output instructions on how to use the prefab archive via gradle."]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-console",children:"./kmpkg export --triplet x64-android jsoncpp --prefab --prefab-maven --prefab-debug\n"})}),"\n",(0,r.jsx)(e.p,{children:"You will see output like this:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-console",children:"The following packages are already built and will be exported:\n    jsoncpp:arm64-android\n\nExporting package jsoncpp...\n[DEBUG] Found 4 triplets\n  arm64-android\n  x64-android\n  x86-android\n  arm-android\n\n...\n... Lots of output...\n...\n\n[INFO] Scanning for projects...\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom\n\n...\n... Lots of output...\n...\n\n[INFO] BUILD SUCCESS\n[INFO] Total time:  2.207 s\n[INFO] Finished at: 2020-05-10T14:42:28+02:00\n\n\n...\n... Lots of output...\n...\n\n[DEBUG] Configuration properties in Android Studio\nIn app/build.gradle\n\n  com.kmpkg.ndk.support:jsoncpp:1.9.2\n\nAnd cmake flags\n\n    externalNativeBuild {\n                cmake {\n                    arguments '-DANDROID_STL=c++_shared'\n                    cppFlags \"-std=c++17\"\n                }\n            }\n\nIn gradle.properties\n\n    android.enablePrefab=true\n    android.enableParallelJsonGen=false\n    android.prefabVersion=${prefab.version}\n\nSuccessfully exported jsoncpp. Checkout .../kmpkg/prefab \n\n"})}),"\n",(0,r.jsx)(e.h4,{id:"the-output-directory-after-export",children:"The output directory after export"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"prefab\n\u2514\u2500\u2500 jsoncpp/\n    \u251c\u2500\u2500 aar/\n    \u2502   \u251c\u2500\u2500 AndroidManifest.xml\n    \u2502   \u251c\u2500\u2500 META-INF/\n    \u2502   \u2502   \u2514\u2500\u2500 LICENSE\n    \u2502   \u2514\u2500\u2500 prefab/\n    \u2502       \u251c\u2500\u2500 modules/\n    \u2502       \u2502   \u2514\u2500\u2500 jsoncpp/\n    \u2502       \u2502       \u251c\u2500\u2500 libs/\n    \u2502       \u2502       \u2502   \u251c\u2500\u2500 android.arm64-v8a/\n    \u2502       \u2502       \u2502   \u2502   \u251c\u2500\u2500 abi.json\n    \u2502       \u2502       \u2502   \u2502   \u251c\u2500\u2500 include/\n    \u2502       \u2502       \u2502   \u2502   \u2502   \u2514\u2500\u2500 json/\n    \u2502       \u2502       \u2502   \u2502   \u2502       \u251c\u2500\u2500 json.h\n    \u2502       \u2502       \u2502   \u2502   \u2502       \u2514\u2500\u2500 ....\n    \u2502       \u2502       \u2502   \u2502   \u2514\u2500\u2500 libjsoncpp.so\n    \u2502       \u2502       \u2502   \u251c\u2500\u2500 android.armeabi-v7a/\n    \u2502       \u2502       \u2502   \u2502   \u251c\u2500\u2500 abi.json\n    \u2502       \u2502       \u2502   \u2502   \u251c\u2500\u2500 include/\n    \u2502       \u2502       \u2502   \u2502   \u2502   \u2514\u2500\u2500 json/\n    \u2502       \u2502       \u2502   \u2502   \u2502       \u251c\u2500\u2500 json.h\n    \u2502       \u2502       \u2502   \u2502   \u2502       \u2514\u2500\u2500 ....\n    \u2502       \u2502       \u2502   \u2502   \u2514\u2500\u2500 libjsoncpp.so\n    \u2502       \u2502       \u2502   \u251c\u2500\u2500 android.x86/\n    \u2502       \u2502       \u2502   \u2502   \u251c\u2500\u2500 abi.json\n    \u2502       \u2502       \u2502   \u2502   \u251c\u2500\u2500 include/\n    \u2502       \u2502       \u2502   \u2502   \u2502   \u2514\u2500\u2500 json/\n    \u2502       \u2502       \u2502   \u2502   \u2502       \u251c\u2500\u2500 json.h\n    \u2502       \u2502       \u2502   \u2502   \u2502       \u2514\u2500\u2500 ....\n    \u2502       \u2502       \u2502   \u2502   \u2514\u2500\u2500 libjsoncpp.so\n    \u2502       \u2502       \u2502   \u2514\u2500\u2500 android.x86_64/\n    \u2502       \u2502       \u2502       \u251c\u2500\u2500 abi.json\n    \u2502       \u2502       \u2502       \u251c\u2500\u2500 include/\n    \u2502       \u2502       \u2502       \u2502   \u2514\u2500\u2500 json/\n    \u2502       \u2502       \u2502       \u2502       \u251c\u2500\u2500 json.h\n    \u2502       \u2502       \u2502       \u2502       \u2514\u2500\u2500 ....\n    \u2502       \u2502       \u2502       \u2514\u2500\u2500 libjsoncpp.so\n    \u2502       \u2502       \u2514\u2500\u2500 module.json\n    \u2502       \u2514\u2500\u2500 prefab.json\n    \u251c\u2500\u2500 jsoncpp-1.9.2.aar\n    \u2514\u2500\u2500 pom.xml\n"})}),"\n",(0,r.jsx)(e.h3,{id:"example-consuming-jsoncpp-via-kmpkg-and-prefab",children:"Example consuming [jsoncpp] via kmpkg and prefab"}),"\n",(0,r.jsx)(e.p,{children:"See the example GitHub repo here:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://github.com/atkawa7/prefab-vpkg-integration-sample",children:(0,r.jsx)(e.code,{children:"atkawa7/prefab-vpkg-integration-sample"})})})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>s});var r=i(96540);const a={},d=r.createContext(a);function o(n){const e=r.useContext(d);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),r.createElement(d.Provider,{value:e},n.children)}}}]);
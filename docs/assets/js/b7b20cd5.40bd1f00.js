"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[60140],{63022:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=t(74848),r=t(28453);const s={},o="================\nWindow functions",a={id:"pollux/functions/presto/window",title:"window",description:"================",source:"@site/versioned_docs/version-1.1.1/pollux/functions/presto/window.mdx",sourceDirName:"pollux/functions/presto",slug:"/pollux/functions/presto/window",permalink:"/docs/pollux/functions/presto/window",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748143706e3,frontMatter:{},sidebar:"docs",previous:{title:"UUID Functions",permalink:"/docs/pollux/functions/presto/uuid"},next:{title:"URL Functions",permalink:"/docs/pollux/functions/presto/url"}},l={},d=[{value:"Understanding the window function definition",id:"understanding-the-window-function-definition",level:2},{value:"Ranking functions",id:"ranking-functions",level:2},{value:"Value functions",id:"value-functions",level:2},{value:"Aggregate functions",id:"aggregate-functions",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"window-functions",children:"================\nWindow functions"})}),"\n",(0,i.jsx)(n.p,{children:"Pollux window functions can be used to compute SQL window functions."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-window-function-definition",children:"Understanding the window function definition"}),"\n",(0,i.jsx)(n.p,{children:"Window functions operate over all the input rows."}),"\n",(0,i.jsx)(n.p,{children:"Each window function can be thought to operate with an OVER clause\nthat specifies how it is evaluated:"}),"\n",(0,i.jsx)(n.p,{children:".. code-block::"}),"\n",(0,i.jsx)(n.p,{children:"function(args) OVER (\n[PARTITION BY expression]\n[ORDER BY expression [ASC|DESC]]\n[frame]\n)"}),"\n",(0,i.jsx)(n.p,{children:"A frame is one of:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n   {RANGE|ROWS} frame_start\n   {RANGE|ROWS} BETWEEN frame_start AND frame_end\n"})}),"\n",(0,i.jsx)(n.p,{children:"frame_start and frame_end can be any of:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n   UNBOUNDED PRECEDING\n   expression PRECEDING  -- only allowed in ROWS mode\n   CURRENT ROW\n   expression FOLLOWING  -- only allowed in ROWS mode\n   UNBOUNDED FOLLOWING\n"})}),"\n",(0,i.jsx)(n.p,{children:"More details:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The PARTITION BY fields separate the input rows into different partitions."}),"\n",(0,i.jsx)(n.p,{children:"This is analogous to how the aggregate functions input is separated into different groups for evaluation.\nIf PARTITION BY fields are not specified, the entire input is treated as a single partition."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The ORDER BY fields determine the order in which input rows are processed by the window function."}),"\n",(0,i.jsx)(n.p,{children:"If ORDER BY fields are not specified, the ordering is undefined."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The frame clause specifies the sliding window of rows to be processed by the function for a given input row."}),"\n",(0,i.jsx)(n.p,{children:"A frame can be ROWS type or RANGE type, and it runs from frame_start to frame_end.\nIf frame_end is not specified, a default value of CURRENT ROW is used."}),"\n",(0,i.jsx)(n.p,{children:"In ROWS mode, CURRENT ROW refers to the current row."}),"\n",(0,i.jsx)(n.p,{children:"In RANGE mode, CURRENT ROW refers to any peer row of the current row.\nRows are peers if they have the same values for the ORDER BY fields.\nA frame start of CURRENT ROW refers to the first peer row of the current row,\nwhile a frame end of CURRENT ROW refers to the last peer row of the current row.\nIf no ORDER BY is specified, all rows are considered peers of the current row."}),"\n",(0,i.jsx)(n.p,{children:"If no frame is specified, a default frame of RANGE UNBOUNDED PRECEDING is used."}),"\n",(0,i.jsxs)(n.p,{children:["More details about window frames can be found at :doc:",(0,i.jsx)(n.code,{children:"/develop/window"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"SQL Example"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Window functions can be used to evaluate the following SQL query.\nThe query ranks orders for each clerk by price:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"\n   SELECT orderkey, clerk, totalprice,\n          rank() OVER (PARTITION BY clerk ORDER BY totalprice DESC) AS rnk\n   FROM orders ORDER BY clerk, rnk;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ranking-functions",children:"Ranking functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    cume_dist() -> bigint\n\nReturns the cumulative distribution of a value in a group of values. The result is the number of rows\npreceding or peer with the row in the window ordering of the window partition divided by the total\nnumber of rows in the window partition. Thus, any tie values in the ordering will evaluate to the same\ndistribution value.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    dense_rank() -> bigint\n\nReturns the rank of a value in a group of values. This is similar to rank(), except that tie values do\nnot produce gaps in the sequence.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    ntile(n) -> bigint\n\nDivides the rows for each window partition into n buckets ranging from 1 to at most ``n``. Bucket values\nwill differ by at most 1. If the number of rows in the partition does not divide evenly into the number\nof buckets, then the remainder values are distributed one per bucket, starting with the first bucket.\n\nFor example, with 6 rows and 4 buckets, the bucket values would be as follows: ``1 1 2 2 3 4``\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    percent_rank() -> double\n\nReturns the percentage ranking of a value in a group of values. The result is ``(r - 1) / (n - 1)`` where ``r``\nis the ``rank()`` of the row and ``n`` is the total number of rows in the window partition.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    rank() -> bigint\n\nReturns the rank of a value in a group of values. The rank is one plus the number of rows preceding the\nrow that are not peer with the row. Thus, the values in the ordering will produce gaps in the sequence.\nThe ranking is performed for each window partition.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    row_number() -> bigint\n\nReturns a unique, sequential number for each row, starting with one, according to the ordering of rows\nwithin the window partition.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"value-functions",children:"Value functions"}),"\n",(0,i.jsxs)(n.p,{children:["Value functions provide an option to specify how null values should be treated when evaluating the\nfunction. Nulls can either be ignored (",(0,i.jsx)(n.code,{children:"IGNORE NULLS"}),") or respected (",(0,i.jsx)(n.code,{children:"RESPECT NULLS"}),"). By default,\nnull values are respected. If ",(0,i.jsx)(n.code,{children:"IGNORE NULLS"})," is specified, all rows where the value expression is\nnull are excluded from the calculation. If ",(0,i.jsx)(n.code,{children:"IGNORE NULLS"})," is specified and the value expression is\nnull for all rows, the ",(0,i.jsx)(n.code,{children:"default_value"})," is returned, or if it is not specified, ",(0,i.jsx)(n.code,{children:"null"})," is returned."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    first_value(x) -> [same as input]\n\nReturns the first value of the window.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    last_value(x) -> [same as input]\n\nReturns the last value of the window.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    nth_value(x, offset) -> [same as input]\n\nReturns the value at the specified offset from the beginning of the window. Offsets start at 1. The offset\ncan be any scalar expression. If the offset is null or greater than the number of values in the window, null is\nreturned. It is an error for the offset to be zero or negative.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    lag(x[, offset[, default_value]]) -> [same as input]\n\nReturns the value at ``offset`` rows before the current row in the window partition.\nOffsets start at ``0``, which is the current row. The default ``offset`` is ``1``.\nThe offset can be a constant value or a column reference. If the offset is ``null``, ``null`` is\nreturned. If the offset refers to a row that is not within the partition, the\n``default_value`` is returned, or if ``default_value`` is not specified ``null``\nis returned.\n\nIf ``IGNORE NULLS`` is specified, ``null`` values are ignored during offset counting.\nIf not enough non-null values are found during offset counting, ``default_value``\nis returned.\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    lead(x[, offset[, default_value]]) -> [same as input]\n\nReturns the value at ``offset`` rows after the current row in the window partition.\nOffsets start at ``0``, which is the current row. The default ``offset`` is ``1``.\nThe offset can be a constant value or a column reference. If the offset is ``null``, ``null`` is\nreturned. If the offset refers to a row that is not within the partition, the\n``default_value`` is returned, or if ``default_value`` is not specified ``null``\nis returned.\n\nIf ``IGNORE NULLS`` is specified, ``null`` values are ignored during offset counting.\nIf not enough non-null values are found during offset counting, ``default_value``\nis returned.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"aggregate-functions",children:"Aggregate functions"}),"\n",(0,i.jsx)(n.p,{children:"All aggregate functions can be used as window functions by adding the OVER clause. The aggregate function is computed\nfor each row over the rows within the current row's window frame."})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
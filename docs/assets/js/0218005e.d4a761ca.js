"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[86372],{31021:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>t,metadata:()=>p,toc:()=>f});var i=s(74848),r=s(28453);const t={},a="IP Functions",p={id:"pollux/functions/presto/ipaddress",title:"IP Functions",description:"",source:"@site/versioned_docs/version-1.1.1/pollux/functions/presto/ipaddress.mdx",sourceDirName:"pollux/functions/presto",slug:"/pollux/functions/presto/ipaddress",permalink:"/docs/pollux/functions/presto/ipaddress",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748143706e3,frontMatter:{},sidebar:"docs",previous:{title:"Conversion Functions",permalink:"/docs/pollux/functions/presto/conversion"},next:{title:"HyperLogLog Functions",permalink:"/docs/pollux/functions/presto/hyperloglog"}},o={},f=[];function d(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ip-functions",children:"IP Functions"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    ip_prefix(ip_address, prefix_bits) -> ipprefix\n\n    Returns the IP prefix of a given ``ip_address`` with subnet size of ``prefix_bits``.\n    ``ip_address`` can be either of type ``VARCHAR`` or type ``IPADDRESS``. ::\n\n        SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n        SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    ip_subnet_min(ip_prefix) -> ip_address\n\n    Returns the smallest IP address of type ``IPADDRESS`` in the subnet\n    specified by ``ip_prefix``. ::\n\n        SELECT ip_subnet_min(IPPREFIX '192.168.255.255/9'); -- {192.128.0.0}\n        SELECT ip_subnet_min(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3::}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    ip_subnet_max(ip_prefix) -> ip_address\n\n    Returns the largest IP address of type ``IPADDRESS`` in the subnet\n    specified by ``ip_prefix``. ::\n\n        SELECT ip_subnet_max(IPPREFIX '192.64.0.0/9'); -- {192.127.255.255}\n        SELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3:ffff:ffff:ffff:ffff:ffff}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    ip_subnet_range(ip_prefix) -> array(ip_address)\n\n    Return an array of 2 IP addresses.\n    The array contains the smallest and the largest IP address\n    in the subnet specified by ``ip_prefix``. ::\n\n        SELECT ip_subnet_range(IPPREFIX '1.2.3.160/24'); -- [{1.2.3.0}, {1.2.3.255}]\n        SELECT ip_subnet_range(IPPREFIX '64:ff9b::52f4/120'); -- [{64:ff9b::5200}, {64:ff9b::52ff}]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    is_subnet_of(ip_prefix, ip_address) -> boolean\n\n    Returns ``true`` if the ``ip_address`` is in the subnet of ``ip_prefix``. ::\n\n        SELECT is_subnet_of(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.3.129'); -- true\n        SELECT is_subnet_of(IPPREFIX '64:fa9b::17/64', IPADDRESS '64:ffff::17'); -- false\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    is_subnet_of(ip_prefix1, ip_prefix2) -> boolean\n\n    Returns ``true`` if ``ip_prefix2`` is a subnet of ``ip_prefix1``. ::\n\n        SELECT is_subnet_of(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.144/30'); -- true\n        SELECT is_subnet_of(IPPREFIX '64:ff9b::17/64', IPPREFIX '64:ffff::17/64'); -- false\n        SELECT is_subnet_of(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.131/26'); -- true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    ip_prefix_collapse(array(ip_prefix)) -> array(ip_prefix)\n\n    Returns the minimal CIDR representation of the input ``IPPREFIX`` array. Every ``IPPREFIX``\n    in the input array must be the same IP version (that is, only IPv4 or only IPv6) or the\n    query will fail and raise an error. ::\n\n        SELECT IP_PREFIX_COLLAPSE(ARRAY[IPPREFIX '192.168.0.0/24', IPPREFIX '192.168.1.0/24']); -- [{192.168.0.0/23}]\n        SELECT IP_PREFIX_COLLAPSE(ARRAY[IPPREFIX '2620:10d:c090::/48', IPPREFIX '2620:10d:c091::/48']); -- [{2620:10d:c090::/47}]\n        SELECT IP_PREFIX_COLLAPSE(ARRAY[IPPREFIX '192.168.1.0/24', IPPREFIX '192.168.0.0/24', IPPREFIX '192.168.2.0/24', IPPREFIX '192.168.9.0/24']); -- [{192.168.0.0/23}, {192.168.2.0/24}, {192.168.9.0/24}]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    ip_prefix_subnets(ip_prefix, prefix_length) -> array(ip_prefix)\n\n    Returns the subnets of ``ip_prefix`` of size ``prefix_length``. ``prefix_length`` must be valid ([0, 32] for IPv4\n    and [0, 128] for IPv6) or the query will fail and raise an error. An empty array is returned if ``prefix_length``\n    is shorter (that is, less specific) than ``ip_prefix``. ::\n\n        SELECT IP_PREFIX_SUBNETS(IPPREFIX '192.168.1.0/24', 25); -- [{192.168.1.0/25}, {192.168.1.128/25}]\n        SELECT IP_PREFIX_SUBNETS(IPPREFIX '2a03:2880:c000::/34', 36); -- [{2a03:2880:c000::/36}, {2a03:2880:d000::/36}, {2a03:2880:e000::/36}, {2a03:2880:f000::/36}]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    is_private_ip(ip_address) -> boolean\n\n    Returns whether ``ip_address`` of type ``IPADDRESS`` is a private or reserved IP address\n    that is not considered globally reachable by IANA. For more information, see `IANA IPv4 Special-Purpose Address Registry <https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml>`_ and `IANA IPv6 Special-Purpose Address Registry <https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml>`_. `Null` inputs return `null`. ::\n\n        SELECT is_private_ip(IPADDRESS '10.0.0.1'); -- true\n        SELECT is_private_ip(IPADDRESS '192.168.0.1'); -- true\n        SELECT is_private_ip(IPADDRESS '157.240.200.99'); -- false\n        SELECT is_private_ip(IPADDRESS '2a03:2880:f031:12:face:b00c:0:2'); -- false\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>p});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);
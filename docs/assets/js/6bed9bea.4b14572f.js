"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[90059],{96986:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>a});var i=s(74848),d=s(28453);const l={},r="\u7d04\u5b9a",c={id:"cpp/alkaid/conventions",title:"\u7d04\u5b9a",description:"Alkaid C++ API \u9075\u5faa\u4e00\u4e9b\u7b80\u5355\u7684\u6307\u5bfc\u539f\u5219\u3002\u4e0e\u8bb8\u591a\u89c4\u5219\u4e00\u6837\uff0c",source:"@site/versioned_docs/version-1.1.1/cpp/alkaid/conventions.mdx",sourceDirName:"cpp/alkaid",slug:"/cpp/alkaid/conventions",permalink:"/docs/cpp/alkaid/conventions",draft:!1,unlisted:!1,tags:[],version:"1.1.1",frontMatter:{},sidebar:"docs",previous:{title:"\u5f00\u53d1\u8005\u6307\u5357",permalink:"/docs/cpp/alkaid/acero/developer_guide"},next:{title:"\u641c\u7d22\u5e94\u7528\u5f00\u53d1",permalink:"/docs/category/\u641c\u7d22\u5e94\u7528\u5f00\u53d1"}},t={},a=[{value:"\u8bed\u8a00\u7248\u672c",id:"\u8bed\u8a00\u7248\u672c",level:2},{value:"Namespacing",id:"namespacing",level:2},{value:"\u5b89\u5168\u6307\u9488",id:"\u5b89\u5168\u6307\u9488",level:2},{value:"\u4e0d\u53d8\u6027",id:"\u4e0d\u53d8\u6027",level:2},{value:"\u9519\u8bef\u62a5\u544a",id:"\u9519\u8bef\u62a5\u544a",level:2}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\u7d04\u5b9a",children:"\u7d04\u5b9a"})}),"\n",(0,i.jsx)(n.p,{children:"Alkaid C++ API \u9075\u5faa\u4e00\u4e9b\u7b80\u5355\u7684\u6307\u5bfc\u539f\u5219\u3002\u4e0e\u8bb8\u591a\u89c4\u5219\u4e00\u6837\uff0c\n\u4e5f\u53ef\u80fd\u5b58\u5728\u4f8b\u5916\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"\u8bed\u8a00\u7248\u672c",children:"\u8bed\u8a00\u7248\u672c"}),"\n",(0,i.jsx)(n.p,{children:"Alkaid C++ \u4e0e C++17 \u517c\u5bb9\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"namespacing",children:"Namespacing"}),"\n",(0,i.jsxs)(n.p,{children:["\u6240\u6709 Alkaid API\uff08\u5b8f\u9664\u5916\uff09\u5747\u5728",(0,i.jsx)(n.code,{children:"alkaid"}),"\u547d\u540d\u7a7a\u95f4\u53ca\u5176\u5d4c\u5957\u547d\u540d\u7a7a\u95f4\u5185\u8fdb\u884c\u547d\u540d\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"\u5b89\u5168\u6307\u9488",children:"\u5b89\u5168\u6307\u9488"}),"\n",(0,i.jsxs)(n.p,{children:["Alkaid \u5bf9\u8c61\u901a\u5e38\u4f7f\u7528\u5b89\u5168\u6307\u9488\u4f20\u9012\u548c\u5b58\u50a8 \u2014\u2014 \u5927\u591a\u6570\u65f6\u5019\u662f ",(0,i.jsx)(n.code,{children:"std::shared_ptr"}),"\uff0c\u4f46\u6709\u65f6\u4e5f\u662f ",(0,i.jsx)(n.code,{children:"std::unique_ptr"}),"\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"\u4e0d\u53d8\u6027",children:"\u4e0d\u53d8\u6027"}),"\n",(0,i.jsx)(n.p,{children:"\u8bb8\u591a Alkaid \u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff1a\u4e00\u65e6\u6784\u9020\uff0c\u5b83\u4eec\u7684\u903b\u8f91\n\u5c5e\u6027\u5c31\u4e0d\u80fd\u518d\u6539\u53d8\u3002\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u5728\n\u591a\u7ebf\u7a0b\u573a\u666f\u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u800c\u65e0\u9700\u7e41\u7410\u4e14\u5bb9\u6613\u51fa\u9519\u7684\n\u540c\u6b65\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u6709\u660e\u663e\u7684\u4f8b\u5916\uff0c\u4f8b\u5982 IO \u5bf9\u8c61\u6216\u53ef\u53d8\u6570\u636e\n\u7f13\u51b2\u533a\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"\u9519\u8bef\u62a5\u544a",children:"\u9519\u8bef\u62a5\u544a"}),"\n",(0,i.jsxs)(n.p,{children:["\u5927\u591a\u6570 API \u901a\u8fc7\u8fd4\u56de\n",(0,i.jsx)(n.code,{children:"turbo::Status"})," \u5b9e\u4f8b\u6765\u6307\u793a\u6210\u529f\u6216\u9519\u8bef\u7ed3\u679c\u3002Alkaid \u4e0d\u4f1a\u629b\u51fa\u81ea\u5df1\u7684\u5f02\u5e38\uff0c\u4f46\u7b2c\u4e09\u65b9\u5f02\u5e38\u53ef\u80fd\u4f1a\u4f20\u64ad\uff0c\u5c24\u5176\u662f\n",(0,i.jsx)(n.code,{children:"std::bad_alloc"}),"\uff08\u4f46 Alkaid \u4e0d\u4f7f\u7528\u6807\u51c6\u5206\u914d\u5668\u6765\u5904\u7406\u5927\u6570\u636e\uff09\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u5f53 API \u53ef\u4ee5\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u6216\u6210\u529f\u503c\u65f6\uff0c\u5b83\u901a\u5e38\u901a\u8fc7\u8fd4\u56de\u6a21\u677f\u7c7b\n",(0,i.jsx)(n.code,{children:"alkaid::Result <template\\<class T\\> alkaid::Result>"})," \u6765\u5b9e\u73b0\u3002\u4f46\u662f\uff0c\u67d0\u4e9b API\uff08\u901a\u5e38\u5df2\u5f03\u7528\uff09\u4f1a\u8fd4\u56de ",(0,i.jsx)(n.code,{children:"alkaid::Status"})," \u5e76\u5c06\u7ed3\u679c\u503c\u4f5c\u4e3a\u8f93\u51fa\u6307\u9488\u53c2\u6570\u4f20\u9012\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5\u4e0b\u662f\u68c0\u67e5\u64cd\u4f5c\u7ed3\u679c\u7684\u793a\u4f8b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    const int64_t buffer_size = 4096;\n\n    auto maybe_buffer = alkaid::AllocateBuffer(buffer_size, &buffer);\n    if (!maybe_buffer.ok()) {\n       // ... handle error\n    } else {\n       std::shared_ptr<alkaid::Buffer> buffer = *maybe_buffer;\n       // ... use allocated buffer\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u5982\u679c\u8c03\u7528\u51fd\u6570\u672c\u8eab\u8fd4\u56de ",(0,i.jsx)(n.code,{children:"turbo::Result"})," \u6216\n",(0,i.jsx)(n.code,{children:"turbo::Status"})," \u5e76\u5e0c\u671b\u4f20\u64ad\u4efb\u4f55\u4e0d\u6210\u529f\u7684\u7ed3\u679c\uff0c\u5219\u6709\u4e24\u4e2a\n\u4fbf\u5229\u5b8f\u53ef\u7528\uff1a"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[":",(0,i.jsx)(n.code,{children:"TURBO_RETURN_NOT_OK"})," \u63a5\u53d7 ",(0,i.jsx)(n.code,{children:"turbo::Status"})," \u53c2\u6570\uff0c\n\u5982\u679c\u5931\u8d25\u5219\u8fd4\u56de\u8be5\u53c2\u6570\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TURBO_MOVE_OR_RAISE"})," \u63a5\u53d7 ",(0,i.jsx)(n.code,{children:"turbo::Result"})," \u53c2\u6570\uff0c\n\u5982\u679c\u6210\u529f\u5219\u5c06\u5176\u7ed3\u679c\u5206\u914d\u7ed9 ",(0,i.jsx)(n.em,{children:"lvalue"}),"\uff0c\u6216\u8005\u5728\u51fa\u9519\u65f6\u8fd4\u56de\n\u76f8\u5e94\u7684 ",(0,i.jsx)(n.code,{children:"turbo::Status"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u4f8b\u5982\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"    alkaid::Status DoSomething() {\n       const int64_t buffer_size = 4096;\n       std::shared_ptr<alkaid::Buffer> buffer;\n       ARROW_ASSIGN_OR_RAISE(buffer, alkaid::AllocateBuffer(buffer_size));\n       // ... allocation successful, do something with buffer below\n\n       // return success at the end\n       return Status::OK();\n    }\n"})})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(96540);const d={},l=i.createContext(d);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);
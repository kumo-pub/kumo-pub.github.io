"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[45138],{79707:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=l(74848),t=l(28453);const i={},d="\u6307\u6807",s={id:"cpp/tally/metrics",title:"\u6307\u6807",description:"\u672c\u8282\u4ecb\u7ecd\u53ef\u6536\u96c6prometheus\u53ef\u6536\u96c6\u76d1\u63a7\u6307\u6807\uff0cCounter,Gauge,histogram\u3002",source:"@site/versioned_docs/version-1.1.1/cpp/tally/metrics.mdx",sourceDirName:"cpp/tally",slug:"/cpp/tally/metrics",permalink:"/docs/cpp/tally/metrics",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748081772e3,frontMatter:{},sidebar:"docs",previous:{title:"\u53d8\u91cf Variable",permalink:"/docs/cpp/tally/var"},next:{title:"\u7cfb\u7edf\u76d1\u63a7",permalink:"/docs/cpp/tally/sys"}},r={},o=[{value:"tally::Counter",id:"tallycounter",level:2},{value:"tally::MaxerGauge",id:"tallymaxergauge",level:2},{value:"tally::MinerGauge",id:"tallyminergauge",level:2},{value:"tally::AverageGauge",id:"tallyaveragegauge",level:2},{value:"tally::LatencyRecorder",id:"tallylatencyrecorder",level:2},{value:"tally::Window",id:"tallywindow",level:2},{value:"How to use tally::Window",id:"how-to-use-tallywindow",level:3},{value:"tally::PerSecond",id:"tallypersecond",level:2},{value:"Difference with Window",id:"difference-with-window",level:3},{value:"tally::WindowEx",id:"tallywindowex",level:2},{value:"How to use tally::WindowEx",id:"how-to-use-tallywindowex",level:3},{value:"Difference between tally::WindowEx and tally::Window",id:"difference-between-tallywindowex-and-tallywindow",level:3},{value:"tally::PerSecondEx",id:"tallypersecondex",level:2},{value:"How to use tally::PerSecondEx",id:"how-to-use-tallypersecondex",level:3},{value:"Difference between tally::PerSecondEx and tally::WindowEx",id:"difference-between-tallypersecondex-and-tallywindowex",level:3},{value:"Difference between tally::PerSecondEx and tally::PerSecond",id:"difference-between-tallypersecondex-and-tallypersecond",level:3},{value:"tally::Status",id:"tallystatus",level:2},{value:"tally::FuncGauge",id:"tallyfuncgauge",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\u6307\u6807",children:"\u6307\u6807"})}),"\n",(0,a.jsxs)(n.p,{children:["\u672c\u8282\u4ecb\u7ecd\u53ef\u6536\u96c6",(0,a.jsx)(n.code,{children:"prometheus"}),"\u53ef\u6536\u96c6\u76d1\u63a7\u6307\u6807\uff0c",(0,a.jsx)(n.code,{children:"Counter"}),",",(0,a.jsx)(n.code,{children:"Gauge"}),",",(0,a.jsx)(n.code,{children:"histogram"}),"\u3002"]}),"\n",(0,a.jsx)(n.h2,{id:"tallycounter",children:"tally::Counter"}),"\n",(0,a.jsx)(n.p,{children:"\u987e\u540d\u601d\u4e49\uff0c\u7528\u4e8e\u7d2f\u52a0\uff0cOp\u4e3a+\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"tally::Counter<int> value;\nvalue << 1 << 2 << 3 << -4;\nCHECK_EQ(2, value.get_value());\n\ntally::Counter<double> fp_value;  // \u53ef\u80fd\u6709warning\nfp_value << 1.0 << 2.0 << 3.0 << -4.0;\nCHECK_DOUBLE_EQ(2.0, fp_value.get_value());\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Counter<>"}),"\u53ef\u7528\u4e8e\u975e\u57fa\u672c\u7c7b\u578b\uff0c\u5bf9\u5e94\u7684\u7c7b\u578b\u81f3\u5c11\u8981\u91cd\u8f7d",(0,a.jsx)(n.code,{children:"T operator+(T, T)"}),"\u3002\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u4f8b\u5b50\u662fstd::string\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u628astring\u62fc\u63a5\u8d77\u6765\uff1a"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:'// This is just proof-of-concept, don\'t use it for production code because it makes a\n// bunch of temporary strings which is not efficient, use std::ostringstream instead.\ntally::Counter<std::string> concater;\nstd::string str1 = "world";\nconcater << "hello " << str1;\nCHECK_EQ("hello world", concater.get_value());\n'})}),"\n",(0,a.jsx)(n.h2,{id:"tallymaxergauge",children:"tally::MaxerGauge"}),"\n",(0,a.jsx)(n.p,{children:"\u7528\u4e8e\u53d6\u6700\u5927\u503c\uff0c\u8fd0\u7b97\u7b26\u4e3astd::max\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"tally::MaxerGauge<int> value;\nvalue << 1 << 2 << 3 << -4;\nCHECK_EQ(3, value.get_value());\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Since MaxerGauge<>"})," use ",(0,a.jsx)(n.code,{children:"std::numeric_limits<T>::min()"})," as the identity, it cannot be applied to generic types unless you specialized ",(0,a.jsx)(n.code,{children:"std::numeric_limits<>"})," (and overloaded ",(0,a.jsx)(n.code,{children:"operator<"}),", yes, not ",(0,a.jsx)(n.code,{children:"operator>"}),")."]}),"\n",(0,a.jsx)(n.h2,{id:"tallyminergauge",children:"tally::MinerGauge"}),"\n",(0,a.jsx)(n.p,{children:"\u7528\u4e8e\u53d6\u6700\u5c0f\u503c\uff0c\u8fd0\u7b97\u7b26\u4e3astd::min\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"tally::MaxerGauge<int> value;\nvalue << 1 << 2 << 3 << -4;\nCHECK_EQ(-4, value.get_value());\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Since ",(0,a.jsx)(n.code,{children:"MinerGauge<>"})," use ",(0,a.jsx)(n.code,{children:"std::numeric_limits<T>::max()"})," as the identity, it cannot be applied to generic types unless you specialized ",(0,a.jsx)(n.code,{children:"std::numeric_limits<>"})," (and overloaded ",(0,a.jsx)(n.code,{children:"operator<"}),")."]}),"\n",(0,a.jsx)(n.h2,{id:"tallyaveragegauge",children:"tally::AverageGauge"}),"\n",(0,a.jsx)(n.p,{children:"\u7528\u4e8e\u8ba1\u7b97\u5e73\u5747\u503c\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"// For calculating average of numbers.\n// Example:\n//   AverageGauge latency;\n//   latency << 1 << 3 << 5;\n//   CHECK_EQ(3, latency.average());\nclass AverageGauge : public Variable;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"tallylatencyrecorder",children:"tally::LatencyRecorder"}),"\n",(0,a.jsx)(n.p,{children:"\u4e13\u7528\u4e8e\u8ba1\u7b97latency\u548cqps\u7684\u8ba1\u6570\u5668\u3002\u53ea\u9700\u586b\u5165latency\u6570\u636e\uff0c\u5c31\u80fd\u83b7\u5f97latency / max_latency / qps / count\u3002\u7edf\u8ba1\u7a97\u53e3\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff0c\u4e0d\u586b\u4e3atally_dump_interval\uff08\u8fd9\u91cc\u6ca1\u586b\uff09\u3002"}),"\n",(0,a.jsxs)(n.p,{children:["\u6ce8\u610f\uff1aLatencyRecorder\u6ca1\u6709\u7ee7\u627fVariable\uff0c\u800c\u662f\u591a\u4e2a",(0,a.jsx)(n.code,{children:"tally"}),"\u7684\u7ec4\u5408\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:'LatencyRecorder write_latency("table2_my_table_write");  // produces 4 variables:\n                                                         //   table2_my_table_write_latency\n                                                         //   table2_my_table_write_max_latency\n                                                         //   table2_my_table_write_qps\n                                                         //   table2_my_table_write_count\n// In your write function\nwrite_latency << the_latency_of_write;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"tallywindow",children:"tally::Window"}),"\n",(0,a.jsx)(n.p,{children:"\u83b7\u5f97\u4e4b\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u7edf\u8ba1\u503c\u3002Window\u4e0d\u80fd\u72ec\u7acb\u5b58\u5728\uff0c\u5fc5\u987b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u5df2\u6709\u7684\u8ba1\u6570\u5668\u3002Window\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u4e0d\u7528\u7ed9\u5b83\u53d1\u9001\u6570\u636e\u3002\u51fa\u4e8e\u6027\u80fd\u8003\u8651\uff0cWindow\u7684\u6570\u636e\u6765\u81ea\u4e8e\u6bcf\u79d2\u4e00\u6b21\u5bf9\u539f\u8ba1\u6570\u5668\u7684\u91c7\u6837\uff0c\u5728\u6700\u5dee\u60c5\u51b5\u4e0b\uff0cWindow\u7684\u8fd4\u56de\u503c\u67091\u79d2\u7684\u5ef6\u65f6\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"// Get data within a time window.\n// The time unit is 1 second fixed.\n// Window relies on other tally which should be constructed before this window and destructs after this window.\n// R must:\n// - have get_sampler() (not require thread-safe)\n// - defined value_type and sampler_type\ntemplate <typename R>\nclass Window : public Variable;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"how-to-use-tallywindow",children:"How to use tally::Window"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"tally::Counter<int> sum;\ntally::MaxerGauge<int> max_value;\ntally::IntRecorder avg_value;\n\n// sum_minute.get_value()\u662fsum\u5728\u4e4b\u524d60\u79d2\u5185\u7684\u7d2f\u52a0\u503c\u3002\ntally::Window<tally::Counter<int> > sum_minute(&sum, 60);\n\n// max_value_minute.get_value()\u662fmax_value\u5728\u4e4b\u524d60\u79d2\u5185\u7684\u6700\u5927\u503c\u3002\ntally::Window<tally::MaxerGauge<int> > max_value_minute(&max_value, 60);\n\n// avg_value_minute.get_value()\u662favg_value\u5728\u4e4b\u524d60\u79d2\u5185\u7684\u5e73\u5747\u503c\u3002\ntally::Window<IntRecorder> avg_value_minute(&avg_value, 60);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"tallypersecond",children:"tally::PerSecond"}),"\n",(0,a.jsx)(n.p,{children:"\u83b7\u5f97\u4e4b\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u5e73\u5747\u6bcf\u79d2\u7684\u7edf\u8ba1\u503c\u3002\u5b83\u548cWindow\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u8fd4\u56de\u503c\u4f1a\u9664\u4ee5\u65f6\u95f4\u7a97\u53e3\u4e4b\u5916\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"tally::Counter<int> sum;\n\n// sum_per_second.get_value()\u662fsum\u5728\u4e4b\u524d60\u79d2\u5185*\u5e73\u5747\u6bcf\u79d2*\u7684\u7d2f\u52a0\u503c\uff0c\u7701\u7565\u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u7a97\u53e3\u7684\u8bdd\u9ed8\u8ba4\u4e3atally_dump_interval\u3002\ntally::PerSecond<tally::Counter<int> > sum_per_second(&sum, 60);\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"PerSecond\u5e76\u4e0d\u603b\u662f\u6709\u610f\u4e49"})}),"\n",(0,a.jsx)(n.p,{children:"\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6ca1\u6709MaxerGauge\uff0c\u56e0\u4e3a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u6700\u5927\u503c\u9664\u4ee5\u65f6\u95f4\u7a97\u53e3\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"tally::MaxerGauge<int> max_value;\n\n// \u9519\u8bef\uff01\u6700\u5927\u503c\u9664\u4ee5\u65f6\u95f4\u662f\u6ca1\u6709\u610f\u4e49\u7684\ntally::PerSecond<tally::MaxerGauge<int> > max_value_per_second_wrong(&max_value);\n\n// \u6b63\u786e\uff0c\u628aWindow\u7684\u65f6\u95f4\u7a97\u53e3\u8bbe\u4e3a1\u79d2\u624d\u662f\u6b63\u786e\u7684\u505a\u6cd5\ntally::Window<tally::MaxerGauge<int> > max_value_per_second(&max_value, 1);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"difference-with-window",children:"Difference with Window"}),"\n",(0,a.jsxs)(n.p,{children:["\u6bd4\u5982\u8981\u7edf\u8ba1\u5185\u5b58\u5728\u4e0a\u4e00\u5206\u949f\u5185\u7684\u53d8\u5316\uff0c\u7528",(0,a.jsx)(n.code,{children:"Window<>"}),"\u7684\u8bdd\uff0c\u8fd4\u56de\u503c\u7684\u542b\u4e49\u662f\u201d\u4e0a\u4e00\u5206\u949f\u5185\u5b58\u589e\u52a0\u4e8618M\u201d\uff0c\u7528",(0,a.jsx)(n.code,{children:"PerSecond<>"}),"\u7684\u8bdd\uff0c\u8fd4\u56de\u503c\u7684\u542b\u4e49\u662f\u201c\u4e0a\u4e00\u5206\u949f\u5e73\u5747\u6bcf\u79d2\u589e\u52a0\u4e860.3M\u201d\u3002"]}),"\n",(0,a.jsx)(n.p,{children:'Window\u7684\u4f18\u70b9\u662f\u7cbe\u786e\u503c\uff0c\u9002\u5408\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u91cf\uff0c\u6bd4\u5982\u201c\u4e0a\u4e00\u5206\u949f\u7684\u9519\u8bef\u6570\u201c\uff0c\u5982\u679c\u8fd9\u7528PerSecond\u7684\u8bdd\uff0c\u5f97\u5230\u53ef\u80fd\u662f\u201d\u4e0a\u4e00\u5206\u949f\u5e73\u5747\u6bcf\u79d2\u4ea7\u751f\u4e860.0167\u4e2a\u9519\u8bef"\uff0c\u8fd9\u76f8\u6bd4\u4e8e\u201d\u4e0a\u4e00\u5206\u949f\u67091\u4e2a\u9519\u8bef\u201c\u663e\u7136\u4e0d\u591f\u6e05\u6670\u3002\u53e6\u5916\u4e00\u4e9b\u548c\u65f6\u95f4\u65e0\u5173\u7684\u91cf\u4e5f\u8981\u7528Window\uff0c\u6bd4\u5982\u7edf\u8ba1\u4e0a\u4e00\u5206\u949fcpu\u5360\u7528\u7387\u7684\u65b9\u6cd5\u662f\u7528\u4e00\u4e2aCounter\u540c\u65f6\u7d2f\u52a0cpu\u65f6\u95f4\u548c\u771f\u5b9e\u65f6\u95f4\uff0c\u7136\u540e\u7528Window\u83b7\u5f97\u4e0a\u4e00\u5206\u949f\u7684cpu\u65f6\u95f4\u548c\u771f\u5b9e\u65f6\u95f4\uff0c\u4e24\u8005\u76f8\u9664\u5c31\u5f97\u5230\u4e86\u4e0a\u4e00\u5206\u949f\u7684cpu\u5360\u7528\u7387\uff0c\u8fd9\u548c\u65f6\u95f4\u65e0\u5173\uff0c\u7528PerSecond\u4f1a\u4ea7\u751f\u9519\u8bef\u7684\u7ed3\u679c\u3002'}),"\n",(0,a.jsx)(n.h2,{id:"tallywindowex",children:"tally::WindowEx"}),"\n",(0,a.jsx)(n.p,{children:"\u83b7\u5f97\u4e4b\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u7edf\u8ba1\u503c\u3002WindowEx\u662f\u72ec\u7acb\u5b58\u5728\u7684\uff0c\u4e0d\u4f9d\u8d56\u5176\u4ed6\u7684\u8ba1\u6570\u5668\uff0c\u9700\u8981\u7ed9\u5b83\u53d1\u9001\u6570\u636e\u3002\u51fa\u4e8e\u6027\u80fd\u8003\u8651\uff0cWindowEx\u6bcf\u79d2\u5bf9\u6570\u636e\u505a\u4e00\u6b21\u7edf\u8ba1\uff0c\u5728\u6700\u5dee\u60c5\u51b5\u4e0b\uff0cWindowEx\u7684\u8fd4\u56de\u503c\u67091\u79d2\u7684\u5ef6\u65f6\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"// Get data within a time window.\n// The time unit is 1 second fixed.\n// Window not relies on other tally.\n\n// R must:\n// - window_size must be a constant\ntemplate <typename R, time_t window_size = 0>\nclass WindowEx : public adapter::WindowExAdapter<R, adapter::WindowExType<R> > {\npublic:\n    typedef adapter::WindowExAdapter<R, adapter::WindowExType<R> > Base;\n\n    WindowEx() : Base(window_size) {}\n\n    WindowEx(const base::StringPiece& name) : Base(window_size) {\n        this->expose(name);\n    }\n\n    WindowEx(const base::StringPiece& prefix,\n             const base::StringPiece& name)\n        : Base(window_size) {\n        this->expose_as(prefix, name);\n    }\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"how-to-use-tallywindowex",children:"How to use tally::WindowEx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:'const int window_size = 60;\n\n// sum_minute.get_value()\u662f60\u79d2\u5185\u7684\u7d2f\u52a0\u503c\uff0c\u7701\u7565\u6700\u540e\u4e00\u4e2awindow_size(\u65f6\u95f4\u7a97\u53e3)\u7684\u8bdd\u9ed8\u8ba4\u4e3atally_dump_interval\u3002\ntally::WindowEx<tally::Counter<int>, window_size> sum_minute("sum_minute");\nsum_minute << 1 << 2 << 3;\n\n// max_minute.get_value()\u662f60\u79d2\u5185\u7684\u6700\u5927\u503c\uff0c\u7701\u7565\u6700\u540e\u4e00\u4e2awindow_size(\u65f6\u95f4\u7a97\u53e3)\u7684\u8bdd\u9ed8\u8ba4\u4e3atally_dump_interval\u3002\ntally::WindowEx<tally::MaxerGauge<int>, window_size> max_minute("max_minute");\nmax_minute << 1 << 2 << 3;\n\n// min_minute.get_value()\u662f60\u79d2\u5185\u7684\u6700\u5c0f\u503c\uff0c\u7701\u7565\u6700\u540e\u4e00\u4e2awindow_size(\u65f6\u95f4\u7a97\u53e3)\u7684\u8bdd\u9ed8\u8ba4\u4e3atally_dump_interval\u3002\ntally::WindowEx<tally::MinerGauge<int>, window_size> min_minute("min_minute");\nmin_minute << 1 << 2 << 3;\n\n// avg_minute.get_value\u662f60\u79d2\u5185\u7684\u5e73\u5747\u503c(\u8fd4\u56de\u503c\u662ftally::Stat)\uff0c\u7701\u7565\u6700\u540e\u4e00\u4e2awindow_size(\u65f6\u95f4\u7a97\u53e3)\u7684\u8bdd\u9ed8\u8ba4\u4e3atally_dump_interval\u3002\ntally::WindowEx<tally::IntRecorder, window_size> avg_minute("avg_minute");\navg_minute << 1 << 2 << 3;\n// \u83b7\u5f97avg_minuter 60\u79d2\u5185\u7684\u5e73\u5747\u503cstat\ntally::Stat avg_stat = avg_minute.get_value();\n// \u83b7\u5f97\u6574\u578b\u5e73\u5747\u503c\nint64_t avg_int = avg_stat.get_average_int();\n// \u83b7\u5f97double\u7c7b\u578b\u5e73\u5747\u503c\ndouble avg_double = avg_stat.get_average_double();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"difference-between-tallywindowex-and-tallywindow",children:"Difference between tally::WindowEx and tally::Window"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"tally::Window \u4e0d\u80fd\u72ec\u7acb\u5b58\u5728\uff0c\u5fc5\u987b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u5df2\u6709\u7684\u8ba1\u6570\u5668\u3002Window\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u4e0d\u7528\u7ed9\u5b83\u53d1\u9001\u6570\u636e\uff1bwindow_size\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u53c2\u6570\u4f20\u9012\u7684\u3002"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"tally::WindowEx \u662f\u72ec\u7acb\u5b58\u5728\u7684\uff0c\u4e0d\u4f9d\u8d56\u5176\u4ed6\u7684\u8ba1\u6570\u5668\uff0c\u9700\u8981\u7ed9\u5b83\u53d1\u9001\u6570\u636e\u3002\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf\uff1bwindow_size\u662f\u901a\u8fc7\u6a21\u677f\u53c2\u6570\u4f20\u9012\u7684\uff0c\u7701\u7565\u6700\u540e\u4e00\u4e2awindow_size(\u65f6\u95f4\u7a97\u53e3)\u7684\u8bdd\u9ed8\u8ba4\u4e3atally_dump_interval\u3002"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"tallypersecondex",children:"tally::PerSecondEx"}),"\n",(0,a.jsx)(n.p,{children:"\u83b7\u5f97\u4e4b\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u5e73\u5747\u6bcf\u79d2\u7684\u7edf\u8ba1\u503c\u3002\u5b83\u548cWindowEx\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u8fd4\u56de\u503c\u4f1a\u9664\u4ee5\u65f6\u95f4\u7a97\u53e3\u4e4b\u5916\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:"// Get data per second within a time window.\n// The only difference between PerSecondEx and WindowEx is that PerSecondEx divides\n// the data by time duration.\n\n// R must:\n// - window_size must be a constant\ntemplate <typename R, time_t window_size = 0>\nclass PerSecondEx : public adapter::WindowExAdapter<R, adapter::PerSecondExType<R> > {\npublic:\n    typedef adapter::WindowExAdapter<R, adapter::PerSecondExType<R> > Base;\n\n    PerSecondEx() : Base(window_size) {}\n\n    PerSecondEx(const base::StringPiece& name) : Base(window_size) {\n        this->expose(name);\n    }\n\n    PerSecondEx(const base::StringPiece& prefix,\n                const base::StringPiece& name)\n        : Base(window_size) {\n        this->expose_as(prefix, name);\n    }\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"how-to-use-tallypersecondex",children:"How to use tally::PerSecondEx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:'const int window_size = 60;\n\n// sum_per_second.get_value()\u662f60\u79d2\u5185*\u5e73\u5747\u6bcf\u79d2*\u7684\u7d2f\u52a0\u503c\uff0c\u7701\u7565\u6700\u540e\u4e00\u4e2awindow_size(\u65f6\u95f4\u7a97\u53e3)\u7684\u8bdd\u9ed8\u8ba4\u4e3atally_dump_interval\u3002\ntally::PerSecondEx<tally::Counter<int>, window_size> sum_per_second("sum_per_second");\nsum_per_second << 1 << 2 << 3;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"difference-between-tallypersecondex-and-tallywindowex",children:"Difference between tally::PerSecondEx and tally::WindowEx"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"tally::PerSecondEx \u83b7\u5f97\u4e4b\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u5e73\u5747\u6bcf\u79d2\u7684\u7edf\u8ba1\u503c\u3002\u5b83\u548cWindowEx\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u8fd4\u56de\u503c\u4f1a\u9664\u4ee5\u65f6\u95f4\u7a97\u53e3\u4e4b\u5916\u3002"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"difference-between-tallypersecondex-and-tallypersecond",children:"Difference between tally::PerSecondEx and tally::PerSecond"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"tally::PerSecond \u4e0d\u80fd\u72ec\u7acb\u5b58\u5728\uff0c\u5fc5\u987b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u5df2\u6709\u7684\u8ba1\u6570\u5668\u3002PerSecond\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u4e0d\u7528\u7ed9\u5b83\u53d1\u9001\u6570\u636e\uff1bwindow_size\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u53c2\u6570\u4f20\u9012\u7684\u3002"}),"\n",(0,a.jsx)(n.li,{children:"tally::PerSecondEx \u662f\u72ec\u7acb\u5b58\u5728\u7684\uff0c\u4e0d\u4f9d\u8d56\u5176\u4ed6\u7684\u8ba1\u6570\u5668\uff0c\u9700\u8981\u7ed9\u5b83\u53d1\u9001\u6570\u636e\u3002\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf\uff1bwindow_size\u662f\u901a\u8fc7\u6a21\u677f\u53c2\u6570\u4f20\u9012\u7684\uff0c\u7701\u7565\u6700\u540e\u4e00\u4e2awindow_size(\u65f6\u95f4\u7a97\u53e3)\u7684\u8bdd\u9ed8\u8ba4\u4e3atally_dump_interval\u3002"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"tallystatus",children:"tally::Status"}),"\n",(0,a.jsx)(n.p,{children:"\u8bb0\u5f55\u548c\u663e\u793a\u4e00\u4e2a\u503c\uff0c\u62e5\u6709\u989d\u5916\u7684set_value\u51fd\u6570\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:'// Display a rarely or periodically updated value.\n// Usage:\n//   tally::Status<int> foo_count1(17);\n//   foo_count1.expose("my_value");\n//\n//   tally::Status<int> foo_count2;\n//   foo_count2.set_value(17);\n//\n//   tally::Status<int> foo_count3("my_value", 17);\n//\n// Notice that Tp needs to be std::string or acceptable by boost::atomic<Tp>.\ntemplate <typename Tp>\nclass Status : public Variable;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"tallyfuncgauge",children:"tally::FuncGauge"}),"\n",(0,a.jsx)(n.p,{children:"\u6309\u9700\u663e\u793a\u503c\u3002\u5728\u4e00\u4e9b\u573a\u5408\u4e2d\uff0c\u6211\u4eec\u65e0\u6cd5set_value\u6216\u4e0d\u77e5\u9053\u4ee5\u4f55\u79cd\u9891\u7387set_value\uff0c\u66f4\u9002\u5408\u7684\u65b9\u5f0f\u4e5f\u8bb8\u662f\u5f53\u9700\u8981\u663e\u793a\u65f6\u624d\u6253\u5370\u3002\u7528\u6237\u4f20\u5165\u6253\u5370\u56de\u8c03\u51fd\u6570\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:'// Display a updated-by-need value. This is done by passing in an user callback\n// which is called to produce the value.\n// Example:\n//   int print_number(void* arg) {\n//      ...\n//      return 5;\n//   }\n//\n//   // number1 : 5\n//   tally::FuncGauge status1("number1", print_number, arg);\n//\n//   // foo_number2 : 5\n//   tally::FuncGauge status2(typeid(Foo), "number2", print_number, arg);\ntemplate <typename Tp>\nclass FuncGauge : public Variable;\n'})}),"\n",(0,a.jsxs)(n.p,{children:["\u867d\u7136\u5f88\u7b80\u5355\uff0c\u4f46FuncGauges\u662f\u6700\u6709\u7528\u7684",(0,a.jsx)(n.code,{children:"tally"}),"\u4e4b\u4e00\uff0c\u56e0\u4e3a\u5f88\u591a\u7edf\u8ba1\u91cf\u5df2\u7ecf\u5b58\u5728\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u518d\u6b21\u5b58\u50a8\u5b83\u4eec\uff0c\u800c\u53ea\u8981\u6309\u9700\u83b7\u53d6\u3002\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u58f0\u660e\u4e86\u4e00\u4e2a\u5728linux\u4e0b\u663e\u793a\u8fdb\u7a0b\u7528\u6237\u540d\u7684",(0,a.jsx)(n.code,{children:"tally"}),"\uff1a"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:'static void get_username(std::ostream& os, void*) {\n    char buf[32];\n    if (getlogin_r(buf, sizeof(buf)) == 0) {\n        buf[sizeof(buf)-1] = \'\\0\';\n        os << buf;\n    } else {\n        os << "unknown";\n    }\n}\nPassiveStatus<std::string> g_username("process_username", get_username, NULL);\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>d,x:()=>s});var a=l(96540);const t={},i=a.createContext(t);function d(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[12733],{34994:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>o});var a=r(74848),d=r(28453);const t={},s="JSON format",i={id:"cpp/alkaid/json",title:"JSON format",description:"\u8bfb\u53d6 JSON \u6587\u4ef6",source:"@site/versioned_docs/version-1.1.1/cpp/alkaid/json.mdx",sourceDirName:"cpp/alkaid",slug:"/cpp/alkaid/json",permalink:"/docs/cpp/alkaid/json",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748081772e3,frontMatter:{},sidebar:"docs",previous:{title:"IPC format",permalink:"/docs/cpp/alkaid/ipc"},next:{title:"CSV format",permalink:"/docs/cpp/alkaid/csv"}},l={},o=[{value:"\u8bfb\u53d6 JSON \u6587\u4ef6",id:"\u8bfb\u53d6-json-\u6587\u4ef6",level:2},{value:"TableReader",id:"tablereader",level:3},{value:"StreamingReader",id:"streamingreader",level:3},{value:"\u6570\u636e\u7c7b\u578b",id:"\u6570\u636e\u7c7b\u578b",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"json-format",children:"JSON format"})}),"\n",(0,a.jsx)(n.h2,{id:"\u8bfb\u53d6-json-\u6587\u4ef6",children:"\u8bfb\u53d6 JSON \u6587\u4ef6"}),"\n",(0,a.jsxs)(n.p,{children:["\u884c\u5206\u9694\u7684 JSON \u6587\u4ef6\u65e2\u53ef\u4ee5\u7528 ",(0,a.jsx)(n.code,{children:"~TableReader"})," \u8bfb\u53d6\u4e3a\u5355\u4e2a Alkaid \u8868\uff0c\u4e5f\u53ef\u4ee5\u7528 ",(0,a.jsx)(n.code,{children:"~StreamingReader"})," \u6d41\u5f0f\u4f20\u8f93\u4e3a RecordBatches\u3002"]}),"\n",(0,a.jsxs)(n.p,{children:["\u8fd9\u4e24\u4e2a\u8bfb\u53d6\u5668\u90fd\u9700\u8981\u4e00\u4e2a\u8868\u793a\u8f93\u5165\u6587\u4ef6\u7684 ",(0,a.jsx)(n.code,{children:"alkaid::io::InputStream"})," \u5b9e\u4f8b\u3002\u5b83\u4eec\u7684\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7 ",(0,a.jsx)(n.code,{children:"~ReadOptions"}),"\u3001",(0,a.jsx)(n.code,{children:"~ParseOptions"})," \u548c\n\u5176\u4ed6\u53c2\u6570\u7684\u7ec4\u5408\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002",(0,a.jsx)(n.code,{children:"JSON \u8bfb\u53d6\u5668 API \u53c2\u8003 <cpp-api-json>"}),"\u3002"]}),"\n",(0,a.jsx)(n.h3,{id:"tablereader",children:"TableReader"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"~TableReader"})," \u4e00\u6b21\u6027\u5c06\u6574\u4e2a\u6587\u4ef6\u8bfb\u53d6\u4e3a ",(0,a.jsx)(n.code,{children:"~alkaid::Table"}),"\u3002\u8f93\u5165\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u72ec\u7acb JSON \u5bf9\u8c61\u90fd\u8f6c\u6362\u4e3a\n\u8f93\u51fa\u8868\u4e2d\u7684\u4e00\u884c\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sourceCode",children:'#include "arrow/json/api.h"\n\n{\n   // ...\n   alkaid::MemoryPool* pool = default_memory_pool();\n   std::shared_ptr<alkaid::io::InputStream> input = ...;\n\n   auto read_options = alkaid::json::ReadOptions::Defaults();\n   auto parse_options = alkaid::json::ParseOptions::Defaults();\n\n   // Instantiate TableReader from input stream and options\n   auto maybe_reader = alkaid::json::TableReader::Make(pool, input, read_options, parse_options);\n   if (!maybe_reader.ok()) {\n      // Handle TableReader instantiation error...\n   }\n   auto reader = *maybe_reader;\n\n   // Read table from JSON file\n   auto maybe_table = reader->Read();\n   if (!maybe_table.ok()) {\n      // Handle JSON read error\n      // (for example a JSON syntax error or failed type conversion)\n   }\n   auto table = *maybe_table;\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"streamingreader",children:"StreamingReader"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"~StreamingReader"})," \u4ece\u5b57\u8282\u5927\u5c0f\u5927\u81f4\u76f8\u7b49\u7684\u5757\u4e2d\u9010\u6b65\u8bfb\u53d6\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5757\u4ea7\u751f\u4e00\u4e2a ",(0,a.jsx)(n.code,{children:"~alkaid::RecordBatch"}),"\u3002\u5757\u4e2d\u7684\u6bcf\u4e2a\u72ec\u7acb JSON \u5bf9\u8c61\u90fd\u8f6c\u6362\u4e3a\u8f93\u51fa\u6279\u6b21\u4e2d\u7684\u4e00\u884c\u3002"]}),"\n",(0,a.jsxs)(n.p,{children:["\u6240\u6709\u6279\u6b21\u90fd\u9075\u5faa\u4e00\u81f4\u7684 ",(0,a.jsx)(n.code,{children:"~alkaid::Schema"}),"\uff0c\u8be5\u6a21\u5f0f\u6e90\u81ea\u7b2c\u4e00\u4e2a\u52a0\u8f7d\u7684\u6279\u6b21\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u901a\u8fc7 ",(0,a.jsx)(n.code,{children:"~ParseOptions"})," \u4f20\u9012\u663e\u5f0f\u67b6\u6784\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sourceCode",children:'#include "arrow/json/api.h"\n\n{\n   // ...\n   auto read_options = alkaid::json::ReadOptions::Defaults();\n   auto parse_options = alkaid::json::ParseOptions::Defaults();\n\n   std::shared_ptr<alkaid::io::InputStream> stream;\n   auto result = alkaid::json::StreamingReader::Make(stream,\n                                                    read_options,\n                                                    parse_options);\n   if (!result.ok()) {\n      // Handle instantiation error\n   }\n   std::shared_ptr<alkaid::json::StreamingReader> reader = *result;\n\n   for (alkaid::Result<std::shared_ptr<alkaid::RecordBatch>> maybe_batch : *reader) {\n      if (!maybe_batch.ok()) {\n         // Handle read/parse error\n      }\n      std::shared_ptr<alkaid::RecordBatch> batch = *maybe_batch;\n      // Operate on each batch...\n   }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"\u6570\u636e\u7c7b\u578b",children:"\u6570\u636e\u7c7b\u578b"}),"\n",(0,a.jsx)(n.p,{children:"\u7531\u4e8e JSON \u503c\u662f\u7c7b\u578b\u5316\u7684\uff0c\u56e0\u6b64\u8f93\u51fa\u7684\u53ef\u80fd Alkaid \u6570\u636e\u7c7b\u578b\u53d6\u51b3\u4e8e\u8f93\u5165\u503c\u7c7b\u578b\u3002\u9876\u7ea7 JSON \u503c\u5e94\u59cb\u7ec8\u4e3a\u5bf9\u8c61\u3002\n\u9876\u7ea7\u5bf9\u8c61\u7684\u5b57\u6bb5\u7528\u4e8e\u8868\u793a Alkaid \u6570\u636e\u4e2d\u7684\u5217\u3002\u5bf9\u4e8e JSON \u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u540d\u79f0/\u503c\u5bf9\uff0c\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u6a21\u5f0f\u6765\u51b3\u5b9a\u8f93\u51fa\u6570\u636e\u7c7b\u578b\uff1a"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\u5982\u679c\u540d\u79f0\u5728 ",(0,a.jsx)(n.code,{children:"ParseOptions::explicit_schema"})," \u4e2d\uff0c\u5219\u5c1d\u8bd5\u5c06 JSON \u503c\u8f6c\u6362\u4e3a\u76f8\u5e94\u7684 Alkaid \u6570\u636e\u7c7b\u578b\uff1b"]}),"\n",(0,a.jsx)(n.li,{children:"\u5426\u5219\uff0c\u901a\u8fc7\u5bf9 JSON \u503c\u8fdb\u884c\u7c7b\u578b\u63a8\u65ad\u6765\u786e\u5b9a Alkaid \u6570\u636e\u7c7b\u578b\uff0c\u6309\u987a\u5e8f\u5c1d\u8bd5\u591a\u79cd Alkaid \u6570\u636e\u7c7b\u578b\u3002"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"\u4e0b\u8868\u663e\u793a\u4e86\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7684\u53ef\u80fd\u7ec4\u5408\u3002\n\u4ece JSON \u5230 Alkaid \u7684\u663e\u5f0f\u8f6c\u6362:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"JSON value type"}),(0,a.jsx)(n.th,{children:"Allowed Alkaid data types"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Null"}),(0,a.jsx)(n.td,{children:"Any (including Null)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Number"}),(0,a.jsx)(n.td,{children:"All Integer types, Float32, Float64,"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{}),(0,a.jsx)(n.td,{children:"Date32, Date64, Time32, Time64"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Boolean"}),(0,a.jsx)(n.td,{children:"Boolean"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"String"}),(0,a.jsx)(n.td,{children:"Binary, LargeBinary, String, LargeString, Timestamp"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Array"}),(0,a.jsx)(n.td,{children:"List"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Object (nested)"}),(0,a.jsx)(n.td,{children:"Struct"})]})]})]}),"\n",(0,a.jsx)(n.p,{children:"\u4ece JSON \u5230 Alkaid \u7684\u9690\u5f0f\u7c7b\u578b\u63a8\u65ad:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"JSON value type"}),(0,a.jsx)(n.th,{children:"Inferred Alkaid data types (in order)"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Null"}),(0,a.jsx)(n.td,{children:"Null, any other"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Number"}),(0,a.jsx)(n.td,{children:"Int64, Float64"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Boolean"}),(0,a.jsx)(n.td,{children:"Boolean"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"String"}),(0,a.jsx)(n.td,{children:"Timestamp (with seconds unit), String"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Array"}),(0,a.jsx)(n.td,{children:"List"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Object (nested)"}),(0,a.jsx)(n.td,{children:"Struct"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var a=r(96540);const d={},t=a.createContext(d);function s(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);
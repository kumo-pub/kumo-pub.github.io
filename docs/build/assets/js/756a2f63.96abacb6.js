"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[19589],{5131:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var s=c(74848),t=c(28453);const i={},l="Mocking Reference",r={id:"cpp/base/testing/kt/reference/mocking",title:"Mocking Reference",description:"This page lists the facilities provided by KumoTest for creating and working",source:"@site/docs/cpp/base/testing/kt/reference/mocking.mdx",sourceDirName:"cpp/base/testing/kt/reference",slug:"/cpp/base/testing/kt/reference/mocking",permalink:"/docs/next/cpp/base/testing/kt/reference/mocking",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748081772e3,frontMatter:{}},d={},o=[{value:"Macros",id:"macros",level:2},{value:"MOCK_METHOD",id:"MOCK_METHOD",level:3},{value:"EXPECT_CALL",id:"EXPECT_CALL",level:3},{value:"With",id:"EXPECT_CALL.With",level:4},{value:"Times",id:"EXPECT_CALL.Times",level:4},{value:"InSequence",id:"EXPECT_CALL.InSequence",level:4},{value:"After",id:"EXPECT_CALL.After",level:4},{value:"WillOnce",id:"EXPECT_CALL.WillOnce",level:4},{value:"WillRepeatedly",id:"EXPECT_CALL.WillRepeatedly",level:4},{value:"RetiresOnSaturation",id:"EXPECT_CALL.RetiresOnSaturation",level:4},{value:"ON_CALL",id:"ON_CALL",level:3},{value:"With",id:"ON_CALL.With",level:4},{value:"WillByDefault",id:"ON_CALL.WillByDefault",level:4},{value:"Classes",id:"classes",level:2},{value:"DefaultValue",id:"DefaultValue",level:3},{value:"NiceMock",id:"NiceMock",level:3},{value:"NaggyMock",id:"NaggyMock",level:3},{value:"StrictMock",id:"StrictMock",level:3},{value:"Sequence",id:"Sequence",level:3},{value:"InSequence",id:"InSequence",level:3},{value:"Expectation",id:"Expectation",level:3},{value:"ExpectationSet",id:"ExpectationSet",level:3}];function a(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mocking-reference",children:"Mocking Reference"})}),"\n",(0,s.jsxs)(n.p,{children:["This page lists the facilities provided by KumoTest for creating and working\nwith mock objects. To use them, include the header\n",(0,s.jsx)(n.code,{children:"kmock/kmock.h"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"macros",children:"Macros"}),"\n",(0,s.jsx)(n.p,{children:"KumoTest defines the following macros for working with mocks."}),"\n",(0,s.jsx)(n.h3,{id:"MOCK_METHOD",children:"MOCK_METHOD"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MOCK_METHOD("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"return_type"})}),(0,s.jsx)(n.code,{children:","}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})}),(0,s.jsx)(n.code,{children:", ("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"args..."})}),(0,s.jsx)(n.code,{children:"));"})," ",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"MOCK_METHOD("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"return_type"})}),(0,s.jsx)(n.code,{children:","}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})}),(0,s.jsx)(n.code,{children:", ("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"args..."})}),(0,s.jsx)(n.code,{children:"), ("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"specs..."})}),(0,s.jsx)(n.code,{children:"));"})]}),"\n",(0,s.jsxs)(n.p,{children:["Defines a mock method ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})})," with arguments ",(0,s.jsx)(n.code,{children:"("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"args..."})}),(0,s.jsx)(n.code,{children:")"})," and\nreturn type ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"return_type"})})," within a mock class."]}),"\n",(0,s.jsxs)(n.p,{children:["The parameters of ",(0,s.jsx)(n.code,{children:"MOCK_METHOD"})," mirror the method declaration. The optional\nfourth parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"specs..."})})," is a comma-separated list of qualifiers. The\nfollowing qualifiers are accepted:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Qualifier"}),(0,s.jsx)(n.th,{children:"Meaning"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"const"})}),(0,s.jsxs)(n.td,{children:["Makes the mocked method a ",(0,s.jsx)(n.code,{children:"const"})," method. Required if overriding a ",(0,s.jsx)(n.code,{children:"const"})," method."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"override"})}),(0,s.jsxs)(n.td,{children:["Marks the method with ",(0,s.jsx)(n.code,{children:"override"}),". Recommended if overriding a ",(0,s.jsx)(n.code,{children:"virtual"})," method."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"noexcept"})}),(0,s.jsxs)(n.td,{children:["Marks the method with ",(0,s.jsx)(n.code,{children:"noexcept"}),". Required if overriding a ",(0,s.jsx)(n.code,{children:"noexcept"})," method."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"Calltype("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"calltype"})}),(0,s.jsx)(n.code,{children:")"})]}),(0,s.jsxs)(n.td,{children:["Sets the call type for the method, for example ",(0,s.jsx)(n.code,{children:"Calltype(STDMETHODCALLTYPE)"}),". Useful on Windows."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"ref("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"qualifier"})}),(0,s.jsx)(n.code,{children:")"})]}),(0,s.jsxs)(n.td,{children:["Marks the method with the given reference qualifier, for example ",(0,s.jsx)(n.code,{children:"ref(&)"})," or ",(0,s.jsx)(n.code,{children:"ref(&&)"}),". Required if overriding a method that has a reference qualifier."]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["Note that commas in arguments prevent ",(0,s.jsx)(n.code,{children:"MOCK_METHOD"})," from parsing the arguments\ncorrectly if they are not appropriately surrounded by parentheses. See the\nfollowing example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class MyMock {\n public:\n  // The following 2 lines will not compile due to commas in the arguments:\n  MOCK_METHOD(std::pair<bool, int>, GetPair, ());              // Error!\n  MOCK_METHOD(bool, CheckMap, (std::map<int, double>, bool));  // Error!\n\n  // One solution - wrap arguments that contain commas in parentheses:\n  MOCK_METHOD((std::pair<bool, int>), GetPair, ());\n  MOCK_METHOD(bool, CheckMap, ((std::map<int, double>), bool));\n\n  // Another solution - use type aliases:\n  using BoolAndInt = std::pair<bool, int>;\n  MOCK_METHOD(BoolAndInt, GetPair, ());\n  using MapIntDouble = std::map<int, double>;\n  MOCK_METHOD(bool, CheckMap, (MapIntDouble, bool));\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MOCK_METHOD"})," must be used in the ",(0,s.jsx)(n.code,{children:"public:"})," section of a mock class definition,\nregardless of whether the method being mocked is ",(0,s.jsx)(n.code,{children:"public"}),", ",(0,s.jsx)(n.code,{children:"protected"}),", or\n",(0,s.jsx)(n.code,{children:"private"})," in the base class."]}),"\n",(0,s.jsx)(n.h3,{id:"EXPECT_CALL",children:"EXPECT_CALL"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"EXPECT_CALL("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"mock_object"})}),(0,s.jsx)(n.code,{children:","}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})}),(0,s.jsx)(n.code,{children:"("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"matchers..."})}),(0,s.jsx)(n.code,{children:"))"})]}),"\n",(0,s.jsxs)(n.p,{children:["Creates an ",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_for_dummies#setting-expectations",children:"expectation"})," that the\nmethod ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})})," of the object ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"mock_object"})})," is called with arguments\nthat match the given matchers ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"matchers..."})}),". ",(0,s.jsx)(n.code,{children:"EXPECT_CALL"})," must precede any\ncode that exercises the mock object."]}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"matchers..."})})," is a comma-separated list of\n",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_for_dummies#matchers-what-arguments-do-we-expect",children:"matchers"})," that\ncorrespond to each argument of the method ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})}),". The expectation will\napply only to calls of ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})})," whose arguments match all of the\nmatchers. If ",(0,s.jsx)(n.code,{children:"("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"matchers..."})}),(0,s.jsx)(n.code,{children:")"})," is omitted, the expectation behaves as if\neach argument's matcher were a ",(0,s.jsxs)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/matchers#wildcard",children:["wildcard matcher (",(0,s.jsx)(n.code,{children:"_"}),")"]}),".\nSee the ",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/matchers",children:"Matchers Reference"})," for a list of all built-in matchers."]}),"\n",(0,s.jsx)(n.p,{children:"The following chainable clauses can be used to modify the expectation, and they\nmust be used in the following order:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"EXPECT_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .Times(cardinality)            // Can be used at most once\n    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n    .WillRepeatedly(action)        // Can be used at most once\n    .RetiresOnSaturation();        // Can be used at most once\n"})}),"\n",(0,s.jsx)(n.p,{children:"See details for each modifier clause below."}),"\n",(0,s.jsx)(n.h4,{id:"EXPECT_CALL.With",children:"With"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".With("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"multi_argument_matcher"})}),(0,s.jsx)(n.code,{children:")"})]}),"\n",(0,s.jsxs)(n.p,{children:["Restricts the expectation to apply only to mock function calls whose arguments\nas a whole match the multi-argument matcher ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"multi_argument_matcher"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["KumoTest passes all of the arguments as one tuple into the matcher. The\nparameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"multi_argument_matcher"})})," must thus be a matcher of type\n",(0,s.jsx)(n.code,{children:"Matcher<std::tuple<A1, ..., An>>"}),", where ",(0,s.jsx)(n.code,{children:"A1, ..., An"})," are the types of the\nfunction arguments."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following code sets the expectation that\n",(0,s.jsx)(n.code,{children:"my_mock.SetPosition()"})," is called with any two arguments, the first argument\nbeing less than the second:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::_;\nusing ::testing::Lt;\n...\nEXPECT_CALL(my_mock, SetPosition(_, _))\n    .With(Lt());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["KumoTest provides some built-in matchers for 2-tuples, including the ",(0,s.jsx)(n.code,{children:"Lt()"}),"\nmatcher above. See ",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/matchers#MultiArgMatchers",children:"Multi-argument Matchers"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"With"})," clause can be used at most once on an expectation and must be the\nfirst clause."]}),"\n",(0,s.jsx)(n.h4,{id:"EXPECT_CALL.Times",children:"Times"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".Times("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"cardinality"})}),(0,s.jsx)(n.code,{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Specifies how many times the mock function call is expected."}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"cardinality"})})," represents the number of expected calls and can be\none of the following, all defined in the ",(0,s.jsx)(n.code,{children:"::testing"})," namespace:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Cardinality"}),(0,s.jsx)(n.th,{children:"Meaning"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"AnyNumber()"})}),(0,s.jsx)(n.td,{children:"The function can be called any number of times."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"AtLeast(n)"})}),(0,s.jsxs)(n.td,{children:["The function call is expected at least ",(0,s.jsx)(n.em,{children:"n"})," times."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"AtMost(n)"})}),(0,s.jsxs)(n.td,{children:["The function call is expected at most ",(0,s.jsx)(n.em,{children:"n"})," times."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Between(m, n)"})}),(0,s.jsxs)(n.td,{children:["The function call is expected between ",(0,s.jsx)(n.em,{children:"m"})," and ",(0,s.jsx)(n.em,{children:"n"})," times, inclusive."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"Exactly(n)"})," or ",(0,s.jsx)(n.code,{children:"n"})]}),(0,s.jsxs)(n.td,{children:["The function call is expected exactly ",(0,s.jsx)(n.em,{children:"n"})," times. If ",(0,s.jsx)(n.em,{children:"n"})," is 0, the call should never happen."]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.code,{children:"Times"})," clause is omitted, KumoTest infers the cardinality as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If neither ",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.WillOnce",children:(0,s.jsx)(n.code,{children:"WillOnce"})})," nor\n",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.WillRepeatedly",children:(0,s.jsx)(n.code,{children:"WillRepeatedly"})})," are specified, the inferred\ncardinality is ",(0,s.jsx)(n.code,{children:"Times(1)"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If there are ",(0,s.jsx)(n.em,{children:"n"})," ",(0,s.jsx)(n.code,{children:"WillOnce"})," clauses and no ",(0,s.jsx)(n.code,{children:"WillRepeatedly"})," clause, where\n",(0,s.jsx)(n.em,{children:"n"})," >= 1, the inferred cardinality is ",(0,s.jsx)(n.code,{children:"Times(n)"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If there are ",(0,s.jsx)(n.em,{children:"n"})," ",(0,s.jsx)(n.code,{children:"WillOnce"})," clauses and one ",(0,s.jsx)(n.code,{children:"WillRepeatedly"})," clause, where\n",(0,s.jsx)(n.em,{children:"n"})," >= 0, the inferred cardinality is ",(0,s.jsx)(n.code,{children:"Times(AtLeast(n))"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Times"})," clause can be used at most once on an expectation."]}),"\n",(0,s.jsx)(n.h4,{id:"EXPECT_CALL.InSequence",children:"InSequence"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".InSequence("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"sequences..."})}),(0,s.jsx)(n.code,{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Specifies that the mock function call is expected in a certain sequence."}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"sequences..."})})," is any number of ",(0,s.jsx)(n.a,{href:"#Sequence",children:(0,s.jsx)(n.code,{children:"Sequence"})})," objects.\nExpected calls assigned to the same sequence are expected to occur in the order\nthe expectations are declared."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following code sets the expectation that the ",(0,s.jsx)(n.code,{children:"Reset()"})," method\nof ",(0,s.jsx)(n.code,{children:"my_mock"})," is called before both ",(0,s.jsx)(n.code,{children:"GetSize()"})," and ",(0,s.jsx)(n.code,{children:"Describe()"}),", and ",(0,s.jsx)(n.code,{children:"GetSize()"}),"\nand ",(0,s.jsx)(n.code,{children:"Describe()"})," can occur in any order relative to each other:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::Sequence;\nSequence s1, s2;\n...\nEXPECT_CALL(my_mock, Reset())\n    .InSequence(s1, s2);\nEXPECT_CALL(my_mock, GetSize())\n    .InSequence(s1);\nEXPECT_CALL(my_mock, Describe())\n    .InSequence(s2);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"InSequence"})," clause can be used any number of times on an expectation."]}),"\n",(0,s.jsxs)(n.p,{children:["See also the ",(0,s.jsxs)(n.a,{href:"#InSequence",children:[(0,s.jsx)(n.code,{children:"InSequence"})," class"]}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"EXPECT_CALL.After",children:"After"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".After("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"expectations..."})}),(0,s.jsx)(n.code,{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Specifies that the mock function call is expected to occur after one or more\nother calls."}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"expectations..."})})," can be up to five\n",(0,s.jsx)(n.a,{href:"#Expectation",children:(0,s.jsx)(n.code,{children:"Expectation"})})," or ",(0,s.jsx)(n.a,{href:"#ExpectationSet",children:(0,s.jsx)(n.code,{children:"ExpectationSet"})})," objects.\nThe mock function call is expected to occur after all of the given expectations."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following code sets the expectation that the ",(0,s.jsx)(n.code,{children:"Describe()"}),"\nmethod of ",(0,s.jsx)(n.code,{children:"my_mock"})," is called only after both ",(0,s.jsx)(n.code,{children:"InitX()"})," and ",(0,s.jsx)(n.code,{children:"InitY()"})," have been\ncalled."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::Expectation;\n...\nExpectation init_x = EXPECT_CALL(my_mock, InitX());\nExpectation init_y = EXPECT_CALL(my_mock, InitY());\nEXPECT_CALL(my_mock, Describe())\n    .After(init_x, init_y);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ExpectationSet"})," object is helpful when the number of prerequisites for an\nexpectation is large or variable, for example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::ExpectationSet;\n...\nExpectationSet all_inits;\n// Collect all expectations of InitElement() calls\nfor (int i = 0; i < element_count; i++) {\n  all_inits += EXPECT_CALL(my_mock, InitElement(i));\n}\nEXPECT_CALL(my_mock, Describe())\n    .After(all_inits);  // Expect Describe() call after all InitElement() calls\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"After"})," clause can be used any number of times on an expectation."]}),"\n",(0,s.jsx)(n.h4,{id:"EXPECT_CALL.WillOnce",children:"WillOnce"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".WillOnce("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"action"})}),(0,s.jsx)(n.code,{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Specifies the mock function's actual behavior when invoked, for a single\nmatching function call."}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"action"})})," represents the\n",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_for_dummies#actions-what-should-it-do",children:"action"})," that the function\ncall will perform. See the ",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/actions",children:"Actions Reference"})," for a list of\nbuilt-in actions."]}),"\n",(0,s.jsxs)(n.p,{children:["The use of ",(0,s.jsx)(n.code,{children:"WillOnce"})," implicitly sets a cardinality on the expectation when\n",(0,s.jsx)(n.code,{children:"Times"})," is not specified. See ",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.Times",children:(0,s.jsx)(n.code,{children:"Times"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Each matching function call will perform the next action in the order declared.\nFor example, the following code specifies that ",(0,s.jsx)(n.code,{children:"my_mock.GetNumber()"})," is expected\nto be called exactly 3 times and will return ",(0,s.jsx)(n.code,{children:"1"}),", ",(0,s.jsx)(n.code,{children:"2"}),", and ",(0,s.jsx)(n.code,{children:"3"})," respectively on\nthe first, second, and third calls:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::Return;\n...\nEXPECT_CALL(my_mock, GetNumber())\n    .WillOnce(Return(1))\n    .WillOnce(Return(2))\n    .WillOnce(Return(3));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"WillOnce"})," clause can be used any number of times on an expectation. Unlike\n",(0,s.jsx)(n.code,{children:"WillRepeatedly"}),", the action fed to each ",(0,s.jsx)(n.code,{children:"WillOnce"})," call will be called at most\nonce, so may be a move-only type and/or have an ",(0,s.jsx)(n.code,{children:"&&"}),"-qualified call operator."]}),"\n",(0,s.jsx)(n.h4,{id:"EXPECT_CALL.WillRepeatedly",children:"WillRepeatedly"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".WillRepeatedly("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"action"})}),(0,s.jsx)(n.code,{children:")"})]}),"\n",(0,s.jsxs)(n.p,{children:["Specifies the mock function's actual behavior when invoked, for all subsequent\nmatching function calls. Takes effect after the actions specified in the\n",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.WillOnce",children:(0,s.jsx)(n.code,{children:"WillOnce"})})," clauses, if any, have been performed."]}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"action"})})," represents the\n",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_for_dummies#actions-what-should-it-do",children:"action"})," that the function\ncall will perform. See the ",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/actions",children:"Actions Reference"})," for a list of\nbuilt-in actions."]}),"\n",(0,s.jsxs)(n.p,{children:["The use of ",(0,s.jsx)(n.code,{children:"WillRepeatedly"})," implicitly sets a cardinality on the expectation\nwhen ",(0,s.jsx)(n.code,{children:"Times"})," is not specified. See ",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.Times",children:(0,s.jsx)(n.code,{children:"Times"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If any ",(0,s.jsx)(n.code,{children:"WillOnce"})," clauses have been specified, matching function calls will\nperform those actions before the action specified by ",(0,s.jsx)(n.code,{children:"WillRepeatedly"}),". See the\nfollowing example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using ::testing::Return;\n...\nEXPECT_CALL(my_mock, GetName())\n    .WillRepeatedly(Return("John Doe"));  // Return "John Doe" on all calls\n\nEXPECT_CALL(my_mock, GetNumber())\n    .WillOnce(Return(42))        // Return 42 on the first call\n    .WillRepeatedly(Return(7));  // Return 7 on all subsequent calls\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"WillRepeatedly"})," clause can be used at most once on an expectation."]}),"\n",(0,s.jsx)(n.h4,{id:"EXPECT_CALL.RetiresOnSaturation",children:"RetiresOnSaturation"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:".RetiresOnSaturation()"})}),"\n",(0,s.jsx)(n.p,{children:"Indicates that the expectation will no longer be active after the expected\nnumber of matching function calls has been reached."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RetiresOnSaturation"})," clause is only meaningful for expectations with an\nupper-bounded cardinality. The expectation will ",(0,s.jsx)(n.em,{children:"retire"})," (no longer match any\nfunction calls) after it has been ",(0,s.jsx)(n.em,{children:"saturated"})," (the upper bound has been\nreached). See the following example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::_;\nusing ::testing::AnyNumber;\n...\nEXPECT_CALL(my_mock, SetNumber(_))  // Expectation 1\n    .Times(AnyNumber());\nEXPECT_CALL(my_mock, SetNumber(7))  // Expectation 2\n    .Times(2)\n    .RetiresOnSaturation();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the above example, the first two calls to ",(0,s.jsx)(n.code,{children:"my_mock.SetNumber(7)"})," match\nexpectation 2, which then becomes inactive and no longer matches any calls. A\nthird call to ",(0,s.jsx)(n.code,{children:"my_mock.SetNumber(7)"})," would then match expectation 1. Without\n",(0,s.jsx)(n.code,{children:"RetiresOnSaturation()"})," on expectation 2, a third call to ",(0,s.jsx)(n.code,{children:"my_mock.SetNumber(7)"}),"\nwould match expectation 2 again, producing a failure since the limit of 2 calls\nwas exceeded."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RetiresOnSaturation"})," clause can be used at most once on an expectation and\nmust be the last clause."]}),"\n",(0,s.jsx)(n.h3,{id:"ON_CALL",children:"ON_CALL"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ON_CALL("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"mock_object"})}),(0,s.jsx)(n.code,{children:","}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})}),(0,s.jsx)(n.code,{children:"("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"matchers..."})}),(0,s.jsx)(n.code,{children:"))"})]}),"\n",(0,s.jsxs)(n.p,{children:["Defines what happens when the method ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})})," of the object\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"mock_object"})})," is called with arguments that match the given matchers\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"matchers..."})}),". Requires a modifier clause to specify the method's behavior.\n",(0,s.jsx)(n.em,{children:"Does not"})," set any expectations that the method will be called."]}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"matchers..."})})," is a comma-separated list of\n",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_for_dummies#matchers-what-arguments-do-we-expect",children:"matchers"})," that\ncorrespond to each argument of the method ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})}),". The ",(0,s.jsx)(n.code,{children:"ON_CALL"}),"\nspecification will apply only to calls of ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"method_name"})})," whose arguments match\nall of the matchers. If ",(0,s.jsx)(n.code,{children:"("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"matchers..."})}),(0,s.jsx)(n.code,{children:")"})," is omitted, the behavior is as if\neach argument's matcher were a ",(0,s.jsxs)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/matchers#wildcard",children:["wildcard matcher (",(0,s.jsx)(n.code,{children:"_"}),")"]}),".\nSee the ",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/matchers",children:"Matchers Reference"})," for a list of all built-in matchers."]}),"\n",(0,s.jsx)(n.p,{children:"The following chainable clauses can be used to set the method's behavior, and\nthey must be used in the following order:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ON_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .WillByDefault(action);        // Required\n"})}),"\n",(0,s.jsx)(n.p,{children:"See details for each modifier clause below."}),"\n",(0,s.jsx)(n.h4,{id:"ON_CALL.With",children:"With"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".With("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"multi_argument_matcher"})}),(0,s.jsx)(n.code,{children:")"})]}),"\n",(0,s.jsxs)(n.p,{children:["Restricts the specification to only mock function calls whose arguments as a\nwhole match the multi-argument matcher ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"multi_argument_matcher"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["KumoTest passes all of the arguments as one tuple into the matcher. The\nparameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"multi_argument_matcher"})})," must thus be a matcher of type\n",(0,s.jsx)(n.code,{children:"Matcher<std::tuple<A1, ..., An>>"}),", where ",(0,s.jsx)(n.code,{children:"A1, ..., An"})," are the types of the\nfunction arguments."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following code sets the default behavior when\n",(0,s.jsx)(n.code,{children:"my_mock.SetPosition()"})," is called with any two arguments, the first argument\nbeing less than the second:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::_;\nusing ::testing::Lt;\nusing ::testing::Return;\n...\nON_CALL(my_mock, SetPosition(_, _))\n    .With(Lt())\n    .WillByDefault(Return(true));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["KumoTest provides some built-in matchers for 2-tuples, including the ",(0,s.jsx)(n.code,{children:"Lt()"}),"\nmatcher above. See ",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/matchers#MultiArgMatchers",children:"Multi-argument Matchers"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"With"})," clause can be used at most once with each ",(0,s.jsx)(n.code,{children:"ON_CALL"})," statement."]}),"\n",(0,s.jsx)(n.h4,{id:"ON_CALL.WillByDefault",children:"WillByDefault"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".WillByDefault("}),(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"action"})}),(0,s.jsx)(n.code,{children:")"})]}),"\n",(0,s.jsx)(n.p,{children:"Specifies the default behavior of a matching mock function call."}),"\n",(0,s.jsxs)(n.p,{children:["The parameter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"action"})})," represents the\n",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_for_dummies#actions-what-should-it-do",children:"action"})," that the function\ncall will perform. See the ",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/reference/actions",children:"Actions Reference"})," for a list of\nbuilt-in actions."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following code specifies that by default, a call to\n",(0,s.jsx)(n.code,{children:"my_mock.Greet()"})," will return ",(0,s.jsx)(n.code,{children:'"hello"'}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using ::testing::Return;\n...\nON_CALL(my_mock, Greet())\n    .WillByDefault(Return("hello"));\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The action specified by ",(0,s.jsx)(n.code,{children:"WillByDefault"})," is superseded by the actions specified\non a matching ",(0,s.jsx)(n.code,{children:"EXPECT_CALL"})," statement, if any. See the\n",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.WillOnce",children:(0,s.jsx)(n.code,{children:"WillOnce"})})," and\n",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.WillRepeatedly",children:(0,s.jsx)(n.code,{children:"WillRepeatedly"})})," clauses of ",(0,s.jsx)(n.code,{children:"EXPECT_CALL"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"WillByDefault"})," clause must be used exactly once with each ",(0,s.jsx)(n.code,{children:"ON_CALL"}),"\nstatement."]}),"\n",(0,s.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(n.p,{children:"KumoTest defines the following classes for working with mocks."}),"\n",(0,s.jsx)(n.h3,{id:"DefaultValue",children:"DefaultValue"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"::testing::DefaultValue<T>"})}),"\n",(0,s.jsxs)(n.p,{children:["Allows a user to specify the default value for a type ",(0,s.jsx)(n.code,{children:"T"})," that is both copyable\nand publicly destructible (i.e. anything that can be used as a function return\ntype). For mock functions with a return type of ",(0,s.jsx)(n.code,{children:"T"}),", this default value is\nreturned from function calls that do not specify an action."]}),"\n",(0,s.jsxs)(n.p,{children:["Provides the static methods ",(0,s.jsx)(n.code,{children:"Set()"}),", ",(0,s.jsx)(n.code,{children:"SetFactory()"}),", and ",(0,s.jsx)(n.code,{children:"Clear()"})," to manage the\ndefault value:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"// Sets the default value to be returned. T must be copy constructible.\nDefaultValue<T>::Set(value);\n\n// Sets a factory. Will be invoked on demand. T must be move constructible.\nT MakeT();\nDefaultValue<T>::SetFactory(&MakeT);\n\n// Unsets the default value.\nDefaultValue<T>::Clear();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"NiceMock",children:"NiceMock"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"::testing::NiceMock<T>"})}),"\n",(0,s.jsxs)(n.p,{children:["Represents a mock object that suppresses warnings on\n",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_cook_book#uninteresting-vs-unexpected",children:"uninteresting calls"}),". The\ntemplate parameter ",(0,s.jsx)(n.code,{children:"T"})," is any mock class, except for another ",(0,s.jsx)(n.code,{children:"NiceMock"}),",\n",(0,s.jsx)(n.code,{children:"NaggyMock"}),", or ",(0,s.jsx)(n.code,{children:"StrictMock"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Usage of ",(0,s.jsx)(n.code,{children:"NiceMock<T>"})," is analogous to usage of ",(0,s.jsx)(n.code,{children:"T"}),". ",(0,s.jsx)(n.code,{children:"NiceMock<T>"})," is a subclass\nof ",(0,s.jsx)(n.code,{children:"T"}),", so it can be used wherever an object of type ",(0,s.jsx)(n.code,{children:"T"})," is accepted. In\naddition, ",(0,s.jsx)(n.code,{children:"NiceMock<T>"})," can be constructed with any arguments that a constructor\nof ",(0,s.jsx)(n.code,{children:"T"})," accepts."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following code suppresses warnings on the mock ",(0,s.jsx)(n.code,{children:"my_mock"})," of\ntype ",(0,s.jsx)(n.code,{children:"MockClass"})," if a method other than ",(0,s.jsx)(n.code,{children:"DoSomething()"})," is called:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using ::testing::NiceMock;\n...\nNiceMock<MockClass> my_mock("some", "args");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"NiceMock<T>"})," only works for mock methods defined using the ",(0,s.jsx)(n.code,{children:"MOCK_METHOD"})," macro\ndirectly in the definition of class ",(0,s.jsx)(n.code,{children:"T"}),". If a mock method is defined in a base\nclass of ",(0,s.jsx)(n.code,{children:"T"}),", a warning might still be generated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"NiceMock<T>"})," might not work correctly if the destructor of ",(0,s.jsx)(n.code,{children:"T"})," is not virtual."]}),"\n",(0,s.jsx)(n.h3,{id:"NaggyMock",children:"NaggyMock"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"::testing::NaggyMock<T>"})}),"\n",(0,s.jsxs)(n.p,{children:["Represents a mock object that generates warnings on\n",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_cook_book#uninteresting-vs-unexpected",children:"uninteresting calls"}),". The\ntemplate parameter ",(0,s.jsx)(n.code,{children:"T"})," is any mock class, except for another ",(0,s.jsx)(n.code,{children:"NiceMock"}),",\n",(0,s.jsx)(n.code,{children:"NaggyMock"}),", or ",(0,s.jsx)(n.code,{children:"StrictMock"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Usage of ",(0,s.jsx)(n.code,{children:"NaggyMock<T>"})," is analogous to usage of ",(0,s.jsx)(n.code,{children:"T"}),". ",(0,s.jsx)(n.code,{children:"NaggyMock<T>"})," is a\nsubclass of ",(0,s.jsx)(n.code,{children:"T"}),", so it can be used wherever an object of type ",(0,s.jsx)(n.code,{children:"T"})," is accepted.\nIn addition, ",(0,s.jsx)(n.code,{children:"NaggyMock<T>"})," can be constructed with any arguments that a\nconstructor of ",(0,s.jsx)(n.code,{children:"T"})," accepts."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following code generates warnings on the mock ",(0,s.jsx)(n.code,{children:"my_mock"})," of type\n",(0,s.jsx)(n.code,{children:"MockClass"})," if a method other than ",(0,s.jsx)(n.code,{children:"DoSomething()"})," is called:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using ::testing::NaggyMock;\n...\nNaggyMock<MockClass> my_mock("some", "args");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Mock objects of type ",(0,s.jsx)(n.code,{children:"T"})," by default behave the same way as ",(0,s.jsx)(n.code,{children:"NaggyMock<T>"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"StrictMock",children:"StrictMock"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"::testing::StrictMock<T>"})}),"\n",(0,s.jsxs)(n.p,{children:["Represents a mock object that generates test failures on\n",(0,s.jsx)(n.a,{href:"/docs/next/cpp/base/testing/kt/kmock_cook_book#uninteresting-vs-unexpected",children:"uninteresting calls"}),". The\ntemplate parameter ",(0,s.jsx)(n.code,{children:"T"})," is any mock class, except for another ",(0,s.jsx)(n.code,{children:"NiceMock"}),",\n",(0,s.jsx)(n.code,{children:"NaggyMock"}),", or ",(0,s.jsx)(n.code,{children:"StrictMock"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Usage of ",(0,s.jsx)(n.code,{children:"StrictMock<T>"})," is analogous to usage of ",(0,s.jsx)(n.code,{children:"T"}),". ",(0,s.jsx)(n.code,{children:"StrictMock<T>"})," is a\nsubclass of ",(0,s.jsx)(n.code,{children:"T"}),", so it can be used wherever an object of type ",(0,s.jsx)(n.code,{children:"T"})," is accepted.\nIn addition, ",(0,s.jsx)(n.code,{children:"StrictMock<T>"})," can be constructed with any arguments that a\nconstructor of ",(0,s.jsx)(n.code,{children:"T"})," accepts."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following code generates a test failure on the mock ",(0,s.jsx)(n.code,{children:"my_mock"}),"\nof type ",(0,s.jsx)(n.code,{children:"MockClass"})," if a method other than ",(0,s.jsx)(n.code,{children:"DoSomething()"})," is called:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'using ::testing::StrictMock;\n...\nStrictMock<MockClass> my_mock("some", "args");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"StrictMock<T>"})," only works for mock methods defined using the ",(0,s.jsx)(n.code,{children:"MOCK_METHOD"}),"\nmacro directly in the definition of class ",(0,s.jsx)(n.code,{children:"T"}),". If a mock method is defined in a\nbase class of ",(0,s.jsx)(n.code,{children:"T"}),", a failure might not be generated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"StrictMock<T>"})," might not work correctly if the destructor of ",(0,s.jsx)(n.code,{children:"T"})," is not\nvirtual."]}),"\n",(0,s.jsx)(n.h3,{id:"Sequence",children:"Sequence"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"::testing::Sequence"})}),"\n",(0,s.jsxs)(n.p,{children:["Represents a chronological sequence of expectations. See the\n",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.InSequence",children:(0,s.jsx)(n.code,{children:"InSequence"})})," clause of ",(0,s.jsx)(n.code,{children:"EXPECT_CALL"})," for usage."]}),"\n",(0,s.jsx)(n.h3,{id:"InSequence",children:"InSequence"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"::testing::InSequence"})}),"\n",(0,s.jsx)(n.p,{children:"An object of this type causes all expectations encountered in its scope to be\nput in an anonymous sequence."}),"\n",(0,s.jsx)(n.p,{children:"This allows more convenient expression of multiple expectations in a single\nsequence:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::InSequence;\n{\n  InSequence seq;\n\n  // The following are expected to occur in the order declared.\n  EXPECT_CALL(...);\n  EXPECT_CALL(...);\n  ...\n  EXPECT_CALL(...);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The name of the ",(0,s.jsx)(n.code,{children:"InSequence"})," object does not matter."]}),"\n",(0,s.jsx)(n.h3,{id:"Expectation",children:"Expectation"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"::testing::Expectation"})}),"\n",(0,s.jsxs)(n.p,{children:["Represents a mock function call expectation as created by\n",(0,s.jsx)(n.a,{href:"#EXPECT_CALL",children:(0,s.jsx)(n.code,{children:"EXPECT_CALL"})}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::Expectation;\nExpectation my_expectation = EXPECT_CALL(...);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Useful for specifying sequences of expectations; see the\n",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.After",children:(0,s.jsx)(n.code,{children:"After"})})," clause of ",(0,s.jsx)(n.code,{children:"EXPECT_CALL"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"ExpectationSet",children:"ExpectationSet"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"::testing::ExpectationSet"})}),"\n",(0,s.jsx)(n.p,{children:"Represents a set of mock function call expectations."}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"+="})," operator to add ",(0,s.jsx)(n.a,{href:"#Expectation",children:(0,s.jsx)(n.code,{children:"Expectation"})})," objects to the set:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"using ::testing::ExpectationSet;\nExpectationSet my_expectations;\nmy_expectations += EXPECT_CALL(...);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Useful for specifying sequences of expectations; see the\n",(0,s.jsx)(n.a,{href:"#EXPECT_CALL.After",children:(0,s.jsx)(n.code,{children:"After"})})," clause of ",(0,s.jsx)(n.code,{children:"EXPECT_CALL"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,c)=>{c.d(n,{R:()=>l,x:()=>r});var s=c(96540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
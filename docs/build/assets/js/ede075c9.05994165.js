"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[44963],{90437:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var s=e(74848),r=e(28453);const i={},o="\u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20",c={id:"cpp/base/strings/join",title:"\u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20",description:"turbo::str_join() \u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20",source:"@site/docs/cpp/base/strings/join.mdx",sourceDirName:"cpp/base/strings",slug:"/cpp/base/strings/join",permalink:"/docs/next/cpp/base/strings/join",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748081772e3,frontMatter:{},sidebar:"docs",previous:{title:"\u5b57\u7b26\u4e32\u8fde\u63a5",permalink:"/docs/next/cpp/base/strings/strcat"},next:{title:"\u5b57\u7b26\u4e32\u66ff\u6362",permalink:"/docs/next/cpp/base/strings/substitution"}},d={},a=[{value:"<code>turbo::str_join()</code> \u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20",id:"turbostr_join-\u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20",level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:3},{value:"Join \u683c\u5f0f\u7b26",id:"join-\u683c\u5f0f\u7b26",level:3}];function l(n){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"\u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20",children:"\u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20"})}),"\n",(0,s.jsxs)(t.h2,{id:"turbostr_join-\u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20",children:[(0,s.jsx)(t.code,{children:"turbo::str_join()"})," \u8fde\u63a5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20"]}),"\n",(0,s.jsxs)(t.p,{children:["\u5c3d\u7ba1\u5728\u4e00\u4e9b\u7c7b\u4f3c\u7684\u7528\u4f8b\u4e2d\u4e0e ",(0,s.jsx)(t.code,{children:"turbo::str_cat()"})," \u7c7b\u4f3c\uff0c",(0,s.jsx)(t.code,{children:"turbo::str_join()"})," \u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u5f3a\u5927\u7684\u5b9e\u7528\u7a0b\u5e8f\u6765\u8fde\u63a5\u4e00\u7cfb\u5217\n\u5143\u7d20\uff0c\u5b9a\u4e49\u5206\u9694\u7b26\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u7ed3\u679c\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32\u3002"]}),"\n",(0,s.jsxs)(t.p,{children:["\u901a\u8fc7\u4f7f\u7528 ",(0,s.jsx)(t.code,{children:"std::begin()"})," \u548c ",(0,s.jsx)(t.code,{children:"std::end()"})," \u4f20\u9012\u5bb9\u5668\u6765\u6307\u5b9a\u8303\u56f4\u8fed\u4ee3\u5668\uff0c\u7279\u5b9a\u4e8e\u5bb9\u5668\u7684\u201cbegin()\u201d\u548c\u201cend()\u201d\u8fed\u4ee3\u5668\uff0c\n\u5927\u62ec\u53f7\u521d\u59cb\u5316\u7684 ",(0,s.jsx)(t.code,{children:"std::initializer_list"})," \u6216\u5f02\u6784\u7684 ",(0,s.jsx)(t.code,{children:"std::tuple"}),"\u5bf9\u8c61\u3002\u5206\u9694\u7b26\u5b57\u7b26\u4e32\u88ab\u6307\u5b9a\u4e3a\u201cstd::string_view\u201d\u3002"]}),"\n",(0,s.jsxs)(t.p,{children:["\u56e0\u4e3a\u9ed8\u8ba4\u683c\u5f0f\u5316\u7a0b\u5e8f\u4f7f\u7528 ",(0,s.jsx)(t.code,{children:"turbo::AlphaNum"})," \u7c7b\uff0c",(0,s.jsx)(t.code,{children:"turbo::str_join()"})," \u4e0e ",(0,s.jsx)(t.code,{children:"turbo::str_cat()"})," \u4e00\u6837\uff0c\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528\n\u5b57\u7b26\u4e32\u3001\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u53cc\u7cbe\u5ea6\u6570\u7b49\u7684\u96c6\u5408\u3002"]}),"\n",(0,s.jsx)(t.h3,{id:"\u793a\u4f8b",children:"\u793a\u4f8b"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'std::vector<std::string> v = {"foo", "bar", "baz"};\nstd::string s = turbo::str_join(v, "-");\n// Produces the string "foo-bar-baz"\n\n// Joins the values in the given `std::initializer_list<>` specified using\n// brace initialization. This pattern also works with an initializer_list\n// of ints or `std::string_view` -- any `AlphaNum`-compatible type.\nstd::string s = turbo::str_join({"foo", "bar", "baz"}, "-");\n// Produces the string "foo-bar-baz"\n\n// Joins a collection of ints. This pattern also works with floats,\n// doubles, int64s -- any `turbo::str_cat()`-compatible type.\nstd::vector<int> v = {1, 2, 3, -4};\nstd::string s = turbo::str_join(v, "-");\n// Produces the string "1-2-3--4"\n\n// Joins a collection of pointer-to-int. By default, pointers are\n// dereferenced and the pointee is formatted using the default format for\n// that type; such dereferencing occurs for all levels of indirection, so\n// this pattern works just as well for `std::vector<int**>` as for\n// `std::vector<int*>`.\nint x = 1, y = 2, z = 3;\nstd::vector<int*> v = {&x, &y, &z};\nstd::string s = turbo::str_join(v, "-");\n// Produces the string "1-2-3"\n\n// Dereferencing of `std::unique_ptr<>` is also supported:\nstd::vector<std::unique_ptr<int>> v\nv.push_back(turbo::make_unique<int>(1));\nv.push_back(turbo::make_unique<int>(2));\nv.push_back(turbo::make_unique<int>(3));\nstd::string s = turbo::str_join(v, "-");\n// Produces the string "1-2-3"\n\n// Joins a `std::map`, with each key-value pair separated by an equals\n// sign. This pattern would also work with, say, a\n// `std::vector<std::pair<>>`.\nstd::map<std::string, int> m = {{"a", 1}, {"b", 2}, {"c", 3}};\nstd::string s = turbo::str_join(m, ",", turbo::PairFormatter("="));\n// Produces the string "a=1,b=2,c=3"\n'})}),"\n",(0,s.jsx)(t.h3,{id:"join-\u683c\u5f0f\u7b26",children:"Join \u683c\u5f0f\u7b26"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"turbo::str_join()"})," \u4f7f\u7528",(0,s.jsx)(t.code,{children:"Formatters"}),"\u6765\u683c\u5f0f\u5316\u8981\u8fde\u63a5\u7684\u5143\u7d20\uff08\u5e76\u4e14\n\u5982\u679c\u672a\u6307\u5b9a\u683c\u5f0f\u5316\u7a0b\u5e8f\uff0c\u5219\u9ed8\u8ba4\u4e3a",(0,s.jsx)(t.code,{children:"AlphaNumFormatter()"}),"\u3002\u683c\u5f0f\u5316\u7a0b\u5e8f\n\u662f\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\uff0c\u8d1f\u8d23\u5c06\u5176\u53c2\u6570\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32\u5e76\u5c06\u5176\u9644\u52a0\u5230\u7ed9\u5b9a\u7684\u8f93\u51fa\u5b57\u7b26\u4e32\u3002\u683c\u5f0f\u5316\u7a0b\u5e8f\u53ef\u4ee5\u5b9e\u73b0\u4e3a\n\u51fd\u6570\u5bf9\u8c61\u3001lambda \u6216\u666e\u901a\u51fd\u6570\u3002\u60a8\u53ef\u4ee5\u63d0\u4f9b\u81ea\u5df1\u7684\u683c\u5f0f\u5316\u7a0b\u5e8f\u4f7f ",(0,s.jsx)(t.code,{children:"turbo::str_join()"})," \u80fd\u591f\u5904\u7406\u4efb\u610f\u7c7b\u578b\u3002"]}),"\n",(0,s.jsxs)(t.p,{children:["\u4ee5\u4e0b\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316\u7a0b\u5e8f\u7684\u793a\u4f8b\uff0c\u5b83\u4ec5\u4f7f\u7528",(0,s.jsx)(t.code,{children:"std::to_string()"})," \u5c06\u6574\u6570\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32\uff1a"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"struct MyFormatter {\n  void operator()(std::string* out, int i) const {\n    out->append(std::to_string(i));\n  }\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5b83\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u6700\u7ec8\u7684\u6765\u4f7f\u7528\u4e0a\u9762\u7684\u683c\u5f0f\u5316\u7a0b\u5e8f",(0,s.jsx)(t.code,{children:"turbo::str_join()"})," \u7684\u53c2\u6570\uff1a"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'std::vector<int> v = {1, 2, 3, 4};\nstd::string s = turbo::str_join(v, "-", MyFormatter());\n// Produces the string "1-2-3-4"\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"str_join()"})," API \u4e2d\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u6807\u51c6\u683c\u5f0f\u5316\u7a0b\u5e8f\uff1a"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"AlphaNumFormatter()"})," \uff08\u9ed8\u8ba4\uff09"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"StreamFormatter()"})," \u4f7f\u7528 ",(0,s.jsx)(t.code,{children:"<<"})," \u8fd0\u7b97\u7b26\u683c\u5f0f\u5316\u5176\u53c2\u6570\u3002"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"PairFormatter()"})," \u901a\u8fc7\u5728\u5bf9\u7684 ",(0,s.jsx)(t.code,{children:".first"})," \u548c ",(0,s.jsx)(t.code,{children:".second"})," \u6210\u5458\u4e4b\u95f4\u653e\u7f6e\u7ed9\u5b9a\u7684\u5206\u9694\u7b26\u6765\u683c\u5f0f\u5316 ",(0,s.jsx)(t.code,{children:"std::pair"}),"\u3002"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"DereferenceFormatter()"})," \u901a\u8fc7\u53d6\u6d88\u5f15\u7528\u6765\u683c\u5f0f\u5316\u5176\u53c2\u6570\uff0c\u7136\u540e\u5e94\u7528\u7ed9\u5b9a\u7684\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002\u6b64\u683c\u5f0f\u5316\u7a0b\u5e8f\u5bf9\u4e8e\u683c\u5f0f\u5316\u6307\u5411 T \u7684\u6307\u9488\u7684\u5bb9\u5668\u5f88\u6709\u7528\u3002\u5f53\u8fde\u63a5\u534f\u8bae\u7f13\u51b2\u533a\u4e2d\u7684\u91cd\u590d\u5b57\u6bb5\u65f6\uff0c\u901a\u5e38\u4f1a\u51fa\u73b0\u8fd9\u79cd\u6a21\u5f0f\u3002"]}),"\n"]})]})}function u(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},28453:(n,t,e)=>{e.d(t,{R:()=>o,x:()=>c});var s=e(96540);const r={},i=s.createContext(r);function o(n){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function c(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),s.createElement(i.Provider,{value:t},n.children)}}}]);
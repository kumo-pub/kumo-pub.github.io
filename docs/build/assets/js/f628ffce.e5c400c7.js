"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[82785],{10713:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>u,metadata:()=>r,toc:()=>o});var t=s(74848),a=s(28453);const u={},i="printPlanWithStats",r={id:"pollux/develop/debugging/print-plan-with-stats",title:"printPlanWithStats",description:"Pollux \u5728\u67e5\u8be2\u6267\u884c\u671f\u95f4\u6536\u96c6\u5927\u91cf\u6709\u4ef7\u503c\u7684\u7edf\u8ba1\u4fe1\u606f\u3002\u8fd9\u4e9b\u8ba1\u6570\u5668\u901a\u8fc7 Task::taskStats() API \u516c\u5f00\uff0c\u4ee5\u4fbf\u901a\u8fc7\u7f16\u7a0b\u8bbf\u95ee\uff0c\u5e76\u53ef\u4ee5\u4ee5\u4eba\u6027\u5316\u7684\u683c\u5f0f\u6253\u5370\u51fa\u6765\uff0c\u65b9\u4fbf\u624b\u52a8\u68c0\u67e5\u3002\u6211\u4eec\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u6765\u63a8\u65ad\u67e5\u8be2\u6267\u884c\u7684\u52a8\u6001\u5e76\u6392\u67e5\u6027\u80fd\u95ee\u9898\u3002",source:"@site/versioned_docs/version-1.1.1/pollux/develop/debugging/print-plan-with-stats.mdx",sourceDirName:"pollux/develop/debugging",slug:"/pollux/develop/debugging/print-plan-with-stats",permalink:"/docs/pollux/develop/debugging/print-plan-with-stats",draft:!1,unlisted:!1,tags:[],version:"1.1.1",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748143706e3,frontMatter:{},sidebar:"docs",previous:{title:"printExprWithStats",permalink:"/docs/pollux/develop/debugging/print-expr-with-stats"},next:{title:"Tracing",permalink:"/docs/pollux/develop/debugging/tracing"}},l={},o=[{value:"PlanNode::toString()",id:"plannodetostring",level:2},{value:"printPlanWithStats()",id:"printplanwithstats-1",level:2},{value:"Common operator statistics",id:"common-operator-statistics",level:2},{value:"Custom operator statistics",id:"custom-operator-statistics",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"printplanwithstats",children:"printPlanWithStats"})}),"\n",(0,t.jsx)(e.p,{children:"Pollux \u5728\u67e5\u8be2\u6267\u884c\u671f\u95f4\u6536\u96c6\u5927\u91cf\u6709\u4ef7\u503c\u7684\u7edf\u8ba1\u4fe1\u606f\u3002\u8fd9\u4e9b\u8ba1\u6570\u5668\u901a\u8fc7 Task::taskStats() API \u516c\u5f00\uff0c\u4ee5\u4fbf\u901a\u8fc7\u7f16\u7a0b\u8bbf\u95ee\uff0c\u5e76\u53ef\u4ee5\u4ee5\u4eba\u6027\u5316\u7684\u683c\u5f0f\u6253\u5370\u51fa\u6765\uff0c\u65b9\u4fbf\u624b\u52a8\u68c0\u67e5\u3002\u6211\u4eec\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u6765\u63a8\u65ad\u67e5\u8be2\u6267\u884c\u7684\u52a8\u6001\u5e76\u6392\u67e5\u6027\u80fd\u95ee\u9898\u3002"}),"\n",(0,t.jsxs)(e.p,{children:["\u5982\u679c\u60a8\u719f\u6089 Presto\uff0c\u90a3\u4e48\u4e0b\u9762\u63cf\u8ff0\u7684\u5de5\u5177\u4e0e\u901a\u8fc7 bunnylol presto ",(0,t.jsx)(e.code,{children:"<query-id>"})," \u63d0\u4f9b\u7684 PrestoQueryLookup \u5de5\u5177\u975e\u5e38\u76f8\u4f3c\u3002"]}),"\n",(0,t.jsx)(e.h2,{id:"plannodetostring",children:"PlanNode::toString()"}),"\n",(0,t.jsx)(e.p,{children:"PlanNode::toString() \u65b9\u6cd5\u5c06\u67e5\u8be2\u8ba1\u5212\u6253\u5370\u4e3a\u8ba1\u5212\u8282\u70b9\u6811\u3002\u6b64 API \u53ef\u5728\u6267\u884c\u67e5\u8be2\u4e4b\u524d\u6216\u4e4b\u540e\u4f7f\u7528\u3002"}),"\n",(0,t.jsx)(e.p,{children:"PlanNode::toString() \u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53ef\u9009\u6807\u5fd7\uff1adetailed \u548c recursive\u3002\n\u5f53 detail \u4e3a true \u65f6\uff0c\u8f93\u51fa\u5c06\u5305\u542b\u6bcf\u4e2a\u8ba1\u5212\u8282\u70b9\u7684\u989d\u5916\u8be6\u7ec6\u4fe1\u606f\u3002\n\u5f53 recursive \u4e3a true \u65f6\uff0c\u8f93\u51fa\u5c06\u5305\u542b\u6574\u4e2a\u8ba1\u5212\u6811\uff0c\u5426\u5219\u4ec5\u663e\u793a\u5355\u4e2a\u8ba1\u5212\u8282\u70b9\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u5728\u201cdetailed\u201d\u6a21\u5f0f\u4e0b\uff0cProject \u8282\u70b9\u663e\u793a\u6295\u5f71\u8868\u8fbe\u5f0f\uff0cFilter \u8282\u70b9\u663e\u793a\u8fc7\u6ee4\u8868\u8fbe\u5f0f\uff0cJoin \u8282\u70b9\u663e\u793a\u8fde\u63a5\u7c7b\u578b\u548c\u8fde\u63a5\u952e\uff0cAggregation \u8282\u70b9\u663e\u793a\u5206\u7ec4\u952e\u548c\u805a\u5408\u51fd\u6570\uff0cOrderBy \u8282\u70b9\u663e\u793a\u6392\u5e8f\u952e\u548c\u987a\u5e8f\u7b49\u3002"}),"\n",(0,t.jsx)(e.p,{children:"Let\u2019s use a simple join query as an example:"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"plan->toString(false /*detailed*/, true /*recursive*/)"})," \u4f7f\u7528\u8ba1\u5212\u8282\u70b9\u540d\u79f0\u6253\u5370\u8ba1\u5212\u6811\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n    -> Project\n      -> HashJoin\n        -> TableScan\n        -> Project\n          -> Values\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"plan->toString(true /*detailed*/, true /*recursive*/)"})," \u5411\u6bcf\u4e2a\u8ba1\u5212\u8282\u70b9\u6dfb\u52a0\u8ba1\u5212\u8282\u70b9\u8be6\u7ec6\u4fe1\u606f\u3002"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'\n    -> Project[expressions: (c0:INTEGER, ROW["c0"]), (p1:BIGINT, plus(ROW["c1"],1)), (p2:BIGINT, plus(ROW["c1"],ROW["u_c1"])), ]\n      -> HashJoin[INNER c0=u_c0]\n        -> TableScan[]\n        -> Project[expressions: (u_c0:INTEGER, ROW["c0"]), (u_c1:BIGINT, ROW["c1"]), ]\n          -> Values[100 rows in 1 vectors]\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u6211\u4eec\u8fd8\u6765\u770b\u4e00\u4e2a\u805a\u5408\u67e5\u8be2\uff1a"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"plan->toString(false /*detailed*/, true /*recursive*/)"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n    -> Aggregation\n      -> TableScan\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"plan->toString(true /*detailed*/, true /*recursive*/)"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'\n    -> Aggregation[PARTIAL [c5] a0 := max(ROW["c0"]), a1 := sum(ROW["c1"]), a2 := sum(ROW["c2"]), a3 := sum(ROW["c3"]), a4 := sum(ROW["c4"])]\n      -> TableScan[]\n'})}),"\n",(0,t.jsx)(e.h2,{id:"printplanwithstats-1",children:"printPlanWithStats()"}),"\n",(0,t.jsx)(e.p,{children:"printPlanWithStats() \u51fd\u6570\u6253\u5370\u5e26\u6709\u8fd0\u884c\u65f6\u7edf\u8ba1\u4fe1\u606f\u6ce8\u91ca\u7684\u67e5\u8be2\u8ba1\u5212\u3002\u6b64\u51fd\u6570\u53ef\u5728\u67e5\u8be2\u5904\u7406\u5b8c\u6210\u540e\u4f7f\u7528\u3002\u5b83\u63a5\u53d7\u4e00\u4e2a\u6839\u8ba1\u5212\u8282\u70b9\u548c\u4e00\u4e2a TaskStats \u7ed3\u6784\u4f53\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cprintPlanWithStats \u4f1a\u663e\u793a\u6bcf\u4e2a\u8ba1\u5212\u8282\u70b9\u7684\u8f93\u51fa\u884c\u6570\u3001CPU \u65f6\u95f4\u3001\u4f7f\u7528\u7684\u7ebf\u7a0b\u6570\u4ee5\u53ca\u5cf0\u503c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u3002"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"printPlanWithStats(*plan, task->taskStats())"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'\n     -> Project[expressions: (c0:INTEGER, ROW["c0"]), (p1:BIGINT, plus(ROW["c1"],1)), (p2:BIGINT, plus(ROW["c1"],ROW["u_c1"]))]\n        Output: 2000 rows (154.98KB), Cpu time: 907.80us, Blocked wall time: 0ns, Peak memory: 1.00MB, Threads: 1, CPU breakdown: I/O/F (27.24us/872.82us/7.74us)\n       -> HashJoin[INNER c0=u_c0]\n          Output: 2000 rows (136.88KB), Cpu time: 508.74us, Blocked wall time: 117.00us, Peak memory: 2.00MB, CPU breakdown: I/O/F (177.87us/329.20us/1.66us)\n          HashBuild: Input: 100 rows (1.31KB), Output: 0 rows (0B), Cpu time: 41.77us, Blocked wall time: 0ns, Peak memory: 1.00MB, Threads: 1, CPU breakdown: I/O/F (40.18us/1.59us/0ns)\n          HashProbe: Input: 2000 rows (118.12KB), Output: 2000 rows (136.88KB), Cpu time: 466.97us, Blocked wall time: 117.00us, Peak memory: 1.00MB, Threads: 1, CPU breakdown: I/O/F (137.69us/327.61us/1.66us)\n         -> TableScan[Table: Orders]\n            Input: 2000 rows (118.12KB), Raw Input: 20480 rows (72.31KB), Output: 2000 rows (118.12KB), Cpu time: 8.89ms, Blocked wall time: 5.00us, Peak memory: 1.00MB, Threads: 1, Splits: 20, CPU breakdown: I/O/F (0ns/8.88ms/4.93us)\n         -> Project[expressions: (u_c0:INTEGER, ROW["c0"]), (u_c1:BIGINT, ROW["c1"])]\n            Output: 100 rows (1.31KB), Cpu time: 43.22us, Blocked wall time: 0ns, Peak memory: 0B, Threads: 1, CPU breakdown: I/O/F (691ns/5.54us/36.98us)\n           -> Values[100 rows in 1 vectors]\n              Input: 0 rows (0B), Output: 100 rows (1.31KB), Cpu time: 3.05us, Blocked wall time: 0ns, Peak memory: 0B, Threads: 1, CPU breakdown: I/O/F (0ns/2.48us/568ns)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u542f\u7528 includeCustomStats \u6807\u5fd7\u540e\uff0cprintPlanWithStats \u4f1a\u4e3a\u6bcf\u4e2a\u8ba1\u5212\u8282\u70b9\u6dfb\u52a0\u7279\u5b9a\u4e8e\u8fd0\u7b97\u7b26\u7684\u7edf\u8ba1\u4fe1\u606f\uff0c\u4f8b\u5982\uff0c\u8fde\u63a5\u952e\u7684\u4e0d\u540c\u503c\u6570\u91cf\u3001\n\u8868\u626b\u63cf\u4e2d\u8df3\u8fc7\u7684\u884c\u7ec4\u6570\u91cf\u3001\u4ece\u7f13\u5b58\u8bfb\u53d6\u7684\u6570\u636e\u91cf\u4ee5\u53ca\n\u8868\u626b\u63cf\u4e2d\u7684\u5b58\u50a8\u7a7a\u95f4\u3001\u901a\u8fc7\u805a\u5408\u4e0b\u63a8\u5230\u626b\u63cf\u4e2d\u5904\u7406\u7684\u884c\u6570\u7b49\u7b49\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u4ee5\u4e0b\u662f\u4e0a\u8ff0\u8fde\u63a5\u67e5\u8be2\u7684\u8f93\u51fa\u3002"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"printPlanWithStats(*plan, task->taskStats(), true)"})," \u663e\u793a\u81ea\u5b9a\u4e49\u8fd0\u7b97\u7b26\u7684\u7edf\u8ba1\u4fe1\u606f\u3002"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'\n    -> Project[expressions: (c0:INTEGER, ROW["c0"]), (p1:BIGINT, plus(ROW["c1"],1)), (p2:BIGINT, plus(ROW["c1"],ROW["u_c1"]))]\n       Output: 2000 rows (154.98KB), Cpu time: 907.80us, Blocked wall time: 0ns, Peak memory: 1.00MB, Threads: 1, CPU breakdown: I/O/F (27.24us/872.82us/7.74us)\n          dataSourceLazyWallNanos    sum: 473.00us, count: 20, min: 11.00us, max: 96.00us\n      -> HashJoin[INNER c0=u_c0]\n         Output: 2000 rows (136.88KB), Cpu time: 508.74us, Blocked wall time: 223.00us, Peak memory: 2.00MB, CPU breakdown: I/O/F (177.87us/329.20us/1.66us)\n         HashBuild: Input: 100 rows (1.31KB), Output: 0 rows (0B), Cpu time: 41.77us, Blocked wall time: 0ns, Peak memory: 1.00MB, Threads: 1, CPU breakdown: I/O/F (40.18us/1.59us/0ns)\n            distinctKey0       sum: 101, count: 1, min: 101, max: 101\n            queuedWallNanos    sum: 125.00us, count: 1, min: 125.00us, max: 125.00us\n            rangeKey0          sum: 200, count: 1, min: 200, max: 200\n         HashProbe: Input: 2000 rows (118.12KB), Output: 2000 rows (136.88KB), Cpu time: 466.97us, Blocked wall time: 223.00us, Peak memory: 1.00MB, Threads: 1, CPU breakdown: I/O/F (137.69us/327.61us/1.66us)\n            dynamicFiltersProduced    sum: 1, count: 1, min: 1, max: 1\n            queuedWallNanos           sum: 24.00us, count: 1, min: 24.00us, max: 24.00us\n        -> TableScan[Table: Orders]\n           Input: 2000 rows (118.12KB), Raw Input: 20480 rows (72.31KB), Output: 2000 rows (118.12KB), Cpu time: 8.89ms, Blocked wall time: 10.00us, Peak memory: 1.00MB, Threads: 1, Splits: 20, CPU breakdown: I/O/F (0ns/8.88ms/4.93us)\n              dataSourceWallNanos       sum: 2.52ms, count: 40, min: 12.00us, max: 250.00us\n              dynamicFiltersAccepted    sum: 1, count: 1, min: 1, max: 1\n              localReadBytes            sum: 0B, count: 1, min: 0B, max: 0B\n              numLocalRead              sum: 0, count: 1, min: 0, max: 0\n              numPrefetch               sum: 28, count: 1, min: 28, max: 28\n              numRamRead                sum: 0, count: 1, min: 0, max: 0\n              numStorageRead            sum: 140, count: 1, min: 140, max: 140\n              prefetchBytes             sum: 29.51KB, count: 1, min: 29.51KB, max: 29.51KB\n              queuedWallNanos           sum: 29.00us, count: 1, min: 29.00us, max: 29.00us\n              ramReadBytes              sum: 0B, count: 1, min: 0B, max: 0B\n              skippedSplitBytes         sum: 0B, count: 1, min: 0B, max: 0B\n              skippedSplits             sum: 0, count: 1, min: 0, max: 0\n              skippedStrides            sum: 0, count: 1, min: 0, max: 0\n              storageReadBytes          sum: 150.25KB, count: 1, min: 150.25KB, max: 150.25KB\n              totalScanTime             sum: 0ns, count: 1, min: 0ns, max: 0ns\n              totalRemainingFilterTime  sum: 0ns, count: 1, min: 0ns, max: 0ns\n              queryThreadIoLatency      sum: 0, count: 1, min: 0, max: 0\n        -> Project[expressions: (u_c0:INTEGER, ROW["c0"]), (u_c1:BIGINT, ROW["c1"])]\n           Output: 100 rows (1.31KB), Cpu time: 43.22us, Blocked wall time: 0ns, Peak memory: 0B, Threads: 1, CPU breakdown: I/O/F (691ns/5.54us/36.98us)\n          -> Values[100 rows in 1 vectors]\n             Input: 0 rows (0B), Output: 100 rows (1.31KB), Cpu time: 3.05us, Blocked wall time: 0ns, Peak memory: 0B, Threads: 1, CPU breakdown: I/O/F (0ns/2.48us/568ns)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u662f\u4e0a\u9762\u805a\u5408\u67e5\u8be2\u7684\u8f93\u51fa\u3002"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"printPlanWithStats(*plan, task->taskStats())"})," \u663e\u793a\u57fa\u672c\u7edf\u8ba1\u6570\u636e\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'\n   -> Aggregation[PARTIAL [c5] a0 := max(ROW["c0"]), a1 := sum(ROW["c1"]), a2 := sum(ROW["c2"]), a3 := sum(ROW["c3"]), a4 := sum(ROW["c4"])]\n      Output: 849 rows (84.38KB), Cpu time: 1.96ms, Blocked wall time: 0ns, Peak memory: 1.00MB, Threads: 1, CPU breakdown: I/O/F (1.38ms/579.12us/6.82us)\n     -> TableScan[Table: hive_table]\n        Input: 10000 rows (0B), Output: 10000 rows (0B), Cpu time: 2.89ms, Blocked wall time: 25.00us, Peak memory: 1.00MB, Threads: 1, Splits: 1, CPU breakdown: I/O/F (0ns/2.89ms/3.35us)\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"printPlanWithStats(*plan, task->taskStats(), true)"})," \u5305\u62ec\u81ea\u5b9a\u4e49\u7edf\u8ba1\u6570\u636e\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'\n    -> Aggregation[PARTIAL [c5] a0 := max(ROW["c0"]), a1 := sum(ROW["c1"]), a2 := sum(ROW["c2"]), a3 := sum(ROW["c3"]), a4 := sum(ROW["c4"])]\n       Output: 849 rows (84.38KB), Cpu time: 1.96ms, Blocked wall time: 0ns, Peak memory: 1.00MB, Threads: 1, CPU breakdown: I/O/F (1.38ms/579.12us/6.82us)\n      -> TableScan[Table: hive_table]\n         Input: 10000 rows (0B), Output: 10000 rows (0B), Cpu time: 2.89ms, Blocked wall time: 30.00us, Peak memory: 1.00MB, Threads: 1, Splits: 1, CPU breakdown: I/O/F (0ns/2.89ms/3.35us)\n            dataSourceLazyWallNanos    sum: 1.07ms, count: 7, min: 92.00us, max: 232.00us\n            dataSourceWallNanos        sum: 329.00us, count: 2, min: 48.00us, max: 281.00us\n            loadedToValueHook          sum: 50000, count: 5, min: 10000, max: 10000\n            localReadBytes             sum: 0B, count: 1, min: 0B, max: 0B\n            numLocalRead               sum: 0, count: 1, min: 0, max: 0\n            numPrefetch                sum: 2, count: 1, min: 2, max: 2\n            numRamRead                 sum: 0, count: 1, min: 0, max: 0\n            numStorageRead             sum: 7, count: 1, min: 7, max: 7\n            prefetchBytes              sum: 31.13KB, count: 1, min: 31.13KB, max: 31.13KB\n            queuedWallNanos            sum: 101.00us, count: 1, min: 101.00us, max: 101.00us\n            ramReadBytes               sum: 0B, count: 1, min: 0B, max: 0B\n            skippedSplitBytes          sum: 0B, count: 1, min: 0B, max: 0B\n            skippedSplits              sum: 0, count: 1, min: 0, max: 0\n            skippedStrides             sum: 0, count: 1, min: 0, max: 0\n            storageReadBytes           sum: 61.53KB, count: 1, min: 61.53KB, max: 61.53KB\n            totalScanTime              sum: 0ns, count: 1, min: 0ns, max: 0ns\n            totalRemainingFilterTime   sum: 0ns, count: 1, min: 0ns, max: 0ns\n            queryThreadIoLatency       sum: 0, count: 1, min: 0, max: 0\n'})}),"\n",(0,t.jsx)(e.h2,{id:"common-operator-statistics",children:"Common operator statistics"}),"\n",(0,t.jsx)(e.p,{children:"\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u6240\u6709\u8fd0\u7b97\u7b26\u6536\u96c6\u7684\u7edf\u8ba1\u6570\u636e\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u5bf9\u4e8e\u6bcf\u4e2a\u8fd0\u7b97\u7b26\uff0cPollux \u90fd\u4f1a\u8ddf\u8e2a\u8f93\u5165\u884c\u603b\u6570\u3001\u8f93\u51fa\u884c\u603b\u6570\u3001\n\u5b83\u4eec\u7684\u9884\u4f30\u5927\u5c0f\u3001CPU \u65f6\u95f4\u3001\u963b\u585e\u6302\u949f\u65f6\u95f4\u4ee5\u53ca\u8fd0\u884c\u8be5\u8fd0\u7b97\u7b26\u6240\u4f7f\u7528\u7684\u7ebf\u7a0b\u6570\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n    -> TableScan[Table: Orders]\n           Input: 2000 rows (118.12KB), Raw Input: 20480 rows (72.31KB), Output: 2000 rows (118.12KB), Cpu time: 8.89ms, Blocked wall time: 10.00us, Peak memory: 1.00MB, Threads: 1, Splits: 20, CPU breakdown: I/O/F (0ns/8.88ms/4.93us)\n"})}),"\n",(0,t.jsx)(e.p,{children:"printPlanWithStats \u663e\u793a\u6bcf\u4e2a\u8ba1\u5212\u8282\u70b9\u7684\u8f93\u51fa\u884c\u6570\u548c\u5927\u5c0f\uff0c\u5e76\u663e\u793a\u53f6\u8282\u70b9\u548c\u6269\u5c55\u5230\u591a\u4e2a\u8fd0\u7b97\u7b26\u7684\u8282\u70b9\u7684\u8f93\u5165\u884c\u6570\u548c\u5927\u5c0f\u3002\u663e\u793a\u5176\u4ed6\u8282\u70b9\u7684\u8f93\u5165\u884c\u662f\u591a\u4f59\u7684\uff0c\u56e0\u4e3a\u8f93\u5165\u884c\u6570\u7b49\u4e8e\u76f4\u63a5\u5b50\u8ba1\u5212\u8282\u70b9\u7684\u8f93\u51fa\u884c\u6570\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n\tInput: 2000 rows (118.12KB), Output: 2000 rows (118.12KB)\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5f53\u4f7f\u7528\u8fc7\u6ee4\u5668\u7684 TableScan \u4fee\u526a\u884c\u65f6\uff0cPollux \u4f1a\u62a5\u544a\u539f\u59cb\u8f93\u5165\u884c\u7684\u6570\u91cf\u53ca\u5176\u603b\u5927\u5c0f\u3002\u8fd9\u4e9b\u884c\u662f\u5728\u5e94\u7528\u4e0b\u63a8\u8fc7\u6ee4\u5668\u4e4b\u524d\u5904\u7406\u7684\u3002\nTableScan \u8fd8\u4f1a\u62a5\u544a\u5206\u914d\u7684\u5206\u7247\u6570\u91cf\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n\tRaw Input: 20480 rows (72.31KB), Splits: 20\n"})}),"\n",(0,t.jsx)(e.p,{children:"Pollux \u8fd8\u4f1a\u6d4b\u91cf\u6bcf\u4e2a\u7b97\u5b50\u7684 CPU \u65f6\u95f4\u548c\u5cf0\u503c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u3002\u6240\u6709\u8ba1\u5212\u8282\u70b9\u90fd\u4f1a\u663e\u793a\u8fd9\u4e9b\u4fe1\u606f\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n\tCpu time: 8.89ms, Peak memory: 1.00MB\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u60a8\u8fd8\u53ef\u4ee5\u5c06 CPU \u65f6\u95f4\u7ec6\u5206\u4e3a\u8fd0\u7b97\u7b26\u7684 addInput\u3001getOutput \u548c finish \u9636\u6bb5\u3002\n\u4e0b\u9762\u7684 I/O/F \u662f addInput/getOutput/finish \u7684\u5feb\u6377\u65b9\u5f0f\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n   CPU breakdown: I/O/F (0ns/8.88ms/4.93us)\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u67d0\u4e9b\u7b97\u5b50\uff08\u4f8b\u5982 TableScan \u548c HashProbe\uff09\u53ef\u80fd\u4f1a\u56e0\u7b49\u5f85\u62c6\u5206\u6216\u54c8\u5e0c\u8868\u800c\u88ab\n\u963b\u585e\u3002Pollux \u4f1a\u8bb0\u5f55\u7b97\u5b50\u88ab\u963b\u585e\u7684\u603b\u65f6\u95f4\uff0c\u5e76\u4e14 printPlanWithStats \u4f1a\u5c06\u6b64\u4fe1\u606f\u663e\u793a\u4e3a\u201c\u963b\u585e\u65f6\u95f4\u201d\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n\tBlocked wall time: 10.00us\n"})}),"\n",(0,t.jsx)(e.h2,{id:"custom-operator-statistics",children:"Custom operator statistics"}),"\n",(0,t.jsx)(e.p,{children:"\u64cd\u4f5c\u7b26\u8fd8\u4f1a\u6536\u96c6\u5e76\u62a5\u544a\u7279\u5b9a\u4e8e\u64cd\u4f5c\u7b26\u7684\u7edf\u8ba1\u4fe1\u606f\u3002"}),"\n",(0,t.jsx)(e.p,{children:"TableScan \u64cd\u4f5c\u7b26\u4f1a\u62a5\u544a\u7edf\u8ba1\u4fe1\u606f\uff0c\u663e\u793a\u4ece\u7f13\u5b58\u548c\u6301\u4e45\u5b58\u50a8\u4e2d\u8bfb\u53d6\u4e86\u591a\u5c11\u6570\u636e\u3001\u9884\u53d6\u4e86\u591a\u5c11\u6570\u636e\u3001\u4ee5\u53ca\u901a\u8fc7\u57fa\u4e8e\u7edf\u8ba1\u4fe1\u606f\u7684\u4fee\u526a\u8df3\u8fc7\u4e86\u591a\u5c11\u6587\u4ef6\u548c\u884c\u7ec4\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n   -> TableScan[Table = Orders]\n           localReadBytes            sum: 0B, count: 1, min: 0B, max: 0B\n           numLocalRead              sum: 0, count: 1, min: 0, max: 0\n           numPrefetch               sum: 28, count: 1, min: 28, max: 28\n           numRamRead                sum: 0, count: 1, min: 0, max: 0\n           numStorageRead            sum: 140, count: 1, min: 140, max: 140\n           prefetchBytes             sum: 29.51KB, count: 1, min: 29.51KB, max: 29.51KB\n           ramReadBytes              sum: 0B, count: 1, min: 0B, max: 0B\n           skippedSplitBytes         sum: 0B, count: 1, min: 0B, max: 0B\n           skippedSplits             sum: 0, count: 1, min: 0, max: 0\n           skippedStrides            sum: 0, count: 1, min: 0, max: 0\n           storageReadBytes          sum: 150.25KB, count: 1, min: 150.25KB, max: 150.25KB\n           totalScanTime             sum: 0ns, count: 1, min: 0ns, max: 0ns\n           totalRemainingFilterTime  sum: 0ns, count: 1, min: 0ns, max: 0ns\n           queryThreadIoLatency      sum: 0, count: 1, min: 0, max: 0\n"})}),"\n",(0,t.jsx)(e.p,{children:"HashBuild \u8fd0\u7b97\u7b26\u62a5\u544a\u8fde\u63a5\u952e\u7684\u4e0d\u540c\u503c\u7684\u8303\u56f4\u548c\u6570\u91cf\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n    -> HashJoin[INNER c0=u_c0]\n         HashBuild:\n            rangeKey0          sum: 200, count: 1, min: 200, max: 200\n            distinctKey0       sum: 101, count: 1, min: 101, max: 101\n"})}),"\n",(0,t.jsx)(e.p,{children:"HashProbe \u8fd0\u7b97\u7b26\u62a5\u544a\u5b83\u662f\u5426\u751f\u6210\u4e86\u52a8\u6001\u8fc7\u6ee4\u5668\uff0c\u800c TableScan \u8fd0\u7b97\u7b26\u62a5\u544a\u5b83\u662f\u5426\u6536\u5230\u4e86\u4ece\u8fde\u63a5\u4e2d\u63a8\u9001\u4e0b\u6765\u7684\u52a8\u6001\u8fc7\u6ee4\u5668\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n    -> HashJoin[INNER c0=u_c0]\n         HashProbe:\n            dynamicFiltersProduced    sum: 1, count: 1, min: 1, max: 1\n        -> TableScan[]\n              dynamicFiltersAccepted     sum: 1, count: 1, min: 1, max: 1\n"})}),"\n",(0,t.jsx)(e.p,{children:"TableScan \u8fd0\u7b97\u7b26\u901a\u8fc7\u5c06\u805a\u5408\u4e0b\u63a8\u5230 TableScan \u6765\u663e\u793a\u5904\u7406\u4e86\u591a\u5c11\u884c\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n    loadedToValueHook          sum: 50000, count: 5, min: 10000, max: 10000\n\n"})})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>r});var t=s(96540);const a={},u=t.createContext(a);function i(n){const e=t.useContext(u);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),t.createElement(u.Provider,{value:e},n.children)}}}]);
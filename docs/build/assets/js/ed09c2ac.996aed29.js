"use strict";(self.webpackChunkkumo_website=self.webpackChunkkumo_website||[]).push([[19954],{95341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=t(74848),i=t(28453);const s={},a="\u6d41\u5f0frpc",c={id:"cpp/krpc/streaming_rpc",title:"\u6d41\u5f0frpc",description:"\u5728\u4e00\u4e9b\u5e94\u7528\u573a\u666f\u4e2d\uff0c client\u6216server\u9700\u8981\u5411\u5bf9\u9762\u53d1\u9001\u5927\u91cf\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u975e\u5e38\u5927\u6216\u8005\u6301\u7eed\u5730\u5728\u4ea7\u751f\u4ee5\u81f3\u4e8e\u65e0\u6cd5\u653e\u5728\u4e00\u4e2aRPC\u7684\u9644\u4ef6\u4e2d\u3002\u6bd4\u5982\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e0d\u540c\u8282\u70b9\u95f4\u4f20\u9012replica\u6216snapshot\u3002client/server\u4e4b\u95f4\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21RPC\u628a\u6570\u636e\u5207\u5206\u540e\u4f20\u8f93\u8fc7\u53bb\uff0c\u4f46\u5b58\u5728\u5982\u4e0b\u95ee\u9898\uff1a",source:"@site/docs/cpp/krpc/streaming_rpc.mdx",sourceDirName:"cpp/krpc",slug:"/cpp/krpc/streaming_rpc",permalink:"/docs/next/cpp/krpc/streaming_rpc",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Jeff lothar",lastUpdatedAt:1748081772e3,frontMatter:{},sidebar:"docs",previous:{title:"\u591a\u7ef4\u5ea6kvar",permalink:"/docs/next/cpp/krpc/mkvar_c++"},next:{title:"EndPoint\u5de5\u5177\u7c7b",permalink:"/docs/next/cpp/krpc/endpoint"}},l={},d=[{value:"\u5efa\u7acbStream",id:"\u5efa\u7acbstream",level:2},{value:"\u63a5\u53d7Stream",id:"\u63a5\u53d7stream",level:2},{value:"\u8bfb\u53d6Stream",id:"\u8bfb\u53d6stream",level:2},{value:"\u5199\u5165Stream",id:"\u5199\u5165stream",level:2},{value:"\u6d41\u63a7",id:"\u6d41\u63a7",level:2},{value:"\u5173\u95edStream",id:"\u5173\u95edstream",level:2}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\u6d41\u5f0frpc",children:"\u6d41\u5f0frpc"})}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u4e00\u4e9b\u5e94\u7528\u573a\u666f\u4e2d\uff0c client\u6216server\u9700\u8981\u5411\u5bf9\u9762\u53d1\u9001\u5927\u91cf\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u975e\u5e38\u5927\u6216\u8005\u6301\u7eed\u5730\u5728\u4ea7\u751f\u4ee5\u81f3\u4e8e\u65e0\u6cd5\u653e\u5728\u4e00\u4e2aRPC\u7684\u9644\u4ef6\u4e2d\u3002\u6bd4\u5982\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e0d\u540c\u8282\u70b9\u95f4\u4f20\u9012replica\u6216snapshot\u3002client/server\u4e4b\u95f4\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21RPC\u628a\u6570\u636e\u5207\u5206\u540e\u4f20\u8f93\u8fc7\u53bb\uff0c\u4f46\u5b58\u5728\u5982\u4e0b\u95ee\u9898\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u8fd9\u4e9bRPC\u662f\u5e76\u884c\u7684\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u63a5\u6536\u7aef\u6709\u5e8f\u5730\u6536\u5230\u6570\u636e\uff0c\u62fc\u63a5\u6570\u636e\u7684\u903b\u8f91\u76f8\u5f53\u590d\u6742\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u8fd9\u4e9bRPC\u662f\u4e32\u884c\u7684\uff0c\u6bcf\u6b21\u4f20\u9012\u90fd\u5f97\u7b49\u5f85\u4e00\u6b21\u7f51\u7edcRTT+\u5904\u7406\u6570\u636e\u7684\u5ef6\u65f6\uff0c\u7279\u522b\u662f\u540e\u8005\u7684\u5ef6\u65f6\u53ef\u80fd\u662f\u96be\u4ee5\u9884\u4f30\u7684\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4e3a\u4e86\u8ba9\u5927\u5757\u6570\u636e\u4ee5\u6d41\u6c34\u7ebf\u7684\u65b9\u5f0f\u5728client/server\u4e4b\u95f4\u4f20\u9012\uff0c \u6211\u4eec\u63d0\u4f9b\u4e86Streaming RPC\u8fd9\u79cd\u4ea4\u4e92\u6a21\u578b\u3002Streaming RPC\u8ba9\u7528\u6237\u80fd\u591f\u5728client/service\u4e4b\u95f4\u5efa\u7acb\u7528\u6237\u6001\u8fde\u63a5\uff0c\u79f0\u4e3aStream,  \u540c\u4e00\u4e2aTCP\u8fde\u63a5\u4e4b\u4e0a\u80fd\u540c\u65f6\u5b58\u5728\u591a\u4e2aStream\u3002 Stream\u7684\u4f20\u8f93\u6570\u636e\u4ee5\u6d88\u606f\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c \u8f93\u5165\u7aef\u53ef\u4ee5\u6e90\u6e90\u4e0d\u65ad\u7684\u5f80Stream\u4e2d\u5199\u5165\u6d88\u606f\uff0c \u63a5\u6536\u7aef\u4f1a\u6309\u8f93\u5165\u7aef\u5199\u5165\u987a\u5e8f\u6536\u5230\u6d88\u606f\u3002"}),"\n",(0,r.jsx)(n.p,{children:"Streaming RPC\u4fdd\u8bc1\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u6709\u6d88\u606f\u8fb9\u754c\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u63a5\u6536\u6d88\u606f\u7684\u987a\u5e8f\u548c\u53d1\u9001\u6d88\u606f\u7684\u987a\u5e8f\u4e25\u683c\u4e00\u81f4\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5168\u53cc\u5de5\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u652f\u6301\u6d41\u63a7\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u63d0\u4f9b\u8d85\u65f6\u63d0\u9192"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u76ee\u524d\u7684\u5b9e\u73b0\u8fd8\u6ca1\u6709\u81ea\u52a8\u5207\u5272\u8fc7\u5927\u7684\u6d88\u606f\uff0c\u540c\u4e00\u4e2atcp\u8fde\u63a5\u4e0a\u7684\u591a\u4e2aStream\u4e4b\u95f4\u53ef\u80fd\u6709",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Head-of-line_blocking",children:"Head-of-line blocking"}),"\u95ee\u9898\uff0c\u8bf7\u5c3d\u91cf\u907f\u514d\u8fc7\u5927\u7684\u5355\u4e2a\u6d88\u606f\uff0c\u5b9e\u73b0\u81ea\u52a8\u5207\u5272\u540e\u6211\u4eec\u4f1a\u544a\u77e5\u5e76\u66f4\u65b0\u6587\u6863\u3002"]}),"\n",(0,r.jsxs)(n.p,{children:["\u4f8b\u5b50\u89c1",(0,r.jsx)(n.a,{href:"https://github.com/apache/krpc/tree/master/example/streaming_echo_c++/",children:"example/streaming_echo_c++"}),"\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"\u5efa\u7acbstream",children:"\u5efa\u7acbStream"}),"\n",(0,r.jsxs)(n.p,{children:["\u76ee\u524dStream\u90fd\u7531Client\u7aef\u5efa\u7acb\u3002Client\u5148\u5728\u672c\u5730\u521b\u5efa\u4e00\u4e2aStream\uff0c\u518d\u901a\u8fc7\u4e00\u6b21RPC\uff08\u5fc5\u987b\u4f7f\u7528baidu_std\u534f\u8bae\uff09\u4e0e\u6307\u5b9a\u7684Service\u5efa\u7acb\u4e00\u4e2aStream\uff0c\u5982\u679cService\u5728\u6536\u5230\u8bf7\u6c42\u4e4b\u540e\u9009\u62e9\u63a5\u53d7\u8fd9\u4e2aStream\uff0c \u90a3\u5728response\u8fd4\u56deClient\u540eStream\u5c31\u4f1a\u5efa\u7acb\u6210\u529f\u3002\u8fc7\u7a0b\u4e2d\u7684\u4efb\u4f55\u9519\u8bef\u90fd\u628aRPC\u6807\u8bb0\u4e3a\u5931\u8d25\uff0c\u540c\u65f6\u4e5f\u610f\u5473\u7740Stream\u521b\u5efa\u5931\u8d25\u3002\u7528linux\u4e0b\u5efa\u7acb\u8fde\u63a5\u7684\u8fc7\u7a0b\u6253\u6bd4\u65b9\uff0cClient\u5148\u521b\u5efa",(0,r.jsx)(n.a,{href:"http://linux.die.net/man/7/socket",children:"socket"}),"\uff08\u521b\u5efaStream\uff09\uff0c\u518d\u8c03\u7528",(0,r.jsx)(n.a,{href:"http://linux.die.net/man/2/connect",children:"connect"}),"\u5c1d\u8bd5\u4e0e\u8fdc\u7aef\u5efa\u7acb\u8fde\u63a5\uff08\u901a\u8fc7RPC\u5efa\u7acbStream\uff09\uff0c\u8fdc\u7aef",(0,r.jsx)(n.a,{href:"http://linux.die.net/man/2/accept",children:"accept"}),"\u540e\u8fde\u63a5\u5c31\u5efa\u7acb\u4e86\uff08service\u63a5\u53d7\u540e\u521b\u5efa\u6210\u529f\uff09\u3002"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u5982\u679cClient\u5c1d\u8bd5\u5411\u4e0d\u652f\u6301Streaming RPC\u7684\u8001Server\u5efa\u7acbStream\uff0c\u5c06\u603b\u662f\u5931\u8d25\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u7a0b\u5e8f\u4e2d\u6211\u4eec\u7528StreamId\u4ee3\u8868\u4e00\u4e2aStream\uff0c\u5bf9Stream\u7684\u8bfb\u5199\uff0c\u5173\u95ed\u64cd\u4f5c\u90fd\u5c06\u4f5c\u7528\u5728\u8fd9\u4e2aId\u4e0a\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:"struct StreamOptions\n    // The max size of unconsumed data allowed at remote side.\n    // If |max_buf_size| <= 0, there's no limit of buf size\n    // default: 2097152 (2M)\n    int max_buf_size;\n \n    // Notify user when there's no data for at least |idle_timeout_ms|\n    // milliseconds since the last time that on_received_messages or on_idle_timeout\n    // finished.\n    // default: -1\n    long idle_timeout_ms;\n     \n    // Maximum messages in batch passed to handler->on_received_messages\n    // default: 128\n    size_t messages_in_batch;\n \n    // Handle input message, if handler is NULL, the remote side is not allowed to\n    // write any message, who will get EBADF on writing\n    // default: NULL\n    StreamInputHandler* handler;\n};\n \n// [Called at the client side]\n// Create a Stream at client-side along with the |cntl|, which will be connected\n// when receiving the response with a Stream from server-side. If |options| is\n// NULL, the Stream will be created with default options\n// Return 0 on success, -1 otherwise\nint StreamCreate(StreamId* request_stream, Controller &cntl, const StreamOptions* options);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u63a5\u53d7stream",children:"\u63a5\u53d7Stream"}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679cclient\u5728RPC\u4e0a\u9644\u5e26\u4e86\u4e00\u4e2aStream\uff0c service\u5728\u6536\u5230RPC\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528StreamAccept\u63a5\u53d7\u3002\u63a5\u53d7\u540eServer\u7aef\u5bf9\u5e94\u4ea7\u751f\u7684Stream\u5b58\u653e\u5728response_stream\u4e2d\uff0cServer\u53ef\u901a\u8fc7\u8fd9\u4e2aStream\u5411Client\u53d1\u9001\u6570\u636e\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:"// [Called at the server side]\n// Accept the Stream. If client didn't create a Stream with the request\n// (cntl.has_remote_stream() returns false), this method would fail.\n// Return 0 on success, -1 otherwise.\nint StreamAccept(StreamId* response_stream, Controller &cntl, const StreamOptions* options);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u8bfb\u53d6stream",children:"\u8bfb\u53d6Stream"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u5efa\u7acb\u6216\u8005\u63a5\u53d7\u4e00\u4e2aStream\u7684\u65f6\u5019\uff0c \u7528\u6237\u53ef\u4ee5\u7ee7\u627fStreamInputHandler\u5e76\u628a\u8fd9\u4e2ahandler\u586b\u5165StreamOptions\u4e2d. \u901a\u8fc7\u8fd9\u4e2ahandler\uff0c\u7528\u6237\u53ef\u4ee5\u5904\u7406\u5bf9\u7aef\u7684\u5199\u5165\u6570\u636e\uff0c\u8fde\u63a5\u5173\u95ed\u4ee5\u53caidle timeout"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:"class StreamInputHandler {\npublic:\n    // \u5f53\u63a5\u6536\u5230\u6d88\u606f\u540e\u88ab\u8c03\u7528\n    virtual int on_received_messages(StreamId id, kutil::IOBuf *const messages[], size_t size) = 0;\n \n    // \u5f53Stream\u4e0a\u957f\u65f6\u95f4\u6ca1\u6709\u6570\u636e\u4ea4\u4e92\u540e\u88ab\u8c03\u7528\n    virtual void on_idle_timeout(StreamId id) = 0;\n \n    // \u5f53Stream\u88ab\u5173\u95ed\u65f6\u88ab\u8c03\u7528\n    virtual void on_closed(StreamId id) = 0;\n};\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"\u7b2c\u4e00\u6b21\u6536\u5230\u8bf7\u6c42\u7684\u65f6\u95f4"})})}),"\n",(0,r.jsx)(n.p,{children:"\u5728client\u7aef\uff0c\u5982\u679c\u5efa\u7acb\u8fc7\u7a0b\u662f\u4e00\u6b21\u540c\u6b65RPC\uff0c \u90a3\u5728\u7b49\u5f85\u7684\u7ebf\u7a0b\u88ab\u5524\u9192\u4e4b\u540e\uff0con_received_message\u5c31\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u5230\u3002 \u5982\u679c\u662f\u5f02\u6b65RPC\u8bf7\u6c42\uff0c \u90a3\u7b49\u5230\u8fd9\u6b21\u8bf7\u6c42\u7684done->Run() \u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c on_received_message\u5c31\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728server\u7aef\uff0c \u5f53\u6846\u67b6\u4f20\u5165\u7684done->Run()\u88ab\u8c03\u7528\u5b8c\u4e4b\u540e\uff0c on_received_message\u5c31\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\u5199\u5165stream",children:"\u5199\u5165Stream"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:"// Write |message| into |stream_id|. The remote-side handler will received the\n// message by the written order\n// Returns 0 on success, errno otherwise\n// Errno:\n//  - EAGAIN: |stream_id| is created with positive |max_buf_size| and buf size\n//            which the remote side hasn't consumed yet excceeds the number.\n//  - EINVAL: |stream_id| is invalied or has been closed\nint StreamWrite(StreamId stream_id, const kutil::IOBuf &message);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u6d41\u63a7",children:"\u6d41\u63a7"}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u5b58\u5728\u8f83\u591a\u5df2\u53d1\u9001\u4f46\u672a\u63a5\u6536\u7684\u6570\u636e\u65f6\uff0c\u53d1\u9001\u7aef\u7684Write\u64cd\u4f5c\u4f1a\u7acb\u5373\u5931\u8d25(\u8fd4\u56deEAGAIN\uff09\uff0c \u8fd9\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u540c\u6b65\u6216\u5f02\u6b65\u7684\u65b9\u5f0f\u7b49\u5f85\u5bf9\u7aef\u6d88\u8d39\u6389\u6570\u636e\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:"// Wait util the pending buffer size is less than |max_buf_size| or error occurs\n// Returns 0 on success, errno otherwise\n// Errno:\n//  - ETIMEDOUT: when |due_time| is not NULL and time expired this\n//  - EINVAL: the Stream was close during waiting\nint StreamWait(StreamId stream_id, const timespec* due_time);\n \n// Async wait\nvoid StreamWait(StreamId stream_id, const timespec *due_time,\n                void (*on_writable)(StreamId stream_id, void* arg, int error_code),\n                void *arg);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u5173\u95edstream",children:"\u5173\u95edStream"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:"// Close |stream_id|, after this function is called:\n//  - All the following |StreamWrite| would fail\n//  - |StreamWait| wakes up immediately.\n//  - Both sides |on_closed| would be notifed after all the pending buffers have\n//    been received\n// This function could be called multiple times without side-effects\nint StreamClose(StreamId stream_id);\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);